
MyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007590  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007718  08007718  00017718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007734  08007734  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007734  08007734  00017734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800773c  0800773c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800773c  0800773c  0001773c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007740  08007740  00017740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000800  20000090  080077d4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000890  080077d4  00020890  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6a0  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000344d  00000000  00000000  0003a760  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001440  00000000  00000000  0003dbb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012f0  00000000  00000000  0003eff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023d0a  00000000  00000000  000402e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001168e  00000000  00000000  00063fea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d097e  00000000  00000000  00075678  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00145ff6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005744  00000000  00000000  00146074  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007700 	.word	0x08007700

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007700 	.word	0x08007700

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fc74 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f81a 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f980 	bl	80007d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f880 	bl	80005dc <MX_I2C1_Init>
  MX_SPI1_Init();
 80004dc:	f000 f8ac 	bl	8000638 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e0:	f006 fd0a 	bl	8006ef8 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80004e4:	f000 f8de 	bl	80006a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004e8:	f000 f928 	bl	800073c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80004ec:	4804      	ldr	r0, [pc, #16]	; (8000500 <main+0x38>)
 80004ee:	f003 fade 	bl	8003aae <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80004f2:	4804      	ldr	r0, [pc, #16]	; (8000504 <main+0x3c>)
 80004f4:	f003 fadb 	bl	8003aae <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f8:	f006 fd24 	bl	8006f44 <MX_USB_HOST_Process>
 80004fc:	e7fc      	b.n	80004f8 <main+0x30>
 80004fe:	bf00      	nop
 8000500:	200001ac 	.word	0x200001ac
 8000504:	20000114 	.word	0x20000114

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f007 f830 	bl	800757c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000578:	2304      	movs	r3, #4
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 800057c:	2378      	movs	r3, #120	; 0x78
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000584:	2305      	movs	r3, #5
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	4618      	mov	r0, r3
 800058e:	f002 fdb1 	bl	80030f4 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000598:	f000 fa44 	bl	8000a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2103      	movs	r1, #3
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 f80a 	bl	80035d4 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005c6:	f000 fa2d 	bl	8000a24 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_I2C1_Init+0x50>)
 80005e2:	4a13      	ldr	r2, [pc, #76]	; (8000630 <MX_I2C1_Init+0x54>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_I2C1_Init+0x50>)
 80005e8:	4a12      	ldr	r2, [pc, #72]	; (8000634 <MX_I2C1_Init+0x58>)
 80005ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_I2C1_Init+0x50>)
 80005fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <MX_I2C1_Init+0x50>)
 800061a:	f002 fc33 	bl	8002e84 <HAL_I2C_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000624:	f000 f9fe 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200000c0 	.word	0x200000c0
 8000630:	40005400 	.word	0x40005400
 8000634:	000186a0 	.word	0x000186a0

08000638 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_SPI1_Init+0x64>)
 800063e:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <MX_SPI1_Init+0x68>)
 8000640:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_SPI1_Init+0x64>)
 8000644:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000648:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_SPI1_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_SPI1_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_SPI1_Init+0x64>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_SPI1_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_SPI1_Init+0x64>)
 8000664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000668:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_SPI1_Init+0x64>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000670:	4b0a      	ldr	r3, [pc, #40]	; (800069c <MX_SPI1_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_SPI1_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <MX_SPI1_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_SPI1_Init+0x64>)
 8000684:	220a      	movs	r2, #10
 8000686:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_SPI1_Init+0x64>)
 800068a:	f003 f981 	bl	8003990 <HAL_SPI_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000694:	f000 f9c6 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000154 	.word	0x20000154
 80006a0:	40013000 	.word	0x40013000

080006a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b8:	463b      	mov	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006c0:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <MX_TIM2_Init+0x94>)
 80006c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <MX_TIM2_Init+0x94>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_TIM2_Init+0x94>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80006d4:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_TIM2_Init+0x94>)
 80006d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80006da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_TIM2_Init+0x94>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_TIM2_Init+0x94>)
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006e8:	4813      	ldr	r0, [pc, #76]	; (8000738 <MX_TIM2_Init+0x94>)
 80006ea:	f003 f9b5 	bl	8003a58 <HAL_TIM_Base_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006f4:	f000 f996 	bl	8000a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	4619      	mov	r1, r3
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <MX_TIM2_Init+0x94>)
 8000706:	f003 fafe 	bl	8003d06 <HAL_TIM_ConfigClockSource>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000710:	f000 f988 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000714:	2300      	movs	r3, #0
 8000716:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	4619      	mov	r1, r3
 8000720:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_TIM2_Init+0x94>)
 8000722:	f003 fd13 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800072c:	f000 f97a 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200001ac 	.word	0x200001ac

0800073c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000750:	463b      	mov	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000758:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <MX_TIM3_Init+0x94>)
 800075a:	4a1e      	ldr	r2, [pc, #120]	; (80007d4 <MX_TIM3_Init+0x98>)
 800075c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_TIM3_Init+0x94>)
 8000760:	2201      	movs	r2, #1
 8000762:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000764:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_TIM3_Init+0x94>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <MX_TIM3_Init+0x94>)
 800076c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000770:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_TIM3_Init+0x94>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_TIM3_Init+0x94>)
 800077a:	2280      	movs	r2, #128	; 0x80
 800077c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800077e:	4814      	ldr	r0, [pc, #80]	; (80007d0 <MX_TIM3_Init+0x94>)
 8000780:	f003 f96a 	bl	8003a58 <HAL_TIM_Base_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 f94b 	bl	8000a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000792:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	4619      	mov	r1, r3
 800079a:	480d      	ldr	r0, [pc, #52]	; (80007d0 <MX_TIM3_Init+0x94>)
 800079c:	f003 fab3 	bl	8003d06 <HAL_TIM_ConfigClockSource>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f000 f93d 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007b2:	463b      	mov	r3, r7
 80007b4:	4619      	mov	r1, r3
 80007b6:	4806      	ldr	r0, [pc, #24]	; (80007d0 <MX_TIM3_Init+0x94>)
 80007b8:	f003 fcc8 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80007c2:	f000 f92f 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000114 	.word	0x20000114
 80007d4:	40000400 	.word	0x40000400

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08c      	sub	sp, #48	; 0x30
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
 80007f2:	4b85      	ldr	r3, [pc, #532]	; (8000a08 <MX_GPIO_Init+0x230>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a84      	ldr	r2, [pc, #528]	; (8000a08 <MX_GPIO_Init+0x230>)
 80007f8:	f043 0310 	orr.w	r3, r3, #16
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b82      	ldr	r3, [pc, #520]	; (8000a08 <MX_GPIO_Init+0x230>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0310 	and.w	r3, r3, #16
 8000806:	61bb      	str	r3, [r7, #24]
 8000808:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	4b7e      	ldr	r3, [pc, #504]	; (8000a08 <MX_GPIO_Init+0x230>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a7d      	ldr	r2, [pc, #500]	; (8000a08 <MX_GPIO_Init+0x230>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b7b      	ldr	r3, [pc, #492]	; (8000a08 <MX_GPIO_Init+0x230>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b77      	ldr	r3, [pc, #476]	; (8000a08 <MX_GPIO_Init+0x230>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a76      	ldr	r2, [pc, #472]	; (8000a08 <MX_GPIO_Init+0x230>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b74      	ldr	r3, [pc, #464]	; (8000a08 <MX_GPIO_Init+0x230>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b70      	ldr	r3, [pc, #448]	; (8000a08 <MX_GPIO_Init+0x230>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a6f      	ldr	r2, [pc, #444]	; (8000a08 <MX_GPIO_Init+0x230>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b6d      	ldr	r3, [pc, #436]	; (8000a08 <MX_GPIO_Init+0x230>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b69      	ldr	r3, [pc, #420]	; (8000a08 <MX_GPIO_Init+0x230>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a68      	ldr	r2, [pc, #416]	; (8000a08 <MX_GPIO_Init+0x230>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b66      	ldr	r3, [pc, #408]	; (8000a08 <MX_GPIO_Init+0x230>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b62      	ldr	r3, [pc, #392]	; (8000a08 <MX_GPIO_Init+0x230>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a61      	ldr	r2, [pc, #388]	; (8000a08 <MX_GPIO_Init+0x230>)
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b5f      	ldr	r3, [pc, #380]	; (8000a08 <MX_GPIO_Init+0x230>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0308 	and.w	r3, r3, #8
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2108      	movs	r1, #8
 800089a:	485c      	ldr	r0, [pc, #368]	; (8000a0c <MX_GPIO_Init+0x234>)
 800089c:	f000 fdcc 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2101      	movs	r1, #1
 80008a4:	485a      	ldr	r0, [pc, #360]	; (8000a10 <MX_GPIO_Init+0x238>)
 80008a6:	f000 fdc7 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008aa:	2200      	movs	r2, #0
 80008ac:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008b0:	4858      	ldr	r0, [pc, #352]	; (8000a14 <MX_GPIO_Init+0x23c>)
 80008b2:	f000 fdc1 	bl	8001438 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80008bc:	4854      	ldr	r0, [pc, #336]	; (8000a10 <MX_GPIO_Init+0x238>)
 80008be:	f000 fdbb 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008c2:	2308      	movs	r3, #8
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	484c      	ldr	r0, [pc, #304]	; (8000a0c <MX_GPIO_Init+0x234>)
 80008da:	f000 fc13 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC8 PC9 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_8|GPIO_PIN_9;
 80008de:	f240 3301 	movw	r3, #769	; 0x301
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4846      	ldr	r0, [pc, #280]	; (8000a10 <MX_GPIO_Init+0x238>)
 80008f8:	f000 fc04 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008fc:	2308      	movs	r3, #8
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090c:	2305      	movs	r3, #5
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	483e      	ldr	r0, [pc, #248]	; (8000a10 <MX_GPIO_Init+0x238>)
 8000918:	f000 fbf4 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800091c:	2301      	movs	r3, #1
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000920:	4b3d      	ldr	r3, [pc, #244]	; (8000a18 <MX_GPIO_Init+0x240>)
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	483b      	ldr	r0, [pc, #236]	; (8000a1c <MX_GPIO_Init+0x244>)
 8000930:	f000 fbe8 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000934:	2310      	movs	r3, #16
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000944:	2306      	movs	r3, #6
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4833      	ldr	r0, [pc, #204]	; (8000a1c <MX_GPIO_Init+0x244>)
 8000950:	f000 fbd8 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000954:	2304      	movs	r3, #4
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	482e      	ldr	r0, [pc, #184]	; (8000a20 <MX_GPIO_Init+0x248>)
 8000968:	f000 fbcc 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800096c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800097e:	2305      	movs	r3, #5
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4825      	ldr	r0, [pc, #148]	; (8000a20 <MX_GPIO_Init+0x248>)
 800098a:	f000 fbbb 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800098e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000992:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	481b      	ldr	r0, [pc, #108]	; (8000a14 <MX_GPIO_Init+0x23c>)
 80009a8:	f000 fbac 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009ac:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009be:	2306      	movs	r3, #6
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4811      	ldr	r0, [pc, #68]	; (8000a10 <MX_GPIO_Init+0x238>)
 80009ca:	f000 fb9b 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ce:	2320      	movs	r3, #32
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	480c      	ldr	r0, [pc, #48]	; (8000a14 <MX_GPIO_Init+0x23c>)
 80009e2:	f000 fb8f 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_GPIO_Init+0x240>)
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_GPIO_Init+0x234>)
 80009fa:	f000 fb83 	bl	8001104 <HAL_GPIO_Init>

}
 80009fe:	bf00      	nop
 8000a00:	3730      	adds	r7, #48	; 0x30
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40020800 	.word	0x40020800
 8000a14:	40020c00 	.word	0x40020c00
 8000a18:	10120000 	.word	0x10120000
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	40020400 	.word	0x40020400

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <Error_Handler+0x6>

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a6a:	2007      	movs	r0, #7
 8000a6c:	f000 fb08 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <HAL_I2C_MspInit+0x84>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d12c      	bne.n	8000af8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <HAL_I2C_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a17      	ldr	r2, [pc, #92]	; (8000b04 <HAL_I2C_MspInit+0x88>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_I2C_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aba:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac0:	2312      	movs	r3, #18
 8000ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000acc:	2304      	movs	r3, #4
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480c      	ldr	r0, [pc, #48]	; (8000b08 <HAL_I2C_MspInit+0x8c>)
 8000ad8:	f000 fb14 	bl	8001104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_I2C_MspInit+0x88>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <HAL_I2C_MspInit+0x88>)
 8000ae6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aea:	6413      	str	r3, [r2, #64]	; 0x40
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_I2C_MspInit+0x88>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000af8:	bf00      	nop
 8000afa:	3728      	adds	r7, #40	; 0x28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40005400 	.word	0x40005400
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020400 	.word	0x40020400

08000b0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <HAL_SPI_MspInit+0x84>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d12b      	bne.n	8000b86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_SPI_MspInit+0x88>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <HAL_SPI_MspInit+0x88>)
 8000b38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_SPI_MspInit+0x88>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_SPI_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <HAL_SPI_MspInit+0x88>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_SPI_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b66:	23e0      	movs	r3, #224	; 0xe0
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b76:	2305      	movs	r3, #5
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <HAL_SPI_MspInit+0x8c>)
 8000b82:	f000 fabf 	bl	8001104 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40013000 	.word	0x40013000
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000

08000b9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bac:	d116      	bne.n	8000bdc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <HAL_TIM_Base_MspInit+0x80>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	4a19      	ldr	r2, [pc, #100]	; (8000c1c <HAL_TIM_Base_MspInit+0x80>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HAL_TIM_Base_MspInit+0x80>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	201c      	movs	r0, #28
 8000bd0:	f000 fa61 	bl	8001096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bd4:	201c      	movs	r0, #28
 8000bd6:	f000 fa7a 	bl	80010ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bda:	e01a      	b.n	8000c12 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <HAL_TIM_Base_MspInit+0x84>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d115      	bne.n	8000c12 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_TIM_Base_MspInit+0x80>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <HAL_TIM_Base_MspInit+0x80>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_TIM_Base_MspInit+0x80>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	201d      	movs	r0, #29
 8000c08:	f000 fa45 	bl	8001096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c0c:	201d      	movs	r0, #29
 8000c0e:	f000 fa5e 	bl	80010ce <HAL_NVIC_EnableIRQ>
}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40000400 	.word	0x40000400

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <NMI_Handler+0x4>

08000c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <MemManage_Handler+0x4>

08000c36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c70:	f000 f8f4 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000c7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c80:	4803      	ldr	r0, [pc, #12]	; (8000c90 <TIM2_IRQHandler+0x18>)
 8000c82:	f000 fbf2 	bl	800146a <HAL_GPIO_TogglePin>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c86:	4803      	ldr	r0, [pc, #12]	; (8000c94 <TIM2_IRQHandler+0x1c>)
 8000c88:	f002 ff35 	bl	8003af6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40020800 	.word	0x40020800
 8000c94:	200001ac 	.word	0x200001ac

08000c98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000c9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca0:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <TIM3_IRQHandler+0x18>)
 8000ca2:	f000 fbe2 	bl	800146a <HAL_GPIO_TogglePin>

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ca6:	4803      	ldr	r0, [pc, #12]	; (8000cb4 <TIM3_IRQHandler+0x1c>)
 8000ca8:	f002 ff25 	bl	8003af6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40020800 	.word	0x40020800
 8000cb4:	20000114 	.word	0x20000114

08000cb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <OTG_FS_IRQHandler+0x10>)
 8000cbe:	f000 fe7f 	bl	80019c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200005c8 	.word	0x200005c8

08000ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <_sbrk+0x5c>)
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <_sbrk+0x60>)
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cfc:	f006 fc04 	bl	8007508 <__errno>
 8000d00:	4602      	mov	r2, r0
 8000d02:	230c      	movs	r3, #12
 8000d04:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20020000 	.word	0x20020000
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	200000ac 	.word	0x200000ac
 8000d34:	20000890 	.word	0x20000890

08000d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <SystemInit+0x28>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d42:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <SystemInit+0x28>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <SystemInit+0x28>)
 8000d4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d52:	609a      	str	r2, [r3, #8]
#endif
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d6a:	e003      	b.n	8000d74 <LoopCopyDataInit>

08000d6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d72:	3104      	adds	r1, #4

08000d74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d74:	480b      	ldr	r0, [pc, #44]	; (8000da4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d7c:	d3f6      	bcc.n	8000d6c <CopyDataInit>
  ldr  r2, =_sbss
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d80:	e002      	b.n	8000d88 <LoopFillZerobss>

08000d82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d84:	f842 3b04 	str.w	r3, [r2], #4

08000d88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d8c:	d3f9      	bcc.n	8000d82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d8e:	f7ff ffd3 	bl	8000d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d92:	f006 fbbf 	bl	8007514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d96:	f7ff fb97 	bl	80004c8 <main>
  bx  lr    
 8000d9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000da0:	08007744 	.word	0x08007744
  ldr  r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000da8:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000dac:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000db0:	20000890 	.word	0x20000890

08000db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <HAL_Init+0x40>)
 8000dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_Init+0x40>)
 8000dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_Init+0x40>)
 8000dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f94d 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 f808 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fe1e 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023c00 	.word	0x40023c00

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x54>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x58>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f965 	bl	80010ea <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e38:	f000 f92d 	bl	8001096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_InitTick+0x5c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000004 	.word	0x20000004

08000e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x20>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_IncTick+0x24>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	200001ec 	.word	0x200001ec

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	200001ec 	.word	0x200001ec

08000e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff ffee 	bl	8000e84 <HAL_GetTick>
 8000ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000eb4:	d005      	beq.n	8000ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_Delay+0x40>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ec2:	bf00      	nop
 8000ec4:	f7ff ffde 	bl	8000e84 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d8f7      	bhi.n	8000ec4 <HAL_Delay+0x28>
  {
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000008 	.word	0x20000008

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 021f 	and.w	r2, r3, #31
 8000f5c:	4907      	ldr	r1, [pc, #28]	; (8000f7c <__NVIC_EnableIRQ+0x38>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	; (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
         );
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800104c:	d301      	bcc.n	8001052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104e:	2301      	movs	r3, #1
 8001050:	e00f      	b.n	8001072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <SysTick_Config+0x40>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105a:	210f      	movs	r1, #15
 800105c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001060:	f7ff ff8e 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <SysTick_Config+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <SysTick_Config+0x40>)
 800106c:	2207      	movs	r2, #7
 800106e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	e000e010 	.word	0xe000e010

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff29 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a8:	f7ff ff3e 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 80010ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff ff8e 	bl	8000fd4 <NVIC_EncodePriority>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff5d 	bl	8000f80 <__NVIC_SetPriority>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff31 	bl	8000f44 <__NVIC_EnableIRQ>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffa2 	bl	800103c <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
 800111e:	e16b      	b.n	80013f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001120:	2201      	movs	r2, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	429a      	cmp	r2, r3
 800113a:	f040 815a 	bne.w	80013f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d00b      	beq.n	800115e <HAL_GPIO_Init+0x5a>
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001152:	2b11      	cmp	r3, #17
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b12      	cmp	r3, #18
 800115c:	d130      	bne.n	80011c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	2203      	movs	r2, #3
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001194:	2201      	movs	r2, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	f003 0201 	and.w	r2, r3, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0xfc>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b12      	cmp	r3, #18
 80011fe:	d123      	bne.n	8001248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	69b9      	ldr	r1, [r7, #24]
 8001244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0203 	and.w	r2, r3, #3
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80b4 	beq.w	80013f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b5f      	ldr	r3, [pc, #380]	; (800140c <HAL_GPIO_Init+0x308>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a5e      	ldr	r2, [pc, #376]	; (800140c <HAL_GPIO_Init+0x308>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b5c      	ldr	r3, [pc, #368]	; (800140c <HAL_GPIO_Init+0x308>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a6:	4a5a      	ldr	r2, [pc, #360]	; (8001410 <HAL_GPIO_Init+0x30c>)
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a51      	ldr	r2, [pc, #324]	; (8001414 <HAL_GPIO_Init+0x310>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d02b      	beq.n	800132a <HAL_GPIO_Init+0x226>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a50      	ldr	r2, [pc, #320]	; (8001418 <HAL_GPIO_Init+0x314>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d025      	beq.n	8001326 <HAL_GPIO_Init+0x222>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4f      	ldr	r2, [pc, #316]	; (800141c <HAL_GPIO_Init+0x318>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d01f      	beq.n	8001322 <HAL_GPIO_Init+0x21e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4e      	ldr	r2, [pc, #312]	; (8001420 <HAL_GPIO_Init+0x31c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d019      	beq.n	800131e <HAL_GPIO_Init+0x21a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4d      	ldr	r2, [pc, #308]	; (8001424 <HAL_GPIO_Init+0x320>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0x216>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4c      	ldr	r2, [pc, #304]	; (8001428 <HAL_GPIO_Init+0x324>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00d      	beq.n	8001316 <HAL_GPIO_Init+0x212>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4b      	ldr	r2, [pc, #300]	; (800142c <HAL_GPIO_Init+0x328>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d007      	beq.n	8001312 <HAL_GPIO_Init+0x20e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4a      	ldr	r2, [pc, #296]	; (8001430 <HAL_GPIO_Init+0x32c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_GPIO_Init+0x20a>
 800130a:	2307      	movs	r3, #7
 800130c:	e00e      	b.n	800132c <HAL_GPIO_Init+0x228>
 800130e:	2308      	movs	r3, #8
 8001310:	e00c      	b.n	800132c <HAL_GPIO_Init+0x228>
 8001312:	2306      	movs	r3, #6
 8001314:	e00a      	b.n	800132c <HAL_GPIO_Init+0x228>
 8001316:	2305      	movs	r3, #5
 8001318:	e008      	b.n	800132c <HAL_GPIO_Init+0x228>
 800131a:	2304      	movs	r3, #4
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x228>
 800131e:	2303      	movs	r3, #3
 8001320:	e004      	b.n	800132c <HAL_GPIO_Init+0x228>
 8001322:	2302      	movs	r3, #2
 8001324:	e002      	b.n	800132c <HAL_GPIO_Init+0x228>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <HAL_GPIO_Init+0x228>
 800132a:	2300      	movs	r3, #0
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	f002 0203 	and.w	r2, r2, #3
 8001332:	0092      	lsls	r2, r2, #2
 8001334:	4093      	lsls	r3, r2
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800133c:	4934      	ldr	r1, [pc, #208]	; (8001410 <HAL_GPIO_Init+0x30c>)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	3302      	adds	r3, #2
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800134a:	4b3a      	ldr	r3, [pc, #232]	; (8001434 <HAL_GPIO_Init+0x330>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800136e:	4a31      	ldr	r2, [pc, #196]	; (8001434 <HAL_GPIO_Init+0x330>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001374:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <HAL_GPIO_Init+0x330>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001398:	4a26      	ldr	r2, [pc, #152]	; (8001434 <HAL_GPIO_Init+0x330>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139e:	4b25      	ldr	r3, [pc, #148]	; (8001434 <HAL_GPIO_Init+0x330>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c2:	4a1c      	ldr	r2, [pc, #112]	; (8001434 <HAL_GPIO_Init+0x330>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <HAL_GPIO_Init+0x330>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ec:	4a11      	ldr	r2, [pc, #68]	; (8001434 <HAL_GPIO_Init+0x330>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3301      	adds	r3, #1
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	2b0f      	cmp	r3, #15
 80013fc:	f67f ae90 	bls.w	8001120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001400:	bf00      	nop
 8001402:	3724      	adds	r7, #36	; 0x24
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40023800 	.word	0x40023800
 8001410:	40013800 	.word	0x40013800
 8001414:	40020000 	.word	0x40020000
 8001418:	40020400 	.word	0x40020400
 800141c:	40020800 	.word	0x40020800
 8001420:	40020c00 	.word	0x40020c00
 8001424:	40021000 	.word	0x40021000
 8001428:	40021400 	.word	0x40021400
 800142c:	40021800 	.word	0x40021800
 8001430:	40021c00 	.word	0x40021c00
 8001434:	40013c00 	.word	0x40013c00

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001454:	e003      	b.n	800145e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	041a      	lsls	r2, r3, #16
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	619a      	str	r2, [r3, #24]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	460b      	mov	r3, r1
 8001474:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	401a      	ands	r2, r3
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	429a      	cmp	r2, r3
 8001482:	d104      	bne.n	800148e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	041a      	lsls	r2, r3, #16
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800148c:	e002      	b.n	8001494 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	619a      	str	r2, [r3, #24]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a2:	b08f      	sub	sp, #60	; 0x3c
 80014a4:	af0a      	add	r7, sp, #40	; 0x28
 80014a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e054      	b.n	800155c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d106      	bne.n	80014d2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f005 fd71 	bl	8006fb4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2203      	movs	r2, #3
 80014d6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 ff2d 	bl	8004350 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	687e      	ldr	r6, [r7, #4]
 80014fe:	466d      	mov	r5, sp
 8001500:	f106 0410 	add.w	r4, r6, #16
 8001504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001510:	e885 0003 	stmia.w	r5, {r0, r1}
 8001514:	1d33      	adds	r3, r6, #4
 8001516:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001518:	6838      	ldr	r0, [r7, #0]
 800151a:	f002 fea7 	bl	800426c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2101      	movs	r1, #1
 8001524:	4618      	mov	r0, r3
 8001526:	f002 ff24 	bl	8004372 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	687e      	ldr	r6, [r7, #4]
 8001532:	466d      	mov	r5, sp
 8001534:	f106 0410 	add.w	r4, r6, #16
 8001538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800153a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800153c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800153e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001540:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001544:	e885 0003 	stmia.w	r5, {r0, r1}
 8001548:	1d33      	adds	r3, r6, #4
 800154a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800154c:	6838      	ldr	r0, [r7, #0]
 800154e:	f003 f837 	bl	80045c0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001564 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af04      	add	r7, sp, #16
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	4608      	mov	r0, r1
 800156e:	4611      	mov	r1, r2
 8001570:	461a      	mov	r2, r3
 8001572:	4603      	mov	r3, r0
 8001574:	70fb      	strb	r3, [r7, #3]
 8001576:	460b      	mov	r3, r1
 8001578:	70bb      	strb	r3, [r7, #2]
 800157a:	4613      	mov	r3, r2
 800157c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <HAL_HCD_HC_Init+0x28>
 8001588:	2302      	movs	r3, #2
 800158a:	e07f      	b.n	800168c <HAL_HCD_HC_Init+0x128>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001594:	78fa      	ldrb	r2, [r7, #3]
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	440b      	add	r3, r1
 80015a2:	333d      	adds	r3, #61	; 0x3d
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015a8:	78fa      	ldrb	r2, [r7, #3]
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	440b      	add	r3, r1
 80015b6:	3338      	adds	r3, #56	; 0x38
 80015b8:	787a      	ldrb	r2, [r7, #1]
 80015ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80015bc:	78fa      	ldrb	r2, [r7, #3]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	440b      	add	r3, r1
 80015ca:	3340      	adds	r3, #64	; 0x40
 80015cc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015ce:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015d0:	78fa      	ldrb	r2, [r7, #3]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	440b      	add	r3, r1
 80015de:	3339      	adds	r3, #57	; 0x39
 80015e0:	78fa      	ldrb	r2, [r7, #3]
 80015e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015e4:	78fa      	ldrb	r2, [r7, #3]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	440b      	add	r3, r1
 80015f2:	333f      	adds	r3, #63	; 0x3f
 80015f4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015fa:	78fa      	ldrb	r2, [r7, #3]
 80015fc:	78bb      	ldrb	r3, [r7, #2]
 80015fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001602:	b2d8      	uxtb	r0, r3
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	440b      	add	r3, r1
 8001610:	333a      	adds	r3, #58	; 0x3a
 8001612:	4602      	mov	r2, r0
 8001614:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001616:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800161a:	2b00      	cmp	r3, #0
 800161c:	da0a      	bge.n	8001634 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800161e:	78fa      	ldrb	r2, [r7, #3]
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	440b      	add	r3, r1
 800162c:	333b      	adds	r3, #59	; 0x3b
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	e009      	b.n	8001648 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001634:	78fa      	ldrb	r2, [r7, #3]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	440b      	add	r3, r1
 8001642:	333b      	adds	r3, #59	; 0x3b
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001648:	78fa      	ldrb	r2, [r7, #3]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	440b      	add	r3, r1
 8001656:	333c      	adds	r3, #60	; 0x3c
 8001658:	f897 2020 	ldrb.w	r2, [r7, #32]
 800165c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	787c      	ldrb	r4, [r7, #1]
 8001664:	78ba      	ldrb	r2, [r7, #2]
 8001666:	78f9      	ldrb	r1, [r7, #3]
 8001668:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	4623      	mov	r3, r4
 800167a:	f003 f923 	bl	80048c4 <USB_HC_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	bd90      	pop	{r4, r7, pc}

08001694 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d101      	bne.n	80016b2 <HAL_HCD_HC_Halt+0x1e>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e00f      	b.n	80016d2 <HAL_HCD_HC_Halt+0x3e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	78fa      	ldrb	r2, [r7, #3]
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f003 fb5f 	bl	8004d86 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	4608      	mov	r0, r1
 80016e6:	4611      	mov	r1, r2
 80016e8:	461a      	mov	r2, r3
 80016ea:	4603      	mov	r3, r0
 80016ec:	70fb      	strb	r3, [r7, #3]
 80016ee:	460b      	mov	r3, r1
 80016f0:	70bb      	strb	r3, [r7, #2]
 80016f2:	4613      	mov	r3, r2
 80016f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	333b      	adds	r3, #59	; 0x3b
 8001706:	78ba      	ldrb	r2, [r7, #2]
 8001708:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	440b      	add	r3, r1
 8001718:	333f      	adds	r3, #63	; 0x3f
 800171a:	787a      	ldrb	r2, [r7, #1]
 800171c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800171e:	7c3b      	ldrb	r3, [r7, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d114      	bne.n	800174e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001724:	78fa      	ldrb	r2, [r7, #3]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	3342      	adds	r3, #66	; 0x42
 8001734:	2203      	movs	r2, #3
 8001736:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	440b      	add	r3, r1
 8001746:	333d      	adds	r3, #61	; 0x3d
 8001748:	7f3a      	ldrb	r2, [r7, #28]
 800174a:	701a      	strb	r2, [r3, #0]
 800174c:	e009      	b.n	8001762 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800174e:	78fa      	ldrb	r2, [r7, #3]
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	3342      	adds	r3, #66	; 0x42
 800175e:	2202      	movs	r2, #2
 8001760:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001762:	787b      	ldrb	r3, [r7, #1]
 8001764:	2b03      	cmp	r3, #3
 8001766:	f200 80d6 	bhi.w	8001916 <HAL_HCD_HC_SubmitRequest+0x23a>
 800176a:	a201      	add	r2, pc, #4	; (adr r2, 8001770 <HAL_HCD_HC_SubmitRequest+0x94>)
 800176c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001770:	08001781 	.word	0x08001781
 8001774:	08001901 	.word	0x08001901
 8001778:	080017ed 	.word	0x080017ed
 800177c:	08001877 	.word	0x08001877
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001780:	7c3b      	ldrb	r3, [r7, #16]
 8001782:	2b01      	cmp	r3, #1
 8001784:	f040 80c9 	bne.w	800191a <HAL_HCD_HC_SubmitRequest+0x23e>
 8001788:	78bb      	ldrb	r3, [r7, #2]
 800178a:	2b00      	cmp	r3, #0
 800178c:	f040 80c5 	bne.w	800191a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001790:	8b3b      	ldrh	r3, [r7, #24]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d109      	bne.n	80017aa <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001796:	78fa      	ldrb	r2, [r7, #3]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	440b      	add	r3, r1
 80017a4:	3351      	adds	r3, #81	; 0x51
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	440b      	add	r3, r1
 80017b8:	3351      	adds	r3, #81	; 0x51
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10a      	bne.n	80017d6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017c0:	78fa      	ldrb	r2, [r7, #3]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	440b      	add	r3, r1
 80017ce:	3342      	adds	r3, #66	; 0x42
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017d4:	e0a1      	b.n	800191a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017d6:	78fa      	ldrb	r2, [r7, #3]
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	440b      	add	r3, r1
 80017e4:	3342      	adds	r3, #66	; 0x42
 80017e6:	2202      	movs	r2, #2
 80017e8:	701a      	strb	r2, [r3, #0]
      break;
 80017ea:	e096      	b.n	800191a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017ec:	78bb      	ldrb	r3, [r7, #2]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d120      	bne.n	8001834 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017f2:	78fa      	ldrb	r2, [r7, #3]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	440b      	add	r3, r1
 8001800:	3351      	adds	r3, #81	; 0x51
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10a      	bne.n	800181e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	440b      	add	r3, r1
 8001816:	3342      	adds	r3, #66	; 0x42
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800181c:	e07e      	b.n	800191c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800181e:	78fa      	ldrb	r2, [r7, #3]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	440b      	add	r3, r1
 800182c:	3342      	adds	r3, #66	; 0x42
 800182e:	2202      	movs	r2, #2
 8001830:	701a      	strb	r2, [r3, #0]
      break;
 8001832:	e073      	b.n	800191c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	440b      	add	r3, r1
 8001842:	3350      	adds	r3, #80	; 0x50
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10a      	bne.n	8001860 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	440b      	add	r3, r1
 8001858:	3342      	adds	r3, #66	; 0x42
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
      break;
 800185e:	e05d      	b.n	800191c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	3342      	adds	r3, #66	; 0x42
 8001870:	2202      	movs	r2, #2
 8001872:	701a      	strb	r2, [r3, #0]
      break;
 8001874:	e052      	b.n	800191c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001876:	78bb      	ldrb	r3, [r7, #2]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d120      	bne.n	80018be <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800187c:	78fa      	ldrb	r2, [r7, #3]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	3351      	adds	r3, #81	; 0x51
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10a      	bne.n	80018a8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001892:	78fa      	ldrb	r2, [r7, #3]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	3342      	adds	r3, #66	; 0x42
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018a6:	e039      	b.n	800191c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	440b      	add	r3, r1
 80018b6:	3342      	adds	r3, #66	; 0x42
 80018b8:	2202      	movs	r2, #2
 80018ba:	701a      	strb	r2, [r3, #0]
      break;
 80018bc:	e02e      	b.n	800191c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018be:	78fa      	ldrb	r2, [r7, #3]
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	440b      	add	r3, r1
 80018cc:	3350      	adds	r3, #80	; 0x50
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10a      	bne.n	80018ea <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018d4:	78fa      	ldrb	r2, [r7, #3]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	440b      	add	r3, r1
 80018e2:	3342      	adds	r3, #66	; 0x42
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
      break;
 80018e8:	e018      	b.n	800191c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ea:	78fa      	ldrb	r2, [r7, #3]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	440b      	add	r3, r1
 80018f8:	3342      	adds	r3, #66	; 0x42
 80018fa:	2202      	movs	r2, #2
 80018fc:	701a      	strb	r2, [r3, #0]
      break;
 80018fe:	e00d      	b.n	800191c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001900:	78fa      	ldrb	r2, [r7, #3]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	440b      	add	r3, r1
 800190e:	3342      	adds	r3, #66	; 0x42
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
      break;
 8001914:	e002      	b.n	800191c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001916:	bf00      	nop
 8001918:	e000      	b.n	800191c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800191a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800191c:	78fa      	ldrb	r2, [r7, #3]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	440b      	add	r3, r1
 800192a:	3344      	adds	r3, #68	; 0x44
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001930:	78fa      	ldrb	r2, [r7, #3]
 8001932:	8b39      	ldrh	r1, [r7, #24]
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4403      	add	r3, r0
 8001940:	3348      	adds	r3, #72	; 0x48
 8001942:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	440b      	add	r3, r1
 8001952:	335c      	adds	r3, #92	; 0x5c
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	440b      	add	r3, r1
 8001966:	334c      	adds	r3, #76	; 0x4c
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	440b      	add	r3, r1
 800197a:	3339      	adds	r3, #57	; 0x39
 800197c:	78fa      	ldrb	r2, [r7, #3]
 800197e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	440b      	add	r3, r1
 800198e:	335d      	adds	r3, #93	; 0x5d
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	3338      	adds	r3, #56	; 0x38
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	18d1      	adds	r1, r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	f003 f892 	bl	8004ad8 <USB_HC_StartXfer>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop

080019c0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f002 fdaf 	bl	800453a <USB_GetMode>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b01      	cmp	r3, #1
 80019e0:	f040 80ef 	bne.w	8001bc2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f002 fd93 	bl	8004514 <USB_ReadInterrupts>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80e5 	beq.w	8001bc0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 fd8a 	bl	8004514 <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a0a:	d104      	bne.n	8001a16 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 fd7a 	bl	8004514 <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a2a:	d104      	bne.n	8001a36 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 fd6a 	bl	8004514 <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a4a:	d104      	bne.n	8001a56 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 fd5a 	bl	8004514 <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d103      	bne.n	8001a72 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f002 fd4c 	bl	8004514 <USB_ReadInterrupts>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a86:	d115      	bne.n	8001ab4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a90:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d108      	bne.n	8001ab4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f005 fb04 	bl	80070b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2101      	movs	r1, #1
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f002 fe42 	bl	8004738 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 fd2b 	bl	8004514 <USB_ReadInterrupts>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac8:	d102      	bne.n	8001ad0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f001 f966 	bl	8002d9c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 fd1d 	bl	8004514 <USB_ReadInterrupts>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d106      	bne.n	8001af2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f005 fac7 	bl	8007078 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2208      	movs	r2, #8
 8001af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 fd0c 	bl	8004514 <USB_ReadInterrupts>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b06:	d138      	bne.n	8001b7a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 f929 	bl	8004d64 <USB_HC_ReadInterrupt>
 8001b12:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	e025      	b.n	8001b66 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	fa22 f303 	lsr.w	r3, r2, r3
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d018      	beq.n	8001b60 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	015a      	lsls	r2, r3, #5
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4413      	add	r3, r2
 8001b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b44:	d106      	bne.n	8001b54 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f8cf 	bl	8001cf0 <HCD_HC_IN_IRQHandler>
 8001b52:	e005      	b.n	8001b60 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	4619      	mov	r1, r3
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 fcfd 	bl	800255a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3301      	adds	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d3d4      	bcc.n	8001b1a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f002 fcc8 	bl	8004514 <USB_ReadInterrupts>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b10      	cmp	r3, #16
 8001b8c:	d101      	bne.n	8001b92 <HAL_HCD_IRQHandler+0x1d2>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_HCD_IRQHandler+0x1d4>
 8001b92:	2300      	movs	r3, #0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d014      	beq.n	8001bc2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699a      	ldr	r2, [r3, #24]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0210 	bic.w	r2, r2, #16
 8001ba6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f001 f84b 	bl	8002c44 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	699a      	ldr	r2, [r3, #24]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0210 	orr.w	r2, r2, #16
 8001bbc:	619a      	str	r2, [r3, #24]
 8001bbe:	e000      	b.n	8001bc2 <HAL_HCD_IRQHandler+0x202>
      return;
 8001bc0:	bf00      	nop
    }
  }
}
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_HCD_Start+0x16>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e013      	b.n	8001c06 <HAL_HCD_Start+0x3e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fb9f 	bl	800432e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 fe02 	bl	8004800 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_HCD_Stop+0x16>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e00d      	b.n	8001c40 <HAL_HCD_Stop+0x32>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f003 f9e3 	bl	8004ffc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f002 fda9 	bl	80047ac <USB_ResetPort>
 8001c5a:	4603      	mov	r3, r0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c70:	78fa      	ldrb	r2, [r7, #3]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	440b      	add	r3, r1
 8001c7e:	335c      	adds	r3, #92	; 0x5c
 8001c80:	781b      	ldrb	r3, [r3, #0]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	334c      	adds	r3, #76	; 0x4c
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f002 fdeb 	bl	80048a0 <USB_GetCurrentFrame>
 8001cca:	4603      	mov	r3, r0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f002 fdc6 	bl	8004872 <USB_GetHostSpeed>
 8001ce6:	4603      	mov	r3, r0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	015a      	lsls	r2, r3, #5
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4413      	add	r3, r2
 8001d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d119      	bne.n	8001d54 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	015a      	lsls	r2, r3, #5
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4413      	add	r3, r2
 8001d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	2304      	movs	r3, #4
 8001d30:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	015a      	lsls	r2, r3, #5
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	0151      	lsls	r1, r2, #5
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	440a      	add	r2, r1
 8001d48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	60d3      	str	r3, [r2, #12]
 8001d52:	e0ce      	b.n	8001ef2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d6a:	d12c      	bne.n	8001dc6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	015a      	lsls	r2, r3, #5
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d78:	461a      	mov	r2, r3
 8001d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	440b      	add	r3, r1
 8001d8e:	335d      	adds	r3, #93	; 0x5d
 8001d90:	2207      	movs	r2, #7
 8001d92:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	015a      	lsls	r2, r3, #5
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	0151      	lsls	r1, r2, #5
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	440a      	add	r2, r1
 8001daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dae:	f043 0302 	orr.w	r3, r3, #2
 8001db2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f002 ffe1 	bl	8004d86 <USB_HC_Halt>
 8001dc4:	e095      	b.n	8001ef2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d109      	bne.n	8001df0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	015a      	lsls	r2, r3, #5
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de8:	461a      	mov	r2, r3
 8001dea:	2320      	movs	r3, #32
 8001dec:	6093      	str	r3, [r2, #8]
 8001dee:	e080      	b.n	8001ef2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	015a      	lsls	r2, r3, #5
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d134      	bne.n	8001e70 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	0151      	lsls	r1, r2, #5
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	440a      	add	r2, r1
 8001e1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	440b      	add	r3, r1
 8001e34:	335d      	adds	r3, #93	; 0x5d
 8001e36:	2205      	movs	r2, #5
 8001e38:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	015a      	lsls	r2, r3, #5
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e46:	461a      	mov	r2, r3
 8001e48:	2310      	movs	r3, #16
 8001e4a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	015a      	lsls	r2, r3, #5
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e58:	461a      	mov	r2, r3
 8001e5a:	2308      	movs	r3, #8
 8001e5c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f002 ff8c 	bl	8004d86 <USB_HC_Halt>
 8001e6e:	e040      	b.n	8001ef2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	015a      	lsls	r2, r3, #5
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e86:	d134      	bne.n	8001ef2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	015a      	lsls	r2, r3, #5
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4413      	add	r3, r2
 8001e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	0151      	lsls	r1, r2, #5
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	440a      	add	r2, r1
 8001e9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ea2:	f043 0302 	orr.w	r3, r3, #2
 8001ea6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f002 ff67 	bl	8004d86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2310      	movs	r3, #16
 8001ec8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	440b      	add	r3, r1
 8001ed8:	335d      	adds	r3, #93	; 0x5d
 8001eda:	2208      	movs	r2, #8
 8001edc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	015a      	lsls	r2, r3, #5
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eea:	461a      	mov	r2, r3
 8001eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f08:	d122      	bne.n	8001f50 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	0151      	lsls	r1, r2, #5
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	440a      	add	r2, r1
 8001f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f002 ff26 	bl	8004d86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f46:	461a      	mov	r2, r3
 8001f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f4c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f4e:	e300      	b.n	8002552 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	f040 80fd 	bne.w	8002162 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d01b      	beq.n	8001fa8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	440b      	add	r3, r1
 8001f7e:	3348      	adds	r3, #72	; 0x48
 8001f80:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	0159      	lsls	r1, r3, #5
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	440b      	add	r3, r1
 8001f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001f94:	1ad1      	subs	r1, r2, r3
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4403      	add	r3, r0
 8001fa4:	334c      	adds	r3, #76	; 0x4c
 8001fa6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	335d      	adds	r3, #93	; 0x5d
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	440b      	add	r3, r1
 8001fca:	3358      	adds	r3, #88	; 0x58
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	015a      	lsls	r2, r3, #5
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fdc:	461a      	mov	r2, r3
 8001fde:	2301      	movs	r3, #1
 8001fe0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	440b      	add	r3, r1
 8001ff0:	333f      	adds	r3, #63	; 0x3f
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	440b      	add	r3, r1
 8002006:	333f      	adds	r3, #63	; 0x3f
 8002008:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800200a:	2b02      	cmp	r3, #2
 800200c:	d121      	bne.n	8002052 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4413      	add	r3, r2
 8002016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	0151      	lsls	r1, r2, #5
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	440a      	add	r2, r1
 8002024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f002 fea4 	bl	8004d86 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	015a      	lsls	r2, r3, #5
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4413      	add	r3, r2
 8002046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204a:	461a      	mov	r2, r3
 800204c:	2310      	movs	r3, #16
 800204e:	6093      	str	r3, [r2, #8]
 8002050:	e070      	b.n	8002134 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	440b      	add	r3, r1
 8002060:	333f      	adds	r3, #63	; 0x3f
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d12a      	bne.n	80020be <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	015a      	lsls	r2, r3, #5
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4413      	add	r3, r2
 8002070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	0151      	lsls	r1, r2, #5
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	440a      	add	r2, r1
 800207e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002082:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002086:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	440b      	add	r3, r1
 8002096:	335c      	adds	r3, #92	; 0x5c
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	b2d8      	uxtb	r0, r3
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	440b      	add	r3, r1
 80020ae:	335c      	adds	r3, #92	; 0x5c
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	4601      	mov	r1, r0
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f005 f808 	bl	80070cc <HAL_HCD_HC_NotifyURBChange_Callback>
 80020bc:	e03a      	b.n	8002134 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	440b      	add	r3, r1
 80020cc:	333f      	adds	r3, #63	; 0x3f
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d12f      	bne.n	8002134 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	335c      	adds	r3, #92	; 0x5c
 80020e4:	2201      	movs	r2, #1
 80020e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	3350      	adds	r3, #80	; 0x50
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	f083 0301 	eor.w	r3, r3, #1
 80020fe:	b2d8      	uxtb	r0, r3
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	440b      	add	r3, r1
 800210e:	3350      	adds	r3, #80	; 0x50
 8002110:	4602      	mov	r2, r0
 8002112:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	b2d8      	uxtb	r0, r3
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	440b      	add	r3, r1
 8002126:	335c      	adds	r3, #92	; 0x5c
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	4601      	mov	r1, r0
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f004 ffcc 	bl	80070cc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	3350      	adds	r3, #80	; 0x50
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	f083 0301 	eor.w	r3, r3, #1
 800214a:	b2d8      	uxtb	r0, r3
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	440b      	add	r3, r1
 800215a:	3350      	adds	r3, #80	; 0x50
 800215c:	4602      	mov	r2, r0
 800215e:	701a      	strb	r2, [r3, #0]
}
 8002160:	e1f7      	b.n	8002552 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4413      	add	r3, r2
 800216a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b02      	cmp	r3, #2
 8002176:	f040 811a 	bne.w	80023ae <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4413      	add	r3, r2
 8002182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	0151      	lsls	r1, r2, #5
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	440a      	add	r2, r1
 8002190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002194:	f023 0302 	bic.w	r3, r3, #2
 8002198:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	440b      	add	r3, r1
 80021a8:	335d      	adds	r3, #93	; 0x5d
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d10a      	bne.n	80021c6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	440b      	add	r3, r1
 80021be:	335c      	adds	r3, #92	; 0x5c
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
 80021c4:	e0d9      	b.n	800237a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	440b      	add	r3, r1
 80021d4:	335d      	adds	r3, #93	; 0x5d
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b05      	cmp	r3, #5
 80021da:	d10a      	bne.n	80021f2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	335c      	adds	r3, #92	; 0x5c
 80021ec:	2205      	movs	r2, #5
 80021ee:	701a      	strb	r2, [r3, #0]
 80021f0:	e0c3      	b.n	800237a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	440b      	add	r3, r1
 8002200:	335d      	adds	r3, #93	; 0x5d
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b06      	cmp	r3, #6
 8002206:	d00a      	beq.n	800221e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	440b      	add	r3, r1
 8002216:	335d      	adds	r3, #93	; 0x5d
 8002218:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800221a:	2b08      	cmp	r3, #8
 800221c:	d156      	bne.n	80022cc <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	440b      	add	r3, r1
 800222c:	3358      	adds	r3, #88	; 0x58
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	1c59      	adds	r1, r3, #1
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4403      	add	r3, r0
 8002240:	3358      	adds	r3, #88	; 0x58
 8002242:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	3358      	adds	r3, #88	; 0x58
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d914      	bls.n	8002284 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	3358      	adds	r3, #88	; 0x58
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	440b      	add	r3, r1
 800227c:	335c      	adds	r3, #92	; 0x5c
 800227e:	2204      	movs	r2, #4
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	e009      	b.n	8002298 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	440b      	add	r3, r1
 8002292:	335c      	adds	r3, #92	; 0x5c
 8002294:	2202      	movs	r2, #2
 8002296:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022ae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022b6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c4:	461a      	mov	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e056      	b.n	800237a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	440b      	add	r3, r1
 80022da:	335d      	adds	r3, #93	; 0x5d
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d123      	bne.n	800232a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	440b      	add	r3, r1
 80022f0:	335c      	adds	r3, #92	; 0x5c
 80022f2:	2202      	movs	r2, #2
 80022f4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800230c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002314:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	461a      	mov	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	e027      	b.n	800237a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	335d      	adds	r3, #93	; 0x5d
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b07      	cmp	r3, #7
 800233e:	d11c      	bne.n	800237a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	440b      	add	r3, r1
 800234e:	3358      	adds	r3, #88	; 0x58
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	1c59      	adds	r1, r3, #1
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4403      	add	r3, r0
 8002362:	3358      	adds	r3, #88	; 0x58
 8002364:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	440b      	add	r3, r1
 8002374:	335c      	adds	r3, #92	; 0x5c
 8002376:	2204      	movs	r2, #4
 8002378:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002386:	461a      	mov	r2, r3
 8002388:	2302      	movs	r3, #2
 800238a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	b2d8      	uxtb	r0, r3
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	440b      	add	r3, r1
 800239e:	335c      	adds	r3, #92	; 0x5c
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	4601      	mov	r1, r0
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f004 fe90 	bl	80070cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023ac:	e0d1      	b.n	8002552 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c0:	2b80      	cmp	r3, #128	; 0x80
 80023c2:	d13e      	bne.n	8002442 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	0151      	lsls	r1, r2, #5
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	440a      	add	r2, r1
 80023da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023de:	f043 0302 	orr.w	r3, r3, #2
 80023e2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	3358      	adds	r3, #88	; 0x58
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	1c59      	adds	r1, r3, #1
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4403      	add	r3, r0
 8002406:	3358      	adds	r3, #88	; 0x58
 8002408:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	335d      	adds	r3, #93	; 0x5d
 800241a:	2206      	movs	r2, #6
 800241c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f002 fcac 	bl	8004d86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4413      	add	r3, r2
 8002436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243a:	461a      	mov	r2, r3
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	6093      	str	r3, [r2, #8]
}
 8002440:	e087      	b.n	8002552 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b10      	cmp	r3, #16
 8002456:	d17c      	bne.n	8002552 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	333f      	adds	r3, #63	; 0x3f
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d122      	bne.n	80024b4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	440b      	add	r3, r1
 800247c:	3358      	adds	r3, #88	; 0x58
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4413      	add	r3, r2
 800248a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	0151      	lsls	r1, r2, #5
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	440a      	add	r2, r1
 8002498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f002 fc6a 	bl	8004d86 <USB_HC_Halt>
 80024b2:	e045      	b.n	8002540 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	440b      	add	r3, r1
 80024c2:	333f      	adds	r3, #63	; 0x3f
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	440b      	add	r3, r1
 80024d8:	333f      	adds	r3, #63	; 0x3f
 80024da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d12f      	bne.n	8002540 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	440b      	add	r3, r1
 80024ee:	3358      	adds	r3, #88	; 0x58
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d121      	bne.n	8002540 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	440b      	add	r3, r1
 800250a:	335d      	adds	r3, #93	; 0x5d
 800250c:	2203      	movs	r2, #3
 800250e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	0151      	lsls	r1, r2, #5
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	440a      	add	r2, r1
 8002526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800252a:	f043 0302 	orr.w	r3, r3, #2
 800252e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	4611      	mov	r1, r2
 800253a:	4618      	mov	r0, r3
 800253c:	f002 fc23 	bl	8004d86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4413      	add	r3, r2
 8002548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254c:	461a      	mov	r2, r3
 800254e:	2310      	movs	r3, #16
 8002550:	6093      	str	r3, [r2, #8]
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b086      	sub	sp, #24
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	460b      	mov	r3, r1
 8002564:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b04      	cmp	r3, #4
 8002588:	d119      	bne.n	80025be <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4413      	add	r3, r2
 8002592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002596:	461a      	mov	r2, r3
 8002598:	2304      	movs	r3, #4
 800259a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	0151      	lsls	r1, r2, #5
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	440a      	add	r2, r1
 80025b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025b6:	f043 0302 	orr.w	r3, r3, #2
 80025ba:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80025bc:	e33e      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d141      	bne.n	8002658 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e0:	461a      	mov	r2, r3
 80025e2:	2320      	movs	r3, #32
 80025e4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	440b      	add	r3, r1
 80025f4:	333d      	adds	r3, #61	; 0x3d
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	f040 831f 	bne.w	8002c3c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4613      	mov	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	440b      	add	r3, r1
 800260c:	333d      	adds	r3, #61	; 0x3d
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	440b      	add	r3, r1
 8002620:	335c      	adds	r3, #92	; 0x5c
 8002622:	2202      	movs	r2, #2
 8002624:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4413      	add	r3, r2
 800262e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	0151      	lsls	r1, r2, #5
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	440a      	add	r2, r1
 800263c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002640:	f043 0302 	orr.w	r3, r3, #2
 8002644:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	4611      	mov	r1, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f002 fb98 	bl	8004d86 <USB_HC_Halt>
}
 8002656:	e2f1      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4413      	add	r3, r2
 8002660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266a:	2b40      	cmp	r3, #64	; 0x40
 800266c:	d13f      	bne.n	80026ee <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	440b      	add	r3, r1
 800267c:	335d      	adds	r3, #93	; 0x5d
 800267e:	2204      	movs	r2, #4
 8002680:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	440b      	add	r3, r1
 8002690:	333d      	adds	r3, #61	; 0x3d
 8002692:	2201      	movs	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	440b      	add	r3, r1
 80026a4:	3358      	adds	r3, #88	; 0x58
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	0151      	lsls	r1, r2, #5
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	440a      	add	r2, r1
 80026c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026c4:	f043 0302 	orr.w	r3, r3, #2
 80026c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f002 fb56 	bl	8004d86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	015a      	lsls	r2, r3, #5
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e6:	461a      	mov	r2, r3
 80026e8:	2340      	movs	r3, #64	; 0x40
 80026ea:	6093      	str	r3, [r2, #8]
}
 80026ec:	e2a6      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002704:	d122      	bne.n	800274c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4413      	add	r3, r2
 800270e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	0151      	lsls	r1, r2, #5
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	440a      	add	r2, r1
 800271c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f002 fb28 	bl	8004d86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002742:	461a      	mov	r2, r3
 8002744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002748:	6093      	str	r3, [r2, #8]
}
 800274a:	e277      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d135      	bne.n	80027ce <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	440b      	add	r3, r1
 8002770:	3358      	adds	r3, #88	; 0x58
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4413      	add	r3, r2
 800277e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	0151      	lsls	r1, r2, #5
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	440a      	add	r2, r1
 800278c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	4611      	mov	r1, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f002 faf0 	bl	8004d86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	015a      	lsls	r2, r3, #5
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b2:	461a      	mov	r2, r3
 80027b4:	2301      	movs	r3, #1
 80027b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	440b      	add	r3, r1
 80027c6:	335d      	adds	r3, #93	; 0x5d
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
}
 80027cc:	e236      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d12b      	bne.n	800283c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f0:	461a      	mov	r2, r3
 80027f2:	2308      	movs	r3, #8
 80027f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	0151      	lsls	r1, r2, #5
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	440a      	add	r2, r1
 800280c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002810:	f043 0302 	orr.w	r3, r3, #2
 8002814:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f002 fab0 	bl	8004d86 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	335d      	adds	r3, #93	; 0x5d
 8002836:	2205      	movs	r2, #5
 8002838:	701a      	strb	r2, [r3, #0]
}
 800283a:	e1ff      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4413      	add	r3, r2
 8002844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	2b10      	cmp	r3, #16
 8002850:	d155      	bne.n	80028fe <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	440b      	add	r3, r1
 8002860:	3358      	adds	r3, #88	; 0x58
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	335d      	adds	r3, #93	; 0x5d
 8002876:	2203      	movs	r2, #3
 8002878:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	440b      	add	r3, r1
 8002888:	333d      	adds	r3, #61	; 0x3d
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d114      	bne.n	80028ba <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	440b      	add	r3, r1
 800289e:	333c      	adds	r3, #60	; 0x3c
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	440b      	add	r3, r1
 80028b4:	333d      	adds	r3, #61	; 0x3d
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	0151      	lsls	r1, r2, #5
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	440a      	add	r2, r1
 80028d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f002 fa4e 	bl	8004d86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f6:	461a      	mov	r2, r3
 80028f8:	2310      	movs	r3, #16
 80028fa:	6093      	str	r3, [r2, #8]
}
 80028fc:	e19e      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4413      	add	r3, r2
 8002906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002910:	2b80      	cmp	r3, #128	; 0x80
 8002912:	d12b      	bne.n	800296c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4413      	add	r3, r2
 800291c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	0151      	lsls	r1, r2, #5
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	440a      	add	r2, r1
 800292a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800292e:	f043 0302 	orr.w	r3, r3, #2
 8002932:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	4611      	mov	r1, r2
 800293e:	4618      	mov	r0, r3
 8002940:	f002 fa21 	bl	8004d86 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	440b      	add	r3, r1
 8002952:	335d      	adds	r3, #93	; 0x5d
 8002954:	2206      	movs	r2, #6
 8002956:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002964:	461a      	mov	r2, r3
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	6093      	str	r3, [r2, #8]
}
 800296a:	e167      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002982:	d135      	bne.n	80029f0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4413      	add	r3, r2
 800298c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	0151      	lsls	r1, r2, #5
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	440a      	add	r2, r1
 800299a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800299e:	f043 0302 	orr.w	r3, r3, #2
 80029a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f002 f9e9 	bl	8004d86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c0:	461a      	mov	r2, r3
 80029c2:	2310      	movs	r3, #16
 80029c4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d2:	461a      	mov	r2, r3
 80029d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	440b      	add	r3, r1
 80029e8:	335d      	adds	r3, #93	; 0x5d
 80029ea:	2208      	movs	r2, #8
 80029ec:	701a      	strb	r2, [r3, #0]
}
 80029ee:	e125      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	f040 811a 	bne.w	8002c3c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	0151      	lsls	r1, r2, #5
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	440a      	add	r2, r1
 8002a1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a22:	f023 0302 	bic.w	r3, r3, #2
 8002a26:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	440b      	add	r3, r1
 8002a36:	335d      	adds	r3, #93	; 0x5d
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d137      	bne.n	8002aae <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	440b      	add	r3, r1
 8002a4c:	335c      	adds	r3, #92	; 0x5c
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	440b      	add	r3, r1
 8002a60:	333f      	adds	r3, #63	; 0x3f
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d00b      	beq.n	8002a80 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	440b      	add	r3, r1
 8002a76:	333f      	adds	r3, #63	; 0x3f
 8002a78:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	f040 80c5 	bne.w	8002c0a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3351      	adds	r3, #81	; 0x51
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	f083 0301 	eor.w	r3, r3, #1
 8002a96:	b2d8      	uxtb	r0, r3
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3351      	adds	r3, #81	; 0x51
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	701a      	strb	r2, [r3, #0]
 8002aac:	e0ad      	b.n	8002c0a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	440b      	add	r3, r1
 8002abc:	335d      	adds	r3, #93	; 0x5d
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d10a      	bne.n	8002ada <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	440b      	add	r3, r1
 8002ad2:	335c      	adds	r3, #92	; 0x5c
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	701a      	strb	r2, [r3, #0]
 8002ad8:	e097      	b.n	8002c0a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	440b      	add	r3, r1
 8002ae8:	335d      	adds	r3, #93	; 0x5d
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d10a      	bne.n	8002b06 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	440b      	add	r3, r1
 8002afe:	335c      	adds	r3, #92	; 0x5c
 8002b00:	2202      	movs	r2, #2
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	e081      	b.n	8002c0a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	440b      	add	r3, r1
 8002b14:	335d      	adds	r3, #93	; 0x5d
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d10a      	bne.n	8002b32 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	440b      	add	r3, r1
 8002b2a:	335c      	adds	r3, #92	; 0x5c
 8002b2c:	2205      	movs	r2, #5
 8002b2e:	701a      	strb	r2, [r3, #0]
 8002b30:	e06b      	b.n	8002c0a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	440b      	add	r3, r1
 8002b40:	335d      	adds	r3, #93	; 0x5d
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b06      	cmp	r3, #6
 8002b46:	d00a      	beq.n	8002b5e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	335d      	adds	r3, #93	; 0x5d
 8002b58:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d155      	bne.n	8002c0a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	3358      	adds	r3, #88	; 0x58
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	1c59      	adds	r1, r3, #1
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4403      	add	r3, r0
 8002b80:	3358      	adds	r3, #88	; 0x58
 8002b82:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	440b      	add	r3, r1
 8002b92:	3358      	adds	r3, #88	; 0x58
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d914      	bls.n	8002bc4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	440b      	add	r3, r1
 8002ba8:	3358      	adds	r3, #88	; 0x58
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	335c      	adds	r3, #92	; 0x5c
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	701a      	strb	r2, [r3, #0]
 8002bc2:	e009      	b.n	8002bd8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	335c      	adds	r3, #92	; 0x5c
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bee:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bf6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c04:	461a      	mov	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c16:	461a      	mov	r2, r3
 8002c18:	2302      	movs	r3, #2
 8002c1a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	b2d8      	uxtb	r0, r3
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	335c      	adds	r3, #92	; 0x5c
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	4601      	mov	r1, r0
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f004 fa48 	bl	80070cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c3c:	bf00      	nop
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08a      	sub	sp, #40	; 0x28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	0c5b      	lsrs	r3, r3, #17
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	091b      	lsrs	r3, r3, #4
 8002c74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c78:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d003      	beq.n	8002c88 <HCD_RXQLVL_IRQHandler+0x44>
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	f000 8082 	beq.w	8002d8a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c86:	e083      	b.n	8002d90 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d07f      	beq.n	8002d8e <HCD_RXQLVL_IRQHandler+0x14a>
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	440b      	add	r3, r1
 8002c9c:	3344      	adds	r3, #68	; 0x44
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d074      	beq.n	8002d8e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	440b      	add	r3, r1
 8002cb6:	3344      	adds	r3, #68	; 0x44
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	b292      	uxth	r2, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	f001 fbff 	bl	80044c2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	3344      	adds	r3, #68	; 0x44
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	18d1      	adds	r1, r2, r3
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4403      	add	r3, r0
 8002ce8:	3344      	adds	r3, #68	; 0x44
 8002cea:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	440b      	add	r3, r1
 8002cfa:	334c      	adds	r3, #76	; 0x4c
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	18d1      	adds	r1, r2, r3
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4403      	add	r3, r0
 8002d10:	334c      	adds	r3, #76	; 0x4c
 8002d12:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d20:	691a      	ldr	r2, [r3, #16]
 8002d22:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <HCD_RXQLVL_IRQHandler+0x154>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d031      	beq.n	8002d8e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d40:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d48:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d56:	461a      	mov	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	440b      	add	r3, r1
 8002d6a:	3350      	adds	r3, #80	; 0x50
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	f083 0301 	eor.w	r3, r3, #1
 8002d72:	b2d8      	uxtb	r0, r3
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	440b      	add	r3, r1
 8002d82:	3350      	adds	r3, #80	; 0x50
 8002d84:	4602      	mov	r2, r0
 8002d86:	701a      	strb	r2, [r3, #0]
      break;
 8002d88:	e001      	b.n	8002d8e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002d8a:	bf00      	nop
 8002d8c:	e000      	b.n	8002d90 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002d8e:	bf00      	nop
  }
}
 8002d90:	bf00      	nop
 8002d92:	3728      	adds	r7, #40	; 0x28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	1ff80000 	.word	0x1ff80000

08002d9c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002dc8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d10b      	bne.n	8002dec <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d102      	bne.n	8002de4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f004 f958 	bl	8007094 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f043 0302 	orr.w	r3, r3, #2
 8002dea:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d132      	bne.n	8002e5c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f043 0308 	orr.w	r3, r3, #8
 8002dfc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d126      	bne.n	8002e56 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d113      	bne.n	8002e38 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e1a:	d106      	bne.n	8002e2a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2102      	movs	r1, #2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f001 fc88 	bl	8004738 <USB_InitFSLSPClkSel>
 8002e28:	e011      	b.n	8002e4e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2101      	movs	r1, #1
 8002e30:	4618      	mov	r0, r3
 8002e32:	f001 fc81 	bl	8004738 <USB_InitFSLSPClkSel>
 8002e36:	e00a      	b.n	8002e4e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d106      	bne.n	8002e4e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e46:	461a      	mov	r2, r3
 8002e48:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e4c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f004 f94a 	bl	80070e8 <HAL_HCD_PortEnabled_Callback>
 8002e54:	e002      	b.n	8002e5c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f004 f954 	bl	8007104 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	d103      	bne.n	8002e6e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f043 0320 	orr.w	r3, r3, #32
 8002e6c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e74:	461a      	mov	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	6013      	str	r3, [r2, #0]
}
 8002e7a:	bf00      	nop
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e11f      	b.n	80030d6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fd fde6 	bl	8000a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2224      	movs	r2, #36	; 0x24
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ed6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ee8:	f000 fd3e 	bl	8003968 <HAL_RCC_GetPCLK1Freq>
 8002eec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	4a7b      	ldr	r2, [pc, #492]	; (80030e0 <HAL_I2C_Init+0x25c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d807      	bhi.n	8002f08 <HAL_I2C_Init+0x84>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a7a      	ldr	r2, [pc, #488]	; (80030e4 <HAL_I2C_Init+0x260>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	bf94      	ite	ls
 8002f00:	2301      	movls	r3, #1
 8002f02:	2300      	movhi	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	e006      	b.n	8002f16 <HAL_I2C_Init+0x92>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4a77      	ldr	r2, [pc, #476]	; (80030e8 <HAL_I2C_Init+0x264>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	bf94      	ite	ls
 8002f10:	2301      	movls	r3, #1
 8002f12:	2300      	movhi	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e0db      	b.n	80030d6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4a72      	ldr	r2, [pc, #456]	; (80030ec <HAL_I2C_Init+0x268>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	0c9b      	lsrs	r3, r3, #18
 8002f28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	4a64      	ldr	r2, [pc, #400]	; (80030e0 <HAL_I2C_Init+0x25c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d802      	bhi.n	8002f58 <HAL_I2C_Init+0xd4>
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	3301      	adds	r3, #1
 8002f56:	e009      	b.n	8002f6c <HAL_I2C_Init+0xe8>
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f5e:	fb02 f303 	mul.w	r3, r2, r3
 8002f62:	4a63      	ldr	r2, [pc, #396]	; (80030f0 <HAL_I2C_Init+0x26c>)
 8002f64:	fba2 2303 	umull	r2, r3, r2, r3
 8002f68:	099b      	lsrs	r3, r3, #6
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	430b      	orrs	r3, r1
 8002f72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4956      	ldr	r1, [pc, #344]	; (80030e0 <HAL_I2C_Init+0x25c>)
 8002f88:	428b      	cmp	r3, r1
 8002f8a:	d80d      	bhi.n	8002fa8 <HAL_I2C_Init+0x124>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1e59      	subs	r1, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	bf38      	it	cc
 8002fa4:	2304      	movcc	r3, #4
 8002fa6:	e04f      	b.n	8003048 <HAL_I2C_Init+0x1c4>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d111      	bne.n	8002fd4 <HAL_I2C_Init+0x150>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1e58      	subs	r0, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	440b      	add	r3, r1
 8002fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e012      	b.n	8002ffa <HAL_I2C_Init+0x176>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1e58      	subs	r0, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	0099      	lsls	r1, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Init+0x17e>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e022      	b.n	8003048 <HAL_I2C_Init+0x1c4>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10e      	bne.n	8003028 <HAL_I2C_Init+0x1a4>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1e58      	subs	r0, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6859      	ldr	r1, [r3, #4]
 8003012:	460b      	mov	r3, r1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	440b      	add	r3, r1
 8003018:	fbb0 f3f3 	udiv	r3, r0, r3
 800301c:	3301      	adds	r3, #1
 800301e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003026:	e00f      	b.n	8003048 <HAL_I2C_Init+0x1c4>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1e58      	subs	r0, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	0099      	lsls	r1, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	fbb0 f3f3 	udiv	r3, r0, r3
 800303e:	3301      	adds	r3, #1
 8003040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003044:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	6809      	ldr	r1, [r1, #0]
 800304c:	4313      	orrs	r3, r2
 800304e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69da      	ldr	r2, [r3, #28]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003076:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6911      	ldr	r1, [r2, #16]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68d2      	ldr	r2, [r2, #12]
 8003082:	4311      	orrs	r1, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	430b      	orrs	r3, r1
 800308a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	000186a0 	.word	0x000186a0
 80030e4:	001e847f 	.word	0x001e847f
 80030e8:	003d08ff 	.word	0x003d08ff
 80030ec:	431bde83 	.word	0x431bde83
 80030f0:	10624dd3 	.word	0x10624dd3

080030f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e25b      	b.n	80035be <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d075      	beq.n	80031fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003112:	4ba3      	ldr	r3, [pc, #652]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	2b04      	cmp	r3, #4
 800311c:	d00c      	beq.n	8003138 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800311e:	4ba0      	ldr	r3, [pc, #640]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003126:	2b08      	cmp	r3, #8
 8003128:	d112      	bne.n	8003150 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800312a:	4b9d      	ldr	r3, [pc, #628]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003136:	d10b      	bne.n	8003150 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003138:	4b99      	ldr	r3, [pc, #612]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d05b      	beq.n	80031fc <HAL_RCC_OscConfig+0x108>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d157      	bne.n	80031fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e236      	b.n	80035be <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003158:	d106      	bne.n	8003168 <HAL_RCC_OscConfig+0x74>
 800315a:	4b91      	ldr	r3, [pc, #580]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a90      	ldr	r2, [pc, #576]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e01d      	b.n	80031a4 <HAL_RCC_OscConfig+0xb0>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0x98>
 8003172:	4b8b      	ldr	r3, [pc, #556]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a8a      	ldr	r2, [pc, #552]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	4b88      	ldr	r3, [pc, #544]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a87      	ldr	r2, [pc, #540]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	e00b      	b.n	80031a4 <HAL_RCC_OscConfig+0xb0>
 800318c:	4b84      	ldr	r3, [pc, #528]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a83      	ldr	r2, [pc, #524]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	4b81      	ldr	r3, [pc, #516]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a80      	ldr	r2, [pc, #512]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 800319e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d013      	beq.n	80031d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fd fe6a 	bl	8000e84 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b4:	f7fd fe66 	bl	8000e84 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e1fb      	b.n	80035be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c6:	4b76      	ldr	r3, [pc, #472]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0xc0>
 80031d2:	e014      	b.n	80031fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7fd fe56 	bl	8000e84 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031dc:	f7fd fe52 	bl	8000e84 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	; 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e1e7      	b.n	80035be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ee:	4b6c      	ldr	r3, [pc, #432]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0xe8>
 80031fa:	e000      	b.n	80031fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d063      	beq.n	80032d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800320a:	4b65      	ldr	r3, [pc, #404]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00b      	beq.n	800322e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003216:	4b62      	ldr	r3, [pc, #392]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800321e:	2b08      	cmp	r3, #8
 8003220:	d11c      	bne.n	800325c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003222:	4b5f      	ldr	r3, [pc, #380]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d116      	bne.n	800325c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322e:	4b5c      	ldr	r3, [pc, #368]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d005      	beq.n	8003246 <HAL_RCC_OscConfig+0x152>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d001      	beq.n	8003246 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e1bb      	b.n	80035be <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003246:	4b56      	ldr	r3, [pc, #344]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4952      	ldr	r1, [pc, #328]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800325a:	e03a      	b.n	80032d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d020      	beq.n	80032a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003264:	4b4f      	ldr	r3, [pc, #316]	; (80033a4 <HAL_RCC_OscConfig+0x2b0>)
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326a:	f7fd fe0b 	bl	8000e84 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003272:	f7fd fe07 	bl	8000e84 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e19c      	b.n	80035be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003284:	4b46      	ldr	r3, [pc, #280]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003290:	4b43      	ldr	r3, [pc, #268]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4940      	ldr	r1, [pc, #256]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	600b      	str	r3, [r1, #0]
 80032a4:	e015      	b.n	80032d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032a6:	4b3f      	ldr	r3, [pc, #252]	; (80033a4 <HAL_RCC_OscConfig+0x2b0>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ac:	f7fd fdea 	bl	8000e84 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b4:	f7fd fde6 	bl	8000e84 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e17b      	b.n	80035be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c6:	4b36      	ldr	r3, [pc, #216]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d030      	beq.n	8003340 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d016      	beq.n	8003314 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e6:	4b30      	ldr	r3, [pc, #192]	; (80033a8 <HAL_RCC_OscConfig+0x2b4>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ec:	f7fd fdca 	bl	8000e84 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f4:	f7fd fdc6 	bl	8000e84 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e15b      	b.n	80035be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003306:	4b26      	ldr	r3, [pc, #152]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0x200>
 8003312:	e015      	b.n	8003340 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003314:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <HAL_RCC_OscConfig+0x2b4>)
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800331a:	f7fd fdb3 	bl	8000e84 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003322:	f7fd fdaf 	bl	8000e84 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e144      	b.n	80035be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003334:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1f0      	bne.n	8003322 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80a0 	beq.w	800348e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800334e:	2300      	movs	r3, #0
 8003350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003352:	4b13      	ldr	r3, [pc, #76]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10f      	bne.n	800337e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	4a0e      	ldr	r2, [pc, #56]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800336c:	6413      	str	r3, [r2, #64]	; 0x40
 800336e:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <HAL_RCC_OscConfig+0x2ac>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800337a:	2301      	movs	r3, #1
 800337c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337e:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <HAL_RCC_OscConfig+0x2b8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d121      	bne.n	80033ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338a:	4b08      	ldr	r3, [pc, #32]	; (80033ac <HAL_RCC_OscConfig+0x2b8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a07      	ldr	r2, [pc, #28]	; (80033ac <HAL_RCC_OscConfig+0x2b8>)
 8003390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003396:	f7fd fd75 	bl	8000e84 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339c:	e011      	b.n	80033c2 <HAL_RCC_OscConfig+0x2ce>
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
 80033a4:	42470000 	.word	0x42470000
 80033a8:	42470e80 	.word	0x42470e80
 80033ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b0:	f7fd fd68 	bl	8000e84 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e0fd      	b.n	80035be <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c2:	4b81      	ldr	r3, [pc, #516]	; (80035c8 <HAL_RCC_OscConfig+0x4d4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d106      	bne.n	80033e4 <HAL_RCC_OscConfig+0x2f0>
 80033d6:	4b7d      	ldr	r3, [pc, #500]	; (80035cc <HAL_RCC_OscConfig+0x4d8>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	4a7c      	ldr	r2, [pc, #496]	; (80035cc <HAL_RCC_OscConfig+0x4d8>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6713      	str	r3, [r2, #112]	; 0x70
 80033e2:	e01c      	b.n	800341e <HAL_RCC_OscConfig+0x32a>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b05      	cmp	r3, #5
 80033ea:	d10c      	bne.n	8003406 <HAL_RCC_OscConfig+0x312>
 80033ec:	4b77      	ldr	r3, [pc, #476]	; (80035cc <HAL_RCC_OscConfig+0x4d8>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	4a76      	ldr	r2, [pc, #472]	; (80035cc <HAL_RCC_OscConfig+0x4d8>)
 80033f2:	f043 0304 	orr.w	r3, r3, #4
 80033f6:	6713      	str	r3, [r2, #112]	; 0x70
 80033f8:	4b74      	ldr	r3, [pc, #464]	; (80035cc <HAL_RCC_OscConfig+0x4d8>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fc:	4a73      	ldr	r2, [pc, #460]	; (80035cc <HAL_RCC_OscConfig+0x4d8>)
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	6713      	str	r3, [r2, #112]	; 0x70
 8003404:	e00b      	b.n	800341e <HAL_RCC_OscConfig+0x32a>
 8003406:	4b71      	ldr	r3, [pc, #452]	; (80035cc <HAL_RCC_OscConfig+0x4d8>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	4a70      	ldr	r2, [pc, #448]	; (80035cc <HAL_RCC_OscConfig+0x4d8>)
 800340c:	f023 0301 	bic.w	r3, r3, #1
 8003410:	6713      	str	r3, [r2, #112]	; 0x70
 8003412:	4b6e      	ldr	r3, [pc, #440]	; (80035cc <HAL_RCC_OscConfig+0x4d8>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003416:	4a6d      	ldr	r2, [pc, #436]	; (80035cc <HAL_RCC_OscConfig+0x4d8>)
 8003418:	f023 0304 	bic.w	r3, r3, #4
 800341c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d015      	beq.n	8003452 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003426:	f7fd fd2d 	bl	8000e84 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342c:	e00a      	b.n	8003444 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800342e:	f7fd fd29 	bl	8000e84 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f241 3288 	movw	r2, #5000	; 0x1388
 800343c:	4293      	cmp	r3, r2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e0bc      	b.n	80035be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003444:	4b61      	ldr	r3, [pc, #388]	; (80035cc <HAL_RCC_OscConfig+0x4d8>)
 8003446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ee      	beq.n	800342e <HAL_RCC_OscConfig+0x33a>
 8003450:	e014      	b.n	800347c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003452:	f7fd fd17 	bl	8000e84 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003458:	e00a      	b.n	8003470 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800345a:	f7fd fd13 	bl	8000e84 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	f241 3288 	movw	r2, #5000	; 0x1388
 8003468:	4293      	cmp	r3, r2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e0a6      	b.n	80035be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003470:	4b56      	ldr	r3, [pc, #344]	; (80035cc <HAL_RCC_OscConfig+0x4d8>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1ee      	bne.n	800345a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800347c:	7dfb      	ldrb	r3, [r7, #23]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d105      	bne.n	800348e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003482:	4b52      	ldr	r3, [pc, #328]	; (80035cc <HAL_RCC_OscConfig+0x4d8>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	4a51      	ldr	r2, [pc, #324]	; (80035cc <HAL_RCC_OscConfig+0x4d8>)
 8003488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800348c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8092 	beq.w	80035bc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003498:	4b4c      	ldr	r3, [pc, #304]	; (80035cc <HAL_RCC_OscConfig+0x4d8>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 030c 	and.w	r3, r3, #12
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d05c      	beq.n	800355e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d141      	bne.n	8003530 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ac:	4b48      	ldr	r3, [pc, #288]	; (80035d0 <HAL_RCC_OscConfig+0x4dc>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b2:	f7fd fce7 	bl	8000e84 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ba:	f7fd fce3 	bl	8000e84 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e078      	b.n	80035be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034cc:	4b3f      	ldr	r3, [pc, #252]	; (80035cc <HAL_RCC_OscConfig+0x4d8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1f0      	bne.n	80034ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69da      	ldr	r2, [r3, #28]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	019b      	lsls	r3, r3, #6
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	085b      	lsrs	r3, r3, #1
 80034f0:	3b01      	subs	r3, #1
 80034f2:	041b      	lsls	r3, r3, #16
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fa:	061b      	lsls	r3, r3, #24
 80034fc:	4933      	ldr	r1, [pc, #204]	; (80035cc <HAL_RCC_OscConfig+0x4d8>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003502:	4b33      	ldr	r3, [pc, #204]	; (80035d0 <HAL_RCC_OscConfig+0x4dc>)
 8003504:	2201      	movs	r2, #1
 8003506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7fd fcbc 	bl	8000e84 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003510:	f7fd fcb8 	bl	8000e84 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e04d      	b.n	80035be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003522:	4b2a      	ldr	r3, [pc, #168]	; (80035cc <HAL_RCC_OscConfig+0x4d8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f0      	beq.n	8003510 <HAL_RCC_OscConfig+0x41c>
 800352e:	e045      	b.n	80035bc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003530:	4b27      	ldr	r3, [pc, #156]	; (80035d0 <HAL_RCC_OscConfig+0x4dc>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003536:	f7fd fca5 	bl	8000e84 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800353e:	f7fd fca1 	bl	8000e84 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e036      	b.n	80035be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003550:	4b1e      	ldr	r3, [pc, #120]	; (80035cc <HAL_RCC_OscConfig+0x4d8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f0      	bne.n	800353e <HAL_RCC_OscConfig+0x44a>
 800355c:	e02e      	b.n	80035bc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d101      	bne.n	800356a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e029      	b.n	80035be <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800356a:	4b18      	ldr	r3, [pc, #96]	; (80035cc <HAL_RCC_OscConfig+0x4d8>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	429a      	cmp	r2, r3
 800357c:	d11c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003588:	429a      	cmp	r2, r3
 800358a:	d115      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003592:	4013      	ands	r3, r2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003598:	4293      	cmp	r3, r2
 800359a:	d10d      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d106      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40007000 	.word	0x40007000
 80035cc:	40023800 	.word	0x40023800
 80035d0:	42470060 	.word	0x42470060

080035d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0cc      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035e8:	4b68      	ldr	r3, [pc, #416]	; (800378c <HAL_RCC_ClockConfig+0x1b8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d90c      	bls.n	8003610 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f6:	4b65      	ldr	r3, [pc, #404]	; (800378c <HAL_RCC_ClockConfig+0x1b8>)
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fe:	4b63      	ldr	r3, [pc, #396]	; (800378c <HAL_RCC_ClockConfig+0x1b8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d001      	beq.n	8003610 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0b8      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d020      	beq.n	800365e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003628:	4b59      	ldr	r3, [pc, #356]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4a58      	ldr	r2, [pc, #352]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003632:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003640:	4b53      	ldr	r3, [pc, #332]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	4a52      	ldr	r2, [pc, #328]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800364a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800364c:	4b50      	ldr	r3, [pc, #320]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	494d      	ldr	r1, [pc, #308]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d044      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d107      	bne.n	8003682 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003672:	4b47      	ldr	r3, [pc, #284]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d119      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e07f      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d003      	beq.n	8003692 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800368e:	2b03      	cmp	r3, #3
 8003690:	d107      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003692:	4b3f      	ldr	r3, [pc, #252]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d109      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e06f      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a2:	4b3b      	ldr	r3, [pc, #236]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e067      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036b2:	4b37      	ldr	r3, [pc, #220]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f023 0203 	bic.w	r2, r3, #3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4934      	ldr	r1, [pc, #208]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036c4:	f7fd fbde 	bl	8000e84 <HAL_GetTick>
 80036c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ca:	e00a      	b.n	80036e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036cc:	f7fd fbda 	bl	8000e84 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036da:	4293      	cmp	r3, r2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e04f      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e2:	4b2b      	ldr	r3, [pc, #172]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 020c 	and.w	r2, r3, #12
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d1eb      	bne.n	80036cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036f4:	4b25      	ldr	r3, [pc, #148]	; (800378c <HAL_RCC_ClockConfig+0x1b8>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d20c      	bcs.n	800371c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003702:	4b22      	ldr	r3, [pc, #136]	; (800378c <HAL_RCC_ClockConfig+0x1b8>)
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800370a:	4b20      	ldr	r3, [pc, #128]	; (800378c <HAL_RCC_ClockConfig+0x1b8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d001      	beq.n	800371c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e032      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003728:	4b19      	ldr	r3, [pc, #100]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4916      	ldr	r1, [pc, #88]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d009      	beq.n	800375a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003746:	4b12      	ldr	r3, [pc, #72]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	490e      	ldr	r1, [pc, #56]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800375a:	f000 f821 	bl	80037a0 <HAL_RCC_GetSysClockFreq>
 800375e:	4601      	mov	r1, r0
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	091b      	lsrs	r3, r3, #4
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	4a0a      	ldr	r2, [pc, #40]	; (8003794 <HAL_RCC_ClockConfig+0x1c0>)
 800376c:	5cd3      	ldrb	r3, [r2, r3]
 800376e:	fa21 f303 	lsr.w	r3, r1, r3
 8003772:	4a09      	ldr	r2, [pc, #36]	; (8003798 <HAL_RCC_ClockConfig+0x1c4>)
 8003774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003776:	4b09      	ldr	r3, [pc, #36]	; (800379c <HAL_RCC_ClockConfig+0x1c8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fd fb3e 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40023c00 	.word	0x40023c00
 8003790:	40023800 	.word	0x40023800
 8003794:	0800771c 	.word	0x0800771c
 8003798:	20000000 	.word	0x20000000
 800379c:	20000004 	.word	0x20000004

080037a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	607b      	str	r3, [r7, #4]
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	2300      	movs	r3, #0
 80037b0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037b6:	4b63      	ldr	r3, [pc, #396]	; (8003944 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d007      	beq.n	80037d2 <HAL_RCC_GetSysClockFreq+0x32>
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d008      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0x38>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f040 80b4 	bne.w	8003934 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037cc:	4b5e      	ldr	r3, [pc, #376]	; (8003948 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80037ce:	60bb      	str	r3, [r7, #8]
       break;
 80037d0:	e0b3      	b.n	800393a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037d2:	4b5e      	ldr	r3, [pc, #376]	; (800394c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80037d4:	60bb      	str	r3, [r7, #8]
      break;
 80037d6:	e0b0      	b.n	800393a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037d8:	4b5a      	ldr	r3, [pc, #360]	; (8003944 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037e2:	4b58      	ldr	r3, [pc, #352]	; (8003944 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d04a      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ee:	4b55      	ldr	r3, [pc, #340]	; (8003944 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	099b      	lsrs	r3, r3, #6
 80037f4:	f04f 0400 	mov.w	r4, #0
 80037f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	ea03 0501 	and.w	r5, r3, r1
 8003804:	ea04 0602 	and.w	r6, r4, r2
 8003808:	4629      	mov	r1, r5
 800380a:	4632      	mov	r2, r6
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	f04f 0400 	mov.w	r4, #0
 8003814:	0154      	lsls	r4, r2, #5
 8003816:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800381a:	014b      	lsls	r3, r1, #5
 800381c:	4619      	mov	r1, r3
 800381e:	4622      	mov	r2, r4
 8003820:	1b49      	subs	r1, r1, r5
 8003822:	eb62 0206 	sbc.w	r2, r2, r6
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	f04f 0400 	mov.w	r4, #0
 800382e:	0194      	lsls	r4, r2, #6
 8003830:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003834:	018b      	lsls	r3, r1, #6
 8003836:	1a5b      	subs	r3, r3, r1
 8003838:	eb64 0402 	sbc.w	r4, r4, r2
 800383c:	f04f 0100 	mov.w	r1, #0
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	00e2      	lsls	r2, r4, #3
 8003846:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800384a:	00d9      	lsls	r1, r3, #3
 800384c:	460b      	mov	r3, r1
 800384e:	4614      	mov	r4, r2
 8003850:	195b      	adds	r3, r3, r5
 8003852:	eb44 0406 	adc.w	r4, r4, r6
 8003856:	f04f 0100 	mov.w	r1, #0
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	0262      	lsls	r2, r4, #9
 8003860:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003864:	0259      	lsls	r1, r3, #9
 8003866:	460b      	mov	r3, r1
 8003868:	4614      	mov	r4, r2
 800386a:	4618      	mov	r0, r3
 800386c:	4621      	mov	r1, r4
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f04f 0400 	mov.w	r4, #0
 8003874:	461a      	mov	r2, r3
 8003876:	4623      	mov	r3, r4
 8003878:	f7fc fca6 	bl	80001c8 <__aeabi_uldivmod>
 800387c:	4603      	mov	r3, r0
 800387e:	460c      	mov	r4, r1
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	e049      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003884:	4b2f      	ldr	r3, [pc, #188]	; (8003944 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	099b      	lsrs	r3, r3, #6
 800388a:	f04f 0400 	mov.w	r4, #0
 800388e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	ea03 0501 	and.w	r5, r3, r1
 800389a:	ea04 0602 	and.w	r6, r4, r2
 800389e:	4629      	mov	r1, r5
 80038a0:	4632      	mov	r2, r6
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	f04f 0400 	mov.w	r4, #0
 80038aa:	0154      	lsls	r4, r2, #5
 80038ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038b0:	014b      	lsls	r3, r1, #5
 80038b2:	4619      	mov	r1, r3
 80038b4:	4622      	mov	r2, r4
 80038b6:	1b49      	subs	r1, r1, r5
 80038b8:	eb62 0206 	sbc.w	r2, r2, r6
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	f04f 0400 	mov.w	r4, #0
 80038c4:	0194      	lsls	r4, r2, #6
 80038c6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038ca:	018b      	lsls	r3, r1, #6
 80038cc:	1a5b      	subs	r3, r3, r1
 80038ce:	eb64 0402 	sbc.w	r4, r4, r2
 80038d2:	f04f 0100 	mov.w	r1, #0
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	00e2      	lsls	r2, r4, #3
 80038dc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038e0:	00d9      	lsls	r1, r3, #3
 80038e2:	460b      	mov	r3, r1
 80038e4:	4614      	mov	r4, r2
 80038e6:	195b      	adds	r3, r3, r5
 80038e8:	eb44 0406 	adc.w	r4, r4, r6
 80038ec:	f04f 0100 	mov.w	r1, #0
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	02a2      	lsls	r2, r4, #10
 80038f6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80038fa:	0299      	lsls	r1, r3, #10
 80038fc:	460b      	mov	r3, r1
 80038fe:	4614      	mov	r4, r2
 8003900:	4618      	mov	r0, r3
 8003902:	4621      	mov	r1, r4
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f04f 0400 	mov.w	r4, #0
 800390a:	461a      	mov	r2, r3
 800390c:	4623      	mov	r3, r4
 800390e:	f7fc fc5b 	bl	80001c8 <__aeabi_uldivmod>
 8003912:	4603      	mov	r3, r0
 8003914:	460c      	mov	r4, r1
 8003916:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003918:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	0c1b      	lsrs	r3, r3, #16
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	3301      	adds	r3, #1
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003930:	60bb      	str	r3, [r7, #8]
      break;
 8003932:	e002      	b.n	800393a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003934:	4b04      	ldr	r3, [pc, #16]	; (8003948 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003936:	60bb      	str	r3, [r7, #8]
      break;
 8003938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800393a:	68bb      	ldr	r3, [r7, #8]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003944:	40023800 	.word	0x40023800
 8003948:	00f42400 	.word	0x00f42400
 800394c:	007a1200 	.word	0x007a1200

08003950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003954:	4b03      	ldr	r3, [pc, #12]	; (8003964 <HAL_RCC_GetHCLKFreq+0x14>)
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000000 	.word	0x20000000

08003968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800396c:	f7ff fff0 	bl	8003950 <HAL_RCC_GetHCLKFreq>
 8003970:	4601      	mov	r1, r0
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	0a9b      	lsrs	r3, r3, #10
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4a03      	ldr	r2, [pc, #12]	; (800398c <HAL_RCC_GetPCLK1Freq+0x24>)
 800397e:	5cd3      	ldrb	r3, [r2, r3]
 8003980:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40023800 	.word	0x40023800
 800398c:	0800772c 	.word	0x0800772c

08003990 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e056      	b.n	8003a50 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7fd f8a5 	bl	8000b0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2202      	movs	r2, #2
 80039c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	ea42 0103 	orr.w	r1, r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	0c1b      	lsrs	r3, r3, #16
 8003a20:	f003 0104 	and.w	r1, r3, #4
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	69da      	ldr	r2, [r3, #28]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e01d      	b.n	8003aa6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fd f88c 	bl	8000b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3304      	adds	r3, #4
 8003a94:	4619      	mov	r1, r3
 8003a96:	4610      	mov	r0, r2
 8003a98:	f000 fa1e 	bl	8003ed8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b085      	sub	sp, #20
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0201 	orr.w	r2, r2, #1
 8003ac4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b06      	cmp	r3, #6
 8003ad6:	d007      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d122      	bne.n	8003b52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d11b      	bne.n	8003b52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f06f 0202 	mvn.w	r2, #2
 8003b22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f9af 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
 8003b3e:	e005      	b.n	8003b4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f9a1 	bl	8003e88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f9b2 	bl	8003eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d122      	bne.n	8003ba6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d11b      	bne.n	8003ba6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f06f 0204 	mvn.w	r2, #4
 8003b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f985 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
 8003b92:	e005      	b.n	8003ba0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f977 	bl	8003e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f988 	bl	8003eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d122      	bne.n	8003bfa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d11b      	bne.n	8003bfa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f06f 0208 	mvn.w	r2, #8
 8003bca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2204      	movs	r2, #4
 8003bd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	f003 0303 	and.w	r3, r3, #3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f95b 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
 8003be6:	e005      	b.n	8003bf4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f94d 	bl	8003e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f95e 	bl	8003eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d122      	bne.n	8003c4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b10      	cmp	r3, #16
 8003c14:	d11b      	bne.n	8003c4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f06f 0210 	mvn.w	r2, #16
 8003c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2208      	movs	r2, #8
 8003c24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f931 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
 8003c3a:	e005      	b.n	8003c48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f923 	bl	8003e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f934 	bl	8003eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d10e      	bne.n	8003c7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d107      	bne.n	8003c7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f06f 0201 	mvn.w	r2, #1
 8003c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f8fd 	bl	8003e74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c84:	2b80      	cmp	r3, #128	; 0x80
 8003c86:	d10e      	bne.n	8003ca6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c92:	2b80      	cmp	r3, #128	; 0x80
 8003c94:	d107      	bne.n	8003ca6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fad9 	bl	8004258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b40      	cmp	r3, #64	; 0x40
 8003cb2:	d10e      	bne.n	8003cd2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	2b40      	cmp	r3, #64	; 0x40
 8003cc0:	d107      	bne.n	8003cd2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f8f9 	bl	8003ec4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d10e      	bne.n	8003cfe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	d107      	bne.n	8003cfe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f06f 0220 	mvn.w	r2, #32
 8003cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 faa3 	bl	8004244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_TIM_ConfigClockSource+0x18>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e0a6      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x166>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d3c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d44:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b40      	cmp	r3, #64	; 0x40
 8003d54:	d067      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x120>
 8003d56:	2b40      	cmp	r3, #64	; 0x40
 8003d58:	d80b      	bhi.n	8003d72 <HAL_TIM_ConfigClockSource+0x6c>
 8003d5a:	2b10      	cmp	r3, #16
 8003d5c:	d073      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x140>
 8003d5e:	2b10      	cmp	r3, #16
 8003d60:	d802      	bhi.n	8003d68 <HAL_TIM_ConfigClockSource+0x62>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d06f      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d66:	e078      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d06c      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x140>
 8003d6c:	2b30      	cmp	r3, #48	; 0x30
 8003d6e:	d06a      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d70:	e073      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d72:	2b70      	cmp	r3, #112	; 0x70
 8003d74:	d00d      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x8c>
 8003d76:	2b70      	cmp	r3, #112	; 0x70
 8003d78:	d804      	bhi.n	8003d84 <HAL_TIM_ConfigClockSource+0x7e>
 8003d7a:	2b50      	cmp	r3, #80	; 0x50
 8003d7c:	d033      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0xe0>
 8003d7e:	2b60      	cmp	r3, #96	; 0x60
 8003d80:	d041      	beq.n	8003e06 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d82:	e06a      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d88:	d066      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x152>
 8003d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d8e:	d017      	beq.n	8003dc0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d90:	e063      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	6899      	ldr	r1, [r3, #8]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f000 f9b3 	bl	800410c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003db4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	609a      	str	r2, [r3, #8]
      break;
 8003dbe:	e04c      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6818      	ldr	r0, [r3, #0]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	6899      	ldr	r1, [r3, #8]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f000 f99c 	bl	800410c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003de2:	609a      	str	r2, [r3, #8]
      break;
 8003de4:	e039      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6859      	ldr	r1, [r3, #4]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	461a      	mov	r2, r3
 8003df4:	f000 f910 	bl	8004018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2150      	movs	r1, #80	; 0x50
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 f969 	bl	80040d6 <TIM_ITRx_SetConfig>
      break;
 8003e04:	e029      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6859      	ldr	r1, [r3, #4]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	461a      	mov	r2, r3
 8003e14:	f000 f92f 	bl	8004076 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2160      	movs	r1, #96	; 0x60
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f959 	bl	80040d6 <TIM_ITRx_SetConfig>
      break;
 8003e24:	e019      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	6859      	ldr	r1, [r3, #4]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f000 f8f0 	bl	8004018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2140      	movs	r1, #64	; 0x40
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 f949 	bl	80040d6 <TIM_ITRx_SetConfig>
      break;
 8003e44:	e009      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4610      	mov	r0, r2
 8003e52:	f000 f940 	bl	80040d6 <TIM_ITRx_SetConfig>
      break;
 8003e56:	e000      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a40      	ldr	r2, [pc, #256]	; (8003fec <TIM_Base_SetConfig+0x114>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d013      	beq.n	8003f18 <TIM_Base_SetConfig+0x40>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef6:	d00f      	beq.n	8003f18 <TIM_Base_SetConfig+0x40>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a3d      	ldr	r2, [pc, #244]	; (8003ff0 <TIM_Base_SetConfig+0x118>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00b      	beq.n	8003f18 <TIM_Base_SetConfig+0x40>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a3c      	ldr	r2, [pc, #240]	; (8003ff4 <TIM_Base_SetConfig+0x11c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d007      	beq.n	8003f18 <TIM_Base_SetConfig+0x40>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a3b      	ldr	r2, [pc, #236]	; (8003ff8 <TIM_Base_SetConfig+0x120>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d003      	beq.n	8003f18 <TIM_Base_SetConfig+0x40>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a3a      	ldr	r2, [pc, #232]	; (8003ffc <TIM_Base_SetConfig+0x124>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d108      	bne.n	8003f2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a2f      	ldr	r2, [pc, #188]	; (8003fec <TIM_Base_SetConfig+0x114>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d02b      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f38:	d027      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a2c      	ldr	r2, [pc, #176]	; (8003ff0 <TIM_Base_SetConfig+0x118>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d023      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a2b      	ldr	r2, [pc, #172]	; (8003ff4 <TIM_Base_SetConfig+0x11c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d01f      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a2a      	ldr	r2, [pc, #168]	; (8003ff8 <TIM_Base_SetConfig+0x120>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d01b      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a29      	ldr	r2, [pc, #164]	; (8003ffc <TIM_Base_SetConfig+0x124>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d017      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a28      	ldr	r2, [pc, #160]	; (8004000 <TIM_Base_SetConfig+0x128>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d013      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a27      	ldr	r2, [pc, #156]	; (8004004 <TIM_Base_SetConfig+0x12c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00f      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a26      	ldr	r2, [pc, #152]	; (8004008 <TIM_Base_SetConfig+0x130>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00b      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a25      	ldr	r2, [pc, #148]	; (800400c <TIM_Base_SetConfig+0x134>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d007      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a24      	ldr	r2, [pc, #144]	; (8004010 <TIM_Base_SetConfig+0x138>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d003      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a23      	ldr	r2, [pc, #140]	; (8004014 <TIM_Base_SetConfig+0x13c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d108      	bne.n	8003f9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	; (8003fec <TIM_Base_SetConfig+0x114>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <TIM_Base_SetConfig+0xf8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a0c      	ldr	r2, [pc, #48]	; (8003ffc <TIM_Base_SetConfig+0x124>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d103      	bne.n	8003fd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	615a      	str	r2, [r3, #20]
}
 8003fde:	bf00      	nop
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40010000 	.word	0x40010000
 8003ff0:	40000400 	.word	0x40000400
 8003ff4:	40000800 	.word	0x40000800
 8003ff8:	40000c00 	.word	0x40000c00
 8003ffc:	40010400 	.word	0x40010400
 8004000:	40014000 	.word	0x40014000
 8004004:	40014400 	.word	0x40014400
 8004008:	40014800 	.word	0x40014800
 800400c:	40001800 	.word	0x40001800
 8004010:	40001c00 	.word	0x40001c00
 8004014:	40002000 	.word	0x40002000

08004018 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f023 0201 	bic.w	r2, r3, #1
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f023 030a 	bic.w	r3, r3, #10
 8004054:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	621a      	str	r2, [r3, #32]
}
 800406a:	bf00      	nop
 800406c:	371c      	adds	r7, #28
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004076:	b480      	push	{r7}
 8004078:	b087      	sub	sp, #28
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	f023 0210 	bic.w	r2, r3, #16
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	031b      	lsls	r3, r3, #12
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	621a      	str	r2, [r3, #32]
}
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f043 0307 	orr.w	r3, r3, #7
 80040f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	609a      	str	r2, [r3, #8]
}
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004126:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	021a      	lsls	r2, r3, #8
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	431a      	orrs	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4313      	orrs	r3, r2
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	609a      	str	r2, [r3, #8]
}
 8004140:	bf00      	nop
 8004142:	371c      	adds	r7, #28
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004160:	2302      	movs	r3, #2
 8004162:	e05a      	b.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a21      	ldr	r2, [pc, #132]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d022      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b0:	d01d      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1d      	ldr	r2, [pc, #116]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d018      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a1b      	ldr	r2, [pc, #108]	; (8004230 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d013      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1a      	ldr	r2, [pc, #104]	; (8004234 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00e      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a18      	ldr	r2, [pc, #96]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d009      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a17      	ldr	r2, [pc, #92]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d004      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a15      	ldr	r2, [pc, #84]	; (8004240 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10c      	bne.n	8004208 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40010000 	.word	0x40010000
 800422c:	40000400 	.word	0x40000400
 8004230:	40000800 	.word	0x40000800
 8004234:	40000c00 	.word	0x40000c00
 8004238:	40010400 	.word	0x40010400
 800423c:	40014000 	.word	0x40014000
 8004240:	40001800 	.word	0x40001800

08004244 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800426c:	b084      	sub	sp, #16
 800426e:	b580      	push	{r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	f107 001c 	add.w	r0, r7, #28
 800427a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	2b01      	cmp	r3, #1
 8004282:	d122      	bne.n	80042ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d105      	bne.n	80042be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f94a 	bl	8004558 <USB_CoreReset>
 80042c4:	4603      	mov	r3, r0
 80042c6:	73fb      	strb	r3, [r7, #15]
 80042c8:	e01a      	b.n	8004300 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f93e 	bl	8004558 <USB_CoreReset>
 80042dc:	4603      	mov	r3, r0
 80042de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	639a      	str	r2, [r3, #56]	; 0x38
 80042f2:	e005      	b.n	8004300 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	2b01      	cmp	r3, #1
 8004304:	d10b      	bne.n	800431e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f043 0206 	orr.w	r2, r3, #6
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f043 0220 	orr.w	r2, r3, #32
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800431e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800432a:	b004      	add	sp, #16
 800432c:	4770      	bx	lr

0800432e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f043 0201 	orr.w	r2, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f023 0201 	bic.w	r2, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	460b      	mov	r3, r1
 800437c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d106      	bne.n	800439e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	60da      	str	r2, [r3, #12]
 800439c:	e00b      	b.n	80043b6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d106      	bne.n	80043b2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	60da      	str	r2, [r3, #12]
 80043b0:	e001      	b.n	80043b6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e003      	b.n	80043be <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80043b6:	2032      	movs	r0, #50	; 0x32
 80043b8:	f7fc fd70 	bl	8000e9c <HAL_Delay>

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	019b      	lsls	r3, r3, #6
 80043da:	f043 0220 	orr.w	r2, r3, #32
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3301      	adds	r3, #1
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4a09      	ldr	r2, [pc, #36]	; (8004410 <USB_FlushTxFifo+0x48>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d901      	bls.n	80043f4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e006      	b.n	8004402 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b20      	cmp	r3, #32
 80043fe:	d0f0      	beq.n	80043e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	00030d40 	.word	0x00030d40

08004414 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800441c:	2300      	movs	r3, #0
 800441e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2210      	movs	r2, #16
 8004424:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3301      	adds	r3, #1
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4a09      	ldr	r2, [pc, #36]	; (8004454 <USB_FlushRxFifo+0x40>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d901      	bls.n	8004438 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e006      	b.n	8004446 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f003 0310 	and.w	r3, r3, #16
 8004440:	2b10      	cmp	r3, #16
 8004442:	d0f0      	beq.n	8004426 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	00030d40 	.word	0x00030d40

08004458 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004458:	b480      	push	{r7}
 800445a:	b089      	sub	sp, #36	; 0x24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	4611      	mov	r1, r2
 8004464:	461a      	mov	r2, r3
 8004466:	460b      	mov	r3, r1
 8004468:	71fb      	strb	r3, [r7, #7]
 800446a:	4613      	mov	r3, r2
 800446c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004476:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800447a:	2b00      	cmp	r3, #0
 800447c:	d11a      	bne.n	80044b4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800447e:	88bb      	ldrh	r3, [r7, #4]
 8004480:	3303      	adds	r3, #3
 8004482:	089b      	lsrs	r3, r3, #2
 8004484:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004486:	2300      	movs	r3, #0
 8004488:	61bb      	str	r3, [r7, #24]
 800448a:	e00f      	b.n	80044ac <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	031a      	lsls	r2, r3, #12
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	4413      	add	r3, r2
 8004494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004498:	461a      	mov	r2, r3
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	3304      	adds	r3, #4
 80044a4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	3301      	adds	r3, #1
 80044aa:	61bb      	str	r3, [r7, #24]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d3eb      	bcc.n	800448c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3724      	adds	r7, #36	; 0x24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b089      	sub	sp, #36	; 0x24
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	4613      	mov	r3, r2
 80044ce:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80044d8:	88fb      	ldrh	r3, [r7, #6]
 80044da:	3303      	adds	r3, #3
 80044dc:	089b      	lsrs	r3, r3, #2
 80044de:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80044e0:	2300      	movs	r3, #0
 80044e2:	61bb      	str	r3, [r7, #24]
 80044e4:	e00b      	b.n	80044fe <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	601a      	str	r2, [r3, #0]
    pDest++;
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	3304      	adds	r3, #4
 80044f6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	3301      	adds	r3, #1
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	429a      	cmp	r2, r3
 8004504:	d3ef      	bcc.n	80044e6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004506:	69fb      	ldr	r3, [r7, #28]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3724      	adds	r7, #36	; 0x24
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4013      	ands	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800452c:	68fb      	ldr	r3, [r7, #12]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f003 0301 	and.w	r3, r3, #1
}
 800454a:	4618      	mov	r0, r3
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3301      	adds	r3, #1
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4a13      	ldr	r2, [pc, #76]	; (80045bc <USB_CoreReset+0x64>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d901      	bls.n	8004576 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e01b      	b.n	80045ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	daf2      	bge.n	8004564 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f043 0201 	orr.w	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3301      	adds	r3, #1
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4a09      	ldr	r2, [pc, #36]	; (80045bc <USB_CoreReset+0x64>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d901      	bls.n	80045a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e006      	b.n	80045ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d0f0      	beq.n	800458e <USB_CoreReset+0x36>

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	00030d40 	.word	0x00030d40

080045c0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045c0:	b084      	sub	sp, #16
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	f107 001c 	add.w	r0, r7, #28
 80045ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045dc:	461a      	mov	r2, r3
 80045de:	2300      	movs	r3, #0
 80045e0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460e:	2b00      	cmp	r3, #0
 8004610:	d018      	beq.n	8004644 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	2b01      	cmp	r3, #1
 8004616:	d10a      	bne.n	800462e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004626:	f043 0304 	orr.w	r3, r3, #4
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	e014      	b.n	8004658 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800463c:	f023 0304 	bic.w	r3, r3, #4
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	e009      	b.n	8004658 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004652:	f023 0304 	bic.w	r3, r3, #4
 8004656:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004658:	2110      	movs	r1, #16
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff feb4 	bl	80043c8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff fed7 	bl	8004414 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	e015      	b.n	8004698 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	4413      	add	r3, r2
 8004674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004678:	461a      	mov	r2, r3
 800467a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800467e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4413      	add	r3, r2
 8004688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800468c:	461a      	mov	r2, r3
 800468e:	2300      	movs	r3, #0
 8004690:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3301      	adds	r3, #1
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	429a      	cmp	r2, r3
 800469e:	d3e5      	bcc.n	800466c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80046a0:	2101      	movs	r1, #1
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f8ac 	bl	8004800 <USB_DriveVbus>

  HAL_Delay(200U);
 80046a8:	20c8      	movs	r0, #200	; 0xc8
 80046aa:	f7fc fbf7 	bl	8000e9c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046ba:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00b      	beq.n	80046e0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ce:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a14      	ldr	r2, [pc, #80]	; (8004724 <USB_HostInit+0x164>)
 80046d4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a13      	ldr	r2, [pc, #76]	; (8004728 <USB_HostInit+0x168>)
 80046da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80046de:	e009      	b.n	80046f4 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2280      	movs	r2, #128	; 0x80
 80046e4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a10      	ldr	r2, [pc, #64]	; (800472c <USB_HostInit+0x16c>)
 80046ea:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a10      	ldr	r2, [pc, #64]	; (8004730 <USB_HostInit+0x170>)
 80046f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d105      	bne.n	8004706 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	f043 0210 	orr.w	r2, r3, #16
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <USB_HostInit+0x174>)
 800470c:	4313      	orrs	r3, r2
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800471e:	b004      	add	sp, #16
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	01000200 	.word	0x01000200
 8004728:	00e00300 	.word	0x00e00300
 800472c:	00600080 	.word	0x00600080
 8004730:	004000e0 	.word	0x004000e0
 8004734:	a3200008 	.word	0xa3200008

08004738 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004756:	f023 0303 	bic.w	r3, r3, #3
 800475a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	78fb      	ldrb	r3, [r7, #3]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	68f9      	ldr	r1, [r7, #12]
 800476c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004770:	4313      	orrs	r3, r2
 8004772:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004774:	78fb      	ldrb	r3, [r7, #3]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d107      	bne.n	800478a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004780:	461a      	mov	r2, r3
 8004782:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004786:	6053      	str	r3, [r2, #4]
 8004788:	e009      	b.n	800479e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800478a:	78fb      	ldrb	r3, [r7, #3]
 800478c:	2b02      	cmp	r3, #2
 800478e:	d106      	bne.n	800479e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004796:	461a      	mov	r2, r3
 8004798:	f241 7370 	movw	r3, #6000	; 0x1770
 800479c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80047cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80047d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047da:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80047dc:	2064      	movs	r0, #100	; 0x64
 80047de:	f7fc fb5d 	bl	8000e9c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80047ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ee:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80047f0:	200a      	movs	r0, #10
 80047f2:	f7fc fb53 	bl	8000e9c <HAL_Delay>

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004824:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d109      	bne.n	8004844 <USB_DriveVbus+0x44>
 8004830:	78fb      	ldrb	r3, [r7, #3]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d106      	bne.n	8004844 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800483e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004842:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800484a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484e:	d109      	bne.n	8004864 <USB_DriveVbus+0x64>
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800485e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004862:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004872:	b480      	push	{r7}
 8004874:	b085      	sub	sp, #20
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	0c5b      	lsrs	r3, r3, #17
 8004890:	f003 0303 	and.w	r3, r3, #3
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	b29b      	uxth	r3, r3
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	4608      	mov	r0, r1
 80048ce:	4611      	mov	r1, r2
 80048d0:	461a      	mov	r2, r3
 80048d2:	4603      	mov	r3, r0
 80048d4:	70fb      	strb	r3, [r7, #3]
 80048d6:	460b      	mov	r3, r1
 80048d8:	70bb      	strb	r3, [r7, #2]
 80048da:	4613      	mov	r3, r2
 80048dc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f2:	461a      	mov	r2, r3
 80048f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048f8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80048fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d87e      	bhi.n	8004a00 <USB_HC_Init+0x13c>
 8004902:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <USB_HC_Init+0x44>)
 8004904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004908:	08004919 	.word	0x08004919
 800490c:	080049c3 	.word	0x080049c3
 8004910:	08004919 	.word	0x08004919
 8004914:	08004985 	.word	0x08004985
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4413      	add	r3, r2
 8004920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004924:	461a      	mov	r2, r3
 8004926:	f240 439d 	movw	r3, #1181	; 0x49d
 800492a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800492c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004930:	2b00      	cmp	r3, #0
 8004932:	da10      	bge.n	8004956 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4413      	add	r3, r2
 800493c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	78fa      	ldrb	r2, [r7, #3]
 8004944:	0151      	lsls	r1, r2, #5
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	440a      	add	r2, r1
 800494a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800494e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004952:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004954:	e057      	b.n	8004a06 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495e:	2b00      	cmp	r3, #0
 8004960:	d051      	beq.n	8004a06 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	4413      	add	r3, r2
 800496a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	78fa      	ldrb	r2, [r7, #3]
 8004972:	0151      	lsls	r1, r2, #5
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	440a      	add	r2, r1
 8004978:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800497c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004980:	60d3      	str	r3, [r2, #12]
      break;
 8004982:	e040      	b.n	8004a06 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4413      	add	r3, r2
 800498c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004990:	461a      	mov	r2, r3
 8004992:	f240 639d 	movw	r3, #1693	; 0x69d
 8004996:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004998:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800499c:	2b00      	cmp	r3, #0
 800499e:	da34      	bge.n	8004a0a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	78fa      	ldrb	r2, [r7, #3]
 80049b0:	0151      	lsls	r1, r2, #5
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	440a      	add	r2, r1
 80049b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049be:	60d3      	str	r3, [r2, #12]
      }

      break;
 80049c0:	e023      	b.n	8004a0a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80049c2:	78fb      	ldrb	r3, [r7, #3]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ce:	461a      	mov	r2, r3
 80049d0:	f240 2325 	movw	r3, #549	; 0x225
 80049d4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80049d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	da17      	bge.n	8004a0e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	78fa      	ldrb	r2, [r7, #3]
 80049ee:	0151      	lsls	r1, r2, #5
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	440a      	add	r2, r1
 80049f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049f8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80049fc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80049fe:	e006      	b.n	8004a0e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	75fb      	strb	r3, [r7, #23]
      break;
 8004a04:	e004      	b.n	8004a10 <USB_HC_Init+0x14c>
      break;
 8004a06:	bf00      	nop
 8004a08:	e002      	b.n	8004a10 <USB_HC_Init+0x14c>
      break;
 8004a0a:	bf00      	nop
 8004a0c:	e000      	b.n	8004a10 <USB_HC_Init+0x14c>
      break;
 8004a0e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a16:	699a      	ldr	r2, [r3, #24]
 8004a18:	78fb      	ldrb	r3, [r7, #3]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	2101      	movs	r1, #1
 8004a20:	fa01 f303 	lsl.w	r3, r1, r3
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004a3a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	da03      	bge.n	8004a4a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	e001      	b.n	8004a4e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004a4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d103      	bne.n	8004a5e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004a56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e001      	b.n	8004a62 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a62:	787b      	ldrb	r3, [r7, #1]
 8004a64:	059b      	lsls	r3, r3, #22
 8004a66:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004a6a:	78bb      	ldrb	r3, [r7, #2]
 8004a6c:	02db      	lsls	r3, r3, #11
 8004a6e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a72:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004a74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a78:	049b      	lsls	r3, r3, #18
 8004a7a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004a7e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004a80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a82:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004a86:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a8c:	78fb      	ldrb	r3, [r7, #3]
 8004a8e:	0159      	lsls	r1, r3, #5
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	440b      	add	r3, r1
 8004a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a98:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a9e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004aa0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d10f      	bne.n	8004ac8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	0151      	lsls	r1, r2, #5
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	440a      	add	r2, r1
 8004abe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ac2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ac6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	371c      	adds	r7, #28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop

08004ad8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08c      	sub	sp, #48	; 0x30
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	785b      	ldrb	r3, [r3, #1]
 8004aee:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004af0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004af4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d028      	beq.n	8004b54 <USB_HC_StartXfer+0x7c>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	791b      	ldrb	r3, [r3, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d124      	bne.n	8004b54 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10b      	bne.n	8004b28 <USB_HC_StartXfer+0x50>
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	795b      	ldrb	r3, [r3, #5]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d107      	bne.n	8004b28 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	785b      	ldrb	r3, [r3, #1]
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 fa30 	bl	8004f84 <USB_DoPing>
      return HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	e114      	b.n	8004d52 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d112      	bne.n	8004b54 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	0151      	lsls	r1, r2, #5
 8004b40:	6a3a      	ldr	r2, [r7, #32]
 8004b42:	440a      	add	r2, r1
 8004b44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b48:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004b4c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2200      	movs	r2, #0
 8004b52:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d018      	beq.n	8004b8e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	8912      	ldrh	r2, [r2, #8]
 8004b64:	4413      	add	r3, r2
 8004b66:	3b01      	subs	r3, #1
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	8912      	ldrh	r2, [r2, #8]
 8004b6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b70:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004b72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004b74:	8b7b      	ldrh	r3, [r7, #26]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d90b      	bls.n	8004b92 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004b7a:	8b7b      	ldrh	r3, [r7, #26]
 8004b7c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004b7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	8912      	ldrh	r2, [r2, #8]
 8004b84:	fb02 f203 	mul.w	r2, r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	611a      	str	r2, [r3, #16]
 8004b8c:	e001      	b.n	8004b92 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	78db      	ldrb	r3, [r3, #3]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d006      	beq.n	8004ba8 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004b9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	8912      	ldrh	r2, [r2, #8]
 8004ba0:	fb02 f203 	mul.w	r2, r2, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004bb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bb2:	04d9      	lsls	r1, r3, #19
 8004bb4:	4b69      	ldr	r3, [pc, #420]	; (8004d5c <USB_HC_StartXfer+0x284>)
 8004bb6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004bb8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	7a9b      	ldrb	r3, [r3, #10]
 8004bbe:	075b      	lsls	r3, r3, #29
 8004bc0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004bc4:	69f9      	ldr	r1, [r7, #28]
 8004bc6:	0148      	lsls	r0, r1, #5
 8004bc8:	6a39      	ldr	r1, [r7, #32]
 8004bca:	4401      	add	r1, r0
 8004bcc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004bd0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004bd2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d009      	beq.n	8004bee <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	68d9      	ldr	r1, [r3, #12]
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bea:	460a      	mov	r2, r1
 8004bec:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	bf0c      	ite	eq
 8004bfe:	2301      	moveq	r3, #1
 8004c00:	2300      	movne	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69fa      	ldr	r2, [r7, #28]
 8004c16:	0151      	lsls	r1, r2, #5
 8004c18:	6a3a      	ldr	r2, [r7, #32]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004c24:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	7e7b      	ldrb	r3, [r7, #25]
 8004c36:	075b      	lsls	r3, r3, #29
 8004c38:	69f9      	ldr	r1, [r7, #28]
 8004c3a:	0148      	lsls	r0, r1, #5
 8004c3c:	6a39      	ldr	r1, [r7, #32]
 8004c3e:	4401      	add	r1, r0
 8004c40:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004c44:	4313      	orrs	r3, r2
 8004c46:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a42      	ldr	r2, [pc, #264]	; (8004d60 <USB_HC_StartXfer+0x288>)
 8004c58:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c5a:	4b41      	ldr	r3, [pc, #260]	; (8004d60 <USB_HC_StartXfer+0x288>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c62:	4a3f      	ldr	r2, [pc, #252]	; (8004d60 <USB_HC_StartXfer+0x288>)
 8004c64:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	78db      	ldrb	r3, [r3, #3]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d006      	beq.n	8004c7c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004c6e:	4b3c      	ldr	r3, [pc, #240]	; (8004d60 <USB_HC_StartXfer+0x288>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c76:	4a3a      	ldr	r2, [pc, #232]	; (8004d60 <USB_HC_StartXfer+0x288>)
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	e005      	b.n	8004c88 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004c7c:	4b38      	ldr	r3, [pc, #224]	; (8004d60 <USB_HC_StartXfer+0x288>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c84:	4a36      	ldr	r2, [pc, #216]	; (8004d60 <USB_HC_StartXfer+0x288>)
 8004c86:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c88:	4b35      	ldr	r3, [pc, #212]	; (8004d60 <USB_HC_StartXfer+0x288>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c90:	4a33      	ldr	r2, [pc, #204]	; (8004d60 <USB_HC_StartXfer+0x288>)
 8004c92:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	4b2f      	ldr	r3, [pc, #188]	; (8004d60 <USB_HC_StartXfer+0x288>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004ca8:	79fb      	ldrb	r3, [r7, #7]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e04f      	b.n	8004d52 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	78db      	ldrb	r3, [r3, #3]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d14a      	bne.n	8004d50 <USB_HC_StartXfer+0x278>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d046      	beq.n	8004d50 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	79db      	ldrb	r3, [r3, #7]
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d830      	bhi.n	8004d2c <USB_HC_StartXfer+0x254>
 8004cca:	a201      	add	r2, pc, #4	; (adr r2, 8004cd0 <USB_HC_StartXfer+0x1f8>)
 8004ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd0:	08004ce1 	.word	0x08004ce1
 8004cd4:	08004d05 	.word	0x08004d05
 8004cd8:	08004ce1 	.word	0x08004ce1
 8004cdc:	08004d05 	.word	0x08004d05
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	3303      	adds	r3, #3
 8004ce6:	089b      	lsrs	r3, r3, #2
 8004ce8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004cea:	8afa      	ldrh	r2, [r7, #22]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d91c      	bls.n	8004d30 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	f043 0220 	orr.w	r2, r3, #32
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	619a      	str	r2, [r3, #24]
        }
        break;
 8004d02:	e015      	b.n	8004d30 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	3303      	adds	r3, #3
 8004d0a:	089b      	lsrs	r3, r3, #2
 8004d0c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004d0e:	8afa      	ldrh	r2, [r7, #22]
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d90a      	bls.n	8004d34 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	619a      	str	r2, [r3, #24]
        }
        break;
 8004d2a:	e003      	b.n	8004d34 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004d2c:	bf00      	nop
 8004d2e:	e002      	b.n	8004d36 <USB_HC_StartXfer+0x25e>
        break;
 8004d30:	bf00      	nop
 8004d32:	e000      	b.n	8004d36 <USB_HC_StartXfer+0x25e>
        break;
 8004d34:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	68d9      	ldr	r1, [r3, #12]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	785a      	ldrb	r2, [r3, #1]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	b298      	uxth	r0, r3
 8004d44:	2300      	movs	r3, #0
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	4603      	mov	r3, r0
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f7ff fb84 	bl	8004458 <USB_WritePacket>
  }

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3728      	adds	r7, #40	; 0x28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	1ff80000 	.word	0x1ff80000
 8004d60:	200000b0 	.word	0x200000b0

08004d64 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	b29b      	uxth	r3, r3
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b087      	sub	sp, #28
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	460b      	mov	r3, r1
 8004d90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004d96:	78fb      	ldrb	r3, [r7, #3]
 8004d98:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	0c9b      	lsrs	r3, r3, #18
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <USB_HC_Halt+0x3a>
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d16c      	bne.n	8004e9a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	0151      	lsls	r1, r2, #5
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	440a      	add	r2, r1
 8004dd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dde:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d143      	bne.n	8004e74 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	0151      	lsls	r1, r2, #5
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	440a      	add	r2, r1
 8004e02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e0a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	0151      	lsls	r1, r2, #5
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	440a      	add	r2, r1
 8004e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e2a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	0151      	lsls	r1, r2, #5
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	440a      	add	r2, r1
 8004e42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e4a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e58:	d81d      	bhi.n	8004e96 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e70:	d0ec      	beq.n	8004e4c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e72:	e080      	b.n	8004f76 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	0151      	lsls	r1, r2, #5
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	440a      	add	r2, r1
 8004e8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e92:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e94:	e06f      	b.n	8004f76 <USB_HC_Halt+0x1f0>
          break;
 8004e96:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e98:	e06d      	b.n	8004f76 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eb8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d143      	bne.n	8004f52 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	0151      	lsls	r1, r2, #5
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	440a      	add	r2, r1
 8004ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ee8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	0151      	lsls	r1, r2, #5
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	440a      	add	r2, r1
 8004f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f08:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	0151      	lsls	r1, r2, #5
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	440a      	add	r2, r1
 8004f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f28:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f36:	d81d      	bhi.n	8004f74 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f4e:	d0ec      	beq.n	8004f2a <USB_HC_Halt+0x1a4>
 8004f50:	e011      	b.n	8004f76 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	0151      	lsls	r1, r2, #5
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	440a      	add	r2, r1
 8004f68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	e000      	b.n	8004f76 <USB_HC_Halt+0x1f0>
          break;
 8004f74:	bf00      	nop
    }
  }

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	371c      	adds	r7, #28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	04da      	lsls	r2, r3, #19
 8004fa0:	4b15      	ldr	r3, [pc, #84]	; (8004ff8 <USB_DoPing+0x74>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	0151      	lsls	r1, r2, #5
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	440a      	add	r2, r1
 8004fac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fb4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fcc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fd4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	371c      	adds	r7, #28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	1ff80000 	.word	0x1ff80000

08004ffc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff f99f 	bl	8004350 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005012:	2110      	movs	r1, #16
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff f9d7 	bl	80043c8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff f9fa 	bl	8004414 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005020:	2300      	movs	r3, #0
 8005022:	613b      	str	r3, [r7, #16]
 8005024:	e01f      	b.n	8005066 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4413      	add	r3, r2
 800502e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800503c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005044:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800504c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4413      	add	r3, r2
 8005056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800505a:	461a      	mov	r2, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	3301      	adds	r3, #1
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	2b0f      	cmp	r3, #15
 800506a:	d9dc      	bls.n	8005026 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800506c:	2300      	movs	r3, #0
 800506e:	613b      	str	r3, [r7, #16]
 8005070:	e034      	b.n	80050dc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005088:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005090:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005098:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a6:	461a      	mov	r2, r3
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	3301      	adds	r3, #1
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050b8:	d80c      	bhi.n	80050d4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050d0:	d0ec      	beq.n	80050ac <USB_StopHost+0xb0>
 80050d2:	e000      	b.n	80050d6 <USB_StopHost+0xda>
        break;
 80050d4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	3301      	adds	r3, #1
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	2b0f      	cmp	r3, #15
 80050e0:	d9c7      	bls.n	8005072 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050e8:	461a      	mov	r2, r3
 80050ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050ee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050f6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f7ff f918 	bl	800432e <USB_EnableGlobalInt>

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005108:	b590      	push	{r4, r7, lr}
 800510a:	b089      	sub	sp, #36	; 0x24
 800510c:	af04      	add	r7, sp, #16
 800510e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005110:	2301      	movs	r3, #1
 8005112:	2202      	movs	r2, #2
 8005114:	2102      	movs	r1, #2
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fc68 	bl	80059ec <USBH_FindInterface>
 800511c:	4603      	mov	r3, r0
 800511e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	2bff      	cmp	r3, #255	; 0xff
 8005124:	d002      	beq.n	800512c <USBH_CDC_InterfaceInit+0x24>
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d901      	bls.n	8005130 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800512c:	2302      	movs	r3, #2
 800512e:	e13d      	b.n	80053ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	4619      	mov	r1, r3
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fc3d 	bl	80059b4 <USBH_SelectInterface>
 800513a:	4603      	mov	r3, r0
 800513c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800513e:	7bbb      	ldrb	r3, [r7, #14]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005144:	2302      	movs	r3, #2
 8005146:	e131      	b.n	80053ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800514e:	2050      	movs	r0, #80	; 0x50
 8005150:	f002 fa04 	bl	800755c <malloc>
 8005154:	4603      	mov	r3, r0
 8005156:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005168:	2302      	movs	r3, #2
 800516a:	e11f      	b.n	80053ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800516c:	2250      	movs	r2, #80	; 0x50
 800516e:	2100      	movs	r1, #0
 8005170:	68b8      	ldr	r0, [r7, #8]
 8005172:	f002 fa03 	bl	800757c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005176:	7bfb      	ldrb	r3, [r7, #15]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	211a      	movs	r1, #26
 800517c:	fb01 f303 	mul.w	r3, r1, r3
 8005180:	4413      	add	r3, r2
 8005182:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	b25b      	sxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	da15      	bge.n	80051ba <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800518e:	7bfb      	ldrb	r3, [r7, #15]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	211a      	movs	r1, #26
 8005194:	fb01 f303 	mul.w	r3, r1, r3
 8005198:	4413      	add	r3, r2
 800519a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800519e:	781a      	ldrb	r2, [r3, #0]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	211a      	movs	r1, #26
 80051aa:	fb01 f303 	mul.w	r3, r1, r3
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80051b4:	881a      	ldrh	r2, [r3, #0]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	785b      	ldrb	r3, [r3, #1]
 80051be:	4619      	mov	r1, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f001 fe36 	bl	8006e32 <USBH_AllocPipe>
 80051c6:	4603      	mov	r3, r0
 80051c8:	461a      	mov	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	7819      	ldrb	r1, [r3, #0]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	7858      	ldrb	r0, [r3, #1]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	8952      	ldrh	r2, [r2, #10]
 80051e6:	9202      	str	r2, [sp, #8]
 80051e8:	2203      	movs	r2, #3
 80051ea:	9201      	str	r2, [sp, #4]
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	4623      	mov	r3, r4
 80051f0:	4602      	mov	r2, r0
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f001 fdee 	bl	8006dd4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	2200      	movs	r2, #0
 80051fe:	4619      	mov	r1, r3
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f002 f8fb 	bl	80073fc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005206:	2300      	movs	r3, #0
 8005208:	2200      	movs	r2, #0
 800520a:	210a      	movs	r1, #10
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fbed 	bl	80059ec <USBH_FindInterface>
 8005212:	4603      	mov	r3, r0
 8005214:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	2bff      	cmp	r3, #255	; 0xff
 800521a:	d002      	beq.n	8005222 <USBH_CDC_InterfaceInit+0x11a>
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d901      	bls.n	8005226 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005222:	2302      	movs	r3, #2
 8005224:	e0c2      	b.n	80053ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005226:	7bfb      	ldrb	r3, [r7, #15]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	211a      	movs	r1, #26
 800522c:	fb01 f303 	mul.w	r3, r1, r3
 8005230:	4413      	add	r3, r2
 8005232:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	b25b      	sxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	da16      	bge.n	800526c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	211a      	movs	r1, #26
 8005244:	fb01 f303 	mul.w	r3, r1, r3
 8005248:	4413      	add	r3, r2
 800524a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800524e:	781a      	ldrb	r2, [r3, #0]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005254:	7bfb      	ldrb	r3, [r7, #15]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	211a      	movs	r1, #26
 800525a:	fb01 f303 	mul.w	r3, r1, r3
 800525e:	4413      	add	r3, r2
 8005260:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005264:	881a      	ldrh	r2, [r3, #0]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	835a      	strh	r2, [r3, #26]
 800526a:	e015      	b.n	8005298 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800526c:	7bfb      	ldrb	r3, [r7, #15]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	211a      	movs	r1, #26
 8005272:	fb01 f303 	mul.w	r3, r1, r3
 8005276:	4413      	add	r3, r2
 8005278:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800527c:	781a      	ldrb	r2, [r3, #0]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	211a      	movs	r1, #26
 8005288:	fb01 f303 	mul.w	r3, r1, r3
 800528c:	4413      	add	r3, r2
 800528e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005292:	881a      	ldrh	r2, [r3, #0]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005298:	7bfb      	ldrb	r3, [r7, #15]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	211a      	movs	r1, #26
 800529e:	fb01 f303 	mul.w	r3, r1, r3
 80052a2:	4413      	add	r3, r2
 80052a4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	b25b      	sxtb	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	da16      	bge.n	80052de <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	211a      	movs	r1, #26
 80052b6:	fb01 f303 	mul.w	r3, r1, r3
 80052ba:	4413      	add	r3, r2
 80052bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80052c0:	781a      	ldrb	r2, [r3, #0]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	211a      	movs	r1, #26
 80052cc:	fb01 f303 	mul.w	r3, r1, r3
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80052d6:	881a      	ldrh	r2, [r3, #0]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	835a      	strh	r2, [r3, #26]
 80052dc:	e015      	b.n	800530a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80052de:	7bfb      	ldrb	r3, [r7, #15]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	211a      	movs	r1, #26
 80052e4:	fb01 f303 	mul.w	r3, r1, r3
 80052e8:	4413      	add	r3, r2
 80052ea:	f203 3356 	addw	r3, r3, #854	; 0x356
 80052ee:	781a      	ldrb	r2, [r3, #0]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	211a      	movs	r1, #26
 80052fa:	fb01 f303 	mul.w	r3, r1, r3
 80052fe:	4413      	add	r3, r2
 8005300:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005304:	881a      	ldrh	r2, [r3, #0]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	7b9b      	ldrb	r3, [r3, #14]
 800530e:	4619      	mov	r1, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f001 fd8e 	bl	8006e32 <USBH_AllocPipe>
 8005316:	4603      	mov	r3, r0
 8005318:	461a      	mov	r2, r3
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	7bdb      	ldrb	r3, [r3, #15]
 8005322:	4619      	mov	r1, r3
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f001 fd84 	bl	8006e32 <USBH_AllocPipe>
 800532a:	4603      	mov	r3, r0
 800532c:	461a      	mov	r2, r3
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	7b59      	ldrb	r1, [r3, #13]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	7b98      	ldrb	r0, [r3, #14]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	8b12      	ldrh	r2, [r2, #24]
 800534a:	9202      	str	r2, [sp, #8]
 800534c:	2202      	movs	r2, #2
 800534e:	9201      	str	r2, [sp, #4]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	4623      	mov	r3, r4
 8005354:	4602      	mov	r2, r0
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f001 fd3c 	bl	8006dd4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	7b19      	ldrb	r1, [r3, #12]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	7bd8      	ldrb	r0, [r3, #15]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	8b52      	ldrh	r2, [r2, #26]
 8005374:	9202      	str	r2, [sp, #8]
 8005376:	2202      	movs	r2, #2
 8005378:	9201      	str	r2, [sp, #4]
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	4623      	mov	r3, r4
 800537e:	4602      	mov	r2, r0
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f001 fd27 	bl	8006dd4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	7b5b      	ldrb	r3, [r3, #13]
 8005392:	2200      	movs	r2, #0
 8005394:	4619      	mov	r1, r3
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f002 f830 	bl	80073fc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	7b1b      	ldrb	r3, [r3, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	4619      	mov	r1, r3
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f002 f829 	bl	80073fc <USBH_LL_SetToggle>

  return USBH_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd90      	pop	{r4, r7, pc}

080053b4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00e      	beq.n	80053ec <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	4619      	mov	r1, r3
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f001 fd1c 	bl	8006e12 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	4619      	mov	r1, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f001 fd47 	bl	8006e74 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	7b1b      	ldrb	r3, [r3, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00e      	beq.n	8005412 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	7b1b      	ldrb	r3, [r3, #12]
 80053f8:	4619      	mov	r1, r3
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f001 fd09 	bl	8006e12 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	7b1b      	ldrb	r3, [r3, #12]
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f001 fd34 	bl	8006e74 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	7b5b      	ldrb	r3, [r3, #13]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00e      	beq.n	8005438 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	7b5b      	ldrb	r3, [r3, #13]
 800541e:	4619      	mov	r1, r3
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f001 fcf6 	bl	8006e12 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	7b5b      	ldrb	r3, [r3, #13]
 800542a:	4619      	mov	r1, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f001 fd21 	bl	8006e74 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00b      	beq.n	800545c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	4618      	mov	r0, r3
 800544e:	f002 f88d 	bl	800756c <free>
    phost->pActiveClass->pData = 0U;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005458:	2200      	movs	r2, #0
 800545a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b084      	sub	sp, #16
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3340      	adds	r3, #64	; 0x40
 800547c:	4619      	mov	r1, r3
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f8b1 	bl	80055e6 <GetLineCoding>
 8005484:	4603      	mov	r3, r0
 8005486:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005488:	7afb      	ldrb	r3, [r7, #11]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d105      	bne.n	800549a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005494:	2102      	movs	r1, #2
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800549a:	7afb      	ldrb	r3, [r7, #11]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80054ac:	2301      	movs	r3, #1
 80054ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d877      	bhi.n	80055b8 <USBH_CDC_Process+0x114>
 80054c8:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <USBH_CDC_Process+0x2c>)
 80054ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ce:	bf00      	nop
 80054d0:	080054e5 	.word	0x080054e5
 80054d4:	080054eb 	.word	0x080054eb
 80054d8:	0800551b 	.word	0x0800551b
 80054dc:	0800558f 	.word	0x0800558f
 80054e0:	0800559d 	.word	0x0800559d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	73fb      	strb	r3, [r7, #15]
      break;
 80054e8:	e06d      	b.n	80055c6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ee:	4619      	mov	r1, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f897 	bl	8005624 <SetLineCoding>
 80054f6:	4603      	mov	r3, r0
 80054f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80054fa:	7bbb      	ldrb	r3, [r7, #14]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d104      	bne.n	800550a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005508:	e058      	b.n	80055bc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800550a:	7bbb      	ldrb	r3, [r7, #14]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d055      	beq.n	80055bc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2204      	movs	r2, #4
 8005514:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005518:	e050      	b.n	80055bc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	3340      	adds	r3, #64	; 0x40
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f860 	bl	80055e6 <GetLineCoding>
 8005526:	4603      	mov	r3, r0
 8005528:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800552a:	7bbb      	ldrb	r3, [r7, #14]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d126      	bne.n	800557e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005542:	791b      	ldrb	r3, [r3, #4]
 8005544:	429a      	cmp	r2, r3
 8005546:	d13b      	bne.n	80055c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005552:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005554:	429a      	cmp	r2, r3
 8005556:	d133      	bne.n	80055c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005562:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005564:	429a      	cmp	r2, r3
 8005566:	d12b      	bne.n	80055c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005570:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005572:	429a      	cmp	r2, r3
 8005574:	d124      	bne.n	80055c0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f95a 	bl	8005830 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800557c:	e020      	b.n	80055c0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800557e:	7bbb      	ldrb	r3, [r7, #14]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d01d      	beq.n	80055c0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2204      	movs	r2, #4
 8005588:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800558c:	e018      	b.n	80055c0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f867 	bl	8005662 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f8dc 	bl	8005752 <CDC_ProcessReception>
      break;
 800559a:	e014      	b.n	80055c6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800559c:	2100      	movs	r1, #0
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 ffe5 	bl	800656e <USBH_ClrFeature>
 80055a4:	4603      	mov	r3, r0
 80055a6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80055a8:	7bbb      	ldrb	r3, [r7, #14]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10a      	bne.n	80055c4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80055b6:	e005      	b.n	80055c4 <USBH_CDC_Process+0x120>

    default:
      break;
 80055b8:	bf00      	nop
 80055ba:	e004      	b.n	80055c6 <USBH_CDC_Process+0x122>
      break;
 80055bc:	bf00      	nop
 80055be:	e002      	b.n	80055c6 <USBH_CDC_Process+0x122>
      break;
 80055c0:	bf00      	nop
 80055c2:	e000      	b.n	80055c6 <USBH_CDC_Process+0x122>
      break;
 80055c4:	bf00      	nop

  }

  return status;
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b082      	sub	sp, #8
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	22a1      	movs	r2, #161	; 0xa1
 80055f4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2221      	movs	r2, #33	; 0x21
 80055fa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2207      	movs	r2, #7
 800560c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2207      	movs	r2, #7
 8005612:	4619      	mov	r1, r3
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f001 f98a 	bl	800692e <USBH_CtlReq>
 800561a:	4603      	mov	r3, r0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2221      	movs	r2, #33	; 0x21
 8005632:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2220      	movs	r2, #32
 8005638:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2207      	movs	r2, #7
 800564a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2207      	movs	r2, #7
 8005650:	4619      	mov	r1, r3
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f001 f96b 	bl	800692e <USBH_CtlReq>
 8005658:	4603      	mov	r3, r0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b086      	sub	sp, #24
 8005666:	af02      	add	r7, sp, #8
 8005668:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005674:	2300      	movs	r3, #0
 8005676:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800567e:	2b01      	cmp	r3, #1
 8005680:	d002      	beq.n	8005688 <CDC_ProcessTransmission+0x26>
 8005682:	2b02      	cmp	r3, #2
 8005684:	d025      	beq.n	80056d2 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8005686:	e060      	b.n	800574a <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	8b12      	ldrh	r2, [r2, #24]
 8005690:	4293      	cmp	r3, r2
 8005692:	d90c      	bls.n	80056ae <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	69d9      	ldr	r1, [r3, #28]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8b1a      	ldrh	r2, [r3, #24]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	7b58      	ldrb	r0, [r3, #13]
 80056a0:	2301      	movs	r3, #1
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	4603      	mov	r3, r0
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f001 fb51 	bl	8006d4e <USBH_BulkSendData>
 80056ac:	e00c      	b.n	80056c8 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	7b58      	ldrb	r0, [r3, #13]
 80056bc:	2301      	movs	r3, #1
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	4603      	mov	r3, r0
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f001 fb43 	bl	8006d4e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80056d0:	e03b      	b.n	800574a <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	7b5b      	ldrb	r3, [r3, #13]
 80056d6:	4619      	mov	r1, r3
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f001 fe65 	bl	80073a8 <USBH_LL_GetURBState>
 80056de:	4603      	mov	r3, r0
 80056e0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80056e2:	7afb      	ldrb	r3, [r7, #11]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d128      	bne.n	800573a <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	8b12      	ldrh	r2, [r2, #24]
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d90e      	bls.n	8005712 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	8b12      	ldrh	r2, [r2, #24]
 80056fc:	1a9a      	subs	r2, r3, r2
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	8b12      	ldrh	r2, [r2, #24]
 800570a:	441a      	add	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	61da      	str	r2, [r3, #28]
 8005710:	e002      	b.n	8005718 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	2b00      	cmp	r3, #0
 800571e:	d004      	beq.n	800572a <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005728:	e00e      	b.n	8005748 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f868 	bl	8005808 <USBH_CDC_TransmitCallback>
      break;
 8005738:	e006      	b.n	8005748 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800573a:	7afb      	ldrb	r3, [r7, #11]
 800573c:	2b02      	cmp	r3, #2
 800573e:	d103      	bne.n	8005748 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005748:	bf00      	nop
  }
}
 800574a:	bf00      	nop
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b086      	sub	sp, #24
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005764:	2300      	movs	r3, #0
 8005766:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800576e:	2b03      	cmp	r3, #3
 8005770:	d002      	beq.n	8005778 <CDC_ProcessReception+0x26>
 8005772:	2b04      	cmp	r3, #4
 8005774:	d00e      	beq.n	8005794 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005776:	e043      	b.n	8005800 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	6a19      	ldr	r1, [r3, #32]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	8b5a      	ldrh	r2, [r3, #26]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	7b1b      	ldrb	r3, [r3, #12]
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f001 fb07 	bl	8006d98 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2204      	movs	r2, #4
 800578e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005792:	e035      	b.n	8005800 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	7b1b      	ldrb	r3, [r3, #12]
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f001 fe04 	bl	80073a8 <USBH_LL_GetURBState>
 80057a0:	4603      	mov	r3, r0
 80057a2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80057a4:	7cfb      	ldrb	r3, [r7, #19]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d129      	bne.n	80057fe <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	7b1b      	ldrb	r3, [r3, #12]
 80057ae:	4619      	mov	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f001 fd67 	bl	8007284 <USBH_LL_GetLastXferSize>
 80057b6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d016      	beq.n	80057f0 <CDC_ProcessReception+0x9e>
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	8b5b      	ldrh	r3, [r3, #26]
 80057c6:	461a      	mov	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d910      	bls.n	80057f0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1ad2      	subs	r2, r2, r3
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	6a1a      	ldr	r2, [r3, #32]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	441a      	add	r2, r3
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2203      	movs	r2, #3
 80057ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80057ee:	e006      	b.n	80057fe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f80f 	bl	800581c <USBH_CDC_ReceiveCallback>
      break;
 80057fe:	bf00      	nop
  }
}
 8005800:	bf00      	nop
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	4613      	mov	r3, r2
 8005850:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005858:	2302      	movs	r3, #2
 800585a:	e029      	b.n	80058b0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	79fa      	ldrb	r2, [r7, #7]
 8005860:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 f81f 	bl	80058b8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f001 fc39 	bl	8007120 <USBH_LL_Init>

  return USBH_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80058c4:	2300      	movs	r3, #0
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	e009      	b.n	80058de <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	33e0      	adds	r3, #224	; 0xe0
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	2200      	movs	r2, #0
 80058d6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3301      	adds	r3, #1
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b0e      	cmp	r3, #14
 80058e2:	d9f2      	bls.n	80058ca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	e009      	b.n	80058fe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80058f4:	2200      	movs	r2, #0
 80058f6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	3301      	adds	r3, #1
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005904:	d3f1      	bcc.n	80058ea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2240      	movs	r2, #64	; 0x40
 800592a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d016      	beq.n	80059a2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10e      	bne.n	800599c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005984:	1c59      	adds	r1, r3, #1
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	33de      	adds	r3, #222	; 0xde
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	73fb      	strb	r3, [r7, #15]
 800599a:	e004      	b.n	80059a6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800599c:	2302      	movs	r3, #2
 800599e:	73fb      	strb	r3, [r7, #15]
 80059a0:	e001      	b.n	80059a6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80059a2:	2302      	movs	r3, #2
 80059a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80059ca:	78fa      	ldrb	r2, [r7, #3]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d204      	bcs.n	80059da <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	78fa      	ldrb	r2, [r7, #3]
 80059d4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80059d8:	e001      	b.n	80059de <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80059da:	2302      	movs	r3, #2
 80059dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80059de:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	4608      	mov	r0, r1
 80059f6:	4611      	mov	r1, r2
 80059f8:	461a      	mov	r2, r3
 80059fa:	4603      	mov	r3, r0
 80059fc:	70fb      	strb	r3, [r7, #3]
 80059fe:	460b      	mov	r3, r1
 8005a00:	70bb      	strb	r3, [r7, #2]
 8005a02:	4613      	mov	r3, r2
 8005a04:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005a14:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005a16:	e025      	b.n	8005a64 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	221a      	movs	r2, #26
 8005a1c:	fb02 f303 	mul.w	r3, r2, r3
 8005a20:	3308      	adds	r3, #8
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4413      	add	r3, r2
 8005a26:	3302      	adds	r3, #2
 8005a28:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	795b      	ldrb	r3, [r3, #5]
 8005a2e:	78fa      	ldrb	r2, [r7, #3]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d002      	beq.n	8005a3a <USBH_FindInterface+0x4e>
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	2bff      	cmp	r3, #255	; 0xff
 8005a38:	d111      	bne.n	8005a5e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005a3e:	78ba      	ldrb	r2, [r7, #2]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d002      	beq.n	8005a4a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005a44:	78bb      	ldrb	r3, [r7, #2]
 8005a46:	2bff      	cmp	r3, #255	; 0xff
 8005a48:	d109      	bne.n	8005a5e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005a4e:	787a      	ldrb	r2, [r7, #1]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d002      	beq.n	8005a5a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005a54:	787b      	ldrb	r3, [r7, #1]
 8005a56:	2bff      	cmp	r3, #255	; 0xff
 8005a58:	d101      	bne.n	8005a5e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
 8005a5c:	e006      	b.n	8005a6c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005a5e:	7dfb      	ldrb	r3, [r7, #23]
 8005a60:	3301      	adds	r3, #1
 8005a62:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005a64:	7dfb      	ldrb	r3, [r7, #23]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d9d6      	bls.n	8005a18 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005a6a:	23ff      	movs	r3, #255	; 0xff
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f001 fb89 	bl	8007198 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005a86:	2101      	movs	r1, #1
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f001 fca0 	bl	80073ce <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b088      	sub	sp, #32
 8005a9c:	af04      	add	r7, sp, #16
 8005a9e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d102      	bne.n	8005aba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2203      	movs	r2, #3
 8005ab8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b0b      	cmp	r3, #11
 8005ac2:	f200 81b3 	bhi.w	8005e2c <USBH_Process+0x394>
 8005ac6:	a201      	add	r2, pc, #4	; (adr r2, 8005acc <USBH_Process+0x34>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005afd 	.word	0x08005afd
 8005ad0:	08005b2f 	.word	0x08005b2f
 8005ad4:	08005b97 	.word	0x08005b97
 8005ad8:	08005dc7 	.word	0x08005dc7
 8005adc:	08005e2d 	.word	0x08005e2d
 8005ae0:	08005c3b 	.word	0x08005c3b
 8005ae4:	08005d6d 	.word	0x08005d6d
 8005ae8:	08005c71 	.word	0x08005c71
 8005aec:	08005c91 	.word	0x08005c91
 8005af0:	08005cb1 	.word	0x08005cb1
 8005af4:	08005cdf 	.word	0x08005cdf
 8005af8:	08005daf 	.word	0x08005daf
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 8193 	beq.w	8005e30 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005b10:	20c8      	movs	r0, #200	; 0xc8
 8005b12:	f001 fca6 	bl	8007462 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f001 fb99 	bl	800724e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005b2c:	e180      	b.n	8005e30 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d107      	bne.n	8005b48 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005b46:	e182      	b.n	8005e4e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005b4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b52:	d914      	bls.n	8005b7e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	d903      	bls.n	8005b76 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	220d      	movs	r2, #13
 8005b72:	701a      	strb	r2, [r3, #0]
      break;
 8005b74:	e16b      	b.n	8005e4e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	701a      	strb	r2, [r3, #0]
      break;
 8005b7c:	e167      	b.n	8005e4e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005b84:	f103 020a 	add.w	r2, r3, #10
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005b8e:	200a      	movs	r0, #10
 8005b90:	f001 fc67 	bl	8007462 <USBH_Delay>
      break;
 8005b94:	e15b      	b.n	8005e4e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d005      	beq.n	8005bac <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ba6:	2104      	movs	r1, #4
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005bac:	2064      	movs	r0, #100	; 0x64
 8005bae:	f001 fc58 	bl	8007462 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f001 fb26 	bl	8007204 <USBH_LL_GetSpeed>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	461a      	mov	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2205      	movs	r2, #5
 8005bc6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005bc8:	2100      	movs	r1, #0
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f001 f931 	bl	8006e32 <USBH_AllocPipe>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005bd8:	2180      	movs	r1, #128	; 0x80
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f001 f929 	bl	8006e32 <USBH_AllocPipe>
 8005be0:	4603      	mov	r3, r0
 8005be2:	461a      	mov	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	7919      	ldrb	r1, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005bfc:	b292      	uxth	r2, r2
 8005bfe:	9202      	str	r2, [sp, #8]
 8005c00:	2200      	movs	r2, #0
 8005c02:	9201      	str	r2, [sp, #4]
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	4603      	mov	r3, r0
 8005c08:	2280      	movs	r2, #128	; 0x80
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f001 f8e2 	bl	8006dd4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	7959      	ldrb	r1, [r3, #5]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005c24:	b292      	uxth	r2, r2
 8005c26:	9202      	str	r2, [sp, #8]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	9201      	str	r2, [sp, #4]
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2200      	movs	r2, #0
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f001 f8ce 	bl	8006dd4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005c38:	e109      	b.n	8005e4e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f90c 	bl	8005e58 <USBH_HandleEnum>
 8005c40:	4603      	mov	r3, r0
 8005c42:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005c44:	7bbb      	ldrb	r3, [r7, #14]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f040 80f3 	bne.w	8005e34 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d103      	bne.n	8005c68 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2208      	movs	r2, #8
 8005c64:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005c66:	e0e5      	b.n	8005e34 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2207      	movs	r2, #7
 8005c6c:	701a      	strb	r2, [r3, #0]
      break;
 8005c6e:	e0e1      	b.n	8005e34 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 80de 	beq.w	8005e38 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005c82:	2101      	movs	r1, #1
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2208      	movs	r2, #8
 8005c8c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005c8e:	e0d3      	b.n	8005e38 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	4619      	mov	r1, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fc20 	bl	80064e0 <USBH_SetCfg>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f040 80ca 	bne.w	8005e3c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2209      	movs	r2, #9
 8005cac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005cae:	e0c5      	b.n	8005e3c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005cb6:	f003 0320 	and.w	r3, r3, #32
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00b      	beq.n	8005cd6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fc30 	bl	8006526 <USBH_SetFeature>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f040 80b9 	bne.w	8005e40 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	220a      	movs	r2, #10
 8005cd2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005cd4:	e0b4      	b.n	8005e40 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	220a      	movs	r2, #10
 8005cda:	701a      	strb	r2, [r3, #0]
      break;
 8005cdc:	e0b0      	b.n	8005e40 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 80ad 	beq.w	8005e44 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	73fb      	strb	r3, [r7, #15]
 8005cf6:	e016      	b.n	8005d26 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005cf8:	7bfa      	ldrb	r2, [r7, #15]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	32de      	adds	r2, #222	; 0xde
 8005cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d02:	791a      	ldrb	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d108      	bne.n	8005d20 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005d0e:	7bfa      	ldrb	r2, [r7, #15]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	32de      	adds	r2, #222	; 0xde
 8005d14:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005d1e:	e005      	b.n	8005d2c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	3301      	adds	r3, #1
 8005d24:	73fb      	strb	r3, [r7, #15]
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d0e5      	beq.n	8005cf8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d016      	beq.n	8005d64 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	4798      	blx	r3
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d109      	bne.n	8005d5c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2206      	movs	r2, #6
 8005d4c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d54:	2103      	movs	r1, #3
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005d5a:	e073      	b.n	8005e44 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	220d      	movs	r2, #13
 8005d60:	701a      	strb	r2, [r3, #0]
      break;
 8005d62:	e06f      	b.n	8005e44 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	220d      	movs	r2, #13
 8005d68:	701a      	strb	r2, [r3, #0]
      break;
 8005d6a:	e06b      	b.n	8005e44 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d017      	beq.n	8005da6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	4798      	blx	r3
 8005d82:	4603      	mov	r3, r0
 8005d84:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005d86:	7bbb      	ldrb	r3, [r7, #14]
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d103      	bne.n	8005d96 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	220b      	movs	r2, #11
 8005d92:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005d94:	e058      	b.n	8005e48 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8005d96:	7bbb      	ldrb	r3, [r7, #14]
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d154      	bne.n	8005e48 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	220d      	movs	r2, #13
 8005da2:	701a      	strb	r2, [r3, #0]
      break;
 8005da4:	e050      	b.n	8005e48 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	220d      	movs	r2, #13
 8005daa:	701a      	strb	r2, [r3, #0]
      break;
 8005dac:	e04c      	b.n	8005e48 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d049      	beq.n	8005e4c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	4798      	blx	r3
      }
      break;
 8005dc4:	e042      	b.n	8005e4c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7ff fd72 	bl	80058b8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d009      	beq.n	8005df2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e02:	2105      	movs	r1, #5
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d107      	bne.n	8005e24 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff fe2b 	bl	8005a78 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e22:	e014      	b.n	8005e4e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f001 f9b7 	bl	8007198 <USBH_LL_Start>
      break;
 8005e2a:	e010      	b.n	8005e4e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8005e2c:	bf00      	nop
 8005e2e:	e00e      	b.n	8005e4e <USBH_Process+0x3b6>
      break;
 8005e30:	bf00      	nop
 8005e32:	e00c      	b.n	8005e4e <USBH_Process+0x3b6>
      break;
 8005e34:	bf00      	nop
 8005e36:	e00a      	b.n	8005e4e <USBH_Process+0x3b6>
    break;
 8005e38:	bf00      	nop
 8005e3a:	e008      	b.n	8005e4e <USBH_Process+0x3b6>
      break;
 8005e3c:	bf00      	nop
 8005e3e:	e006      	b.n	8005e4e <USBH_Process+0x3b6>
      break;
 8005e40:	bf00      	nop
 8005e42:	e004      	b.n	8005e4e <USBH_Process+0x3b6>
      break;
 8005e44:	bf00      	nop
 8005e46:	e002      	b.n	8005e4e <USBH_Process+0x3b6>
      break;
 8005e48:	bf00      	nop
 8005e4a:	e000      	b.n	8005e4e <USBH_Process+0x3b6>
      break;
 8005e4c:	bf00      	nop
  }
  return USBH_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af04      	add	r7, sp, #16
 8005e5e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005e60:	2301      	movs	r3, #1
 8005e62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005e64:	2301      	movs	r3, #1
 8005e66:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	785b      	ldrb	r3, [r3, #1]
 8005e6c:	2b07      	cmp	r3, #7
 8005e6e:	f200 81c1 	bhi.w	80061f4 <USBH_HandleEnum+0x39c>
 8005e72:	a201      	add	r2, pc, #4	; (adr r2, 8005e78 <USBH_HandleEnum+0x20>)
 8005e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e78:	08005e99 	.word	0x08005e99
 8005e7c:	08005f57 	.word	0x08005f57
 8005e80:	08005fc1 	.word	0x08005fc1
 8005e84:	0800604f 	.word	0x0800604f
 8005e88:	080060b9 	.word	0x080060b9
 8005e8c:	08006129 	.word	0x08006129
 8005e90:	0800616f 	.word	0x0800616f
 8005e94:	080061b5 	.word	0x080061b5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005e98:	2108      	movs	r1, #8
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fa50 	bl	8006340 <USBH_Get_DevDesc>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005ea4:	7bbb      	ldrb	r3, [r7, #14]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d130      	bne.n	8005f0c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	7919      	ldrb	r1, [r3, #4]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005ece:	b292      	uxth	r2, r2
 8005ed0:	9202      	str	r2, [sp, #8]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	9201      	str	r2, [sp, #4]
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2280      	movs	r2, #128	; 0x80
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 ff79 	bl	8006dd4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	7959      	ldrb	r1, [r3, #5]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005ef6:	b292      	uxth	r2, r2
 8005ef8:	9202      	str	r2, [sp, #8]
 8005efa:	2200      	movs	r2, #0
 8005efc:	9201      	str	r2, [sp, #4]
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	4603      	mov	r3, r0
 8005f02:	2200      	movs	r2, #0
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 ff65 	bl	8006dd4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005f0a:	e175      	b.n	80061f8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005f0c:	7bbb      	ldrb	r3, [r7, #14]
 8005f0e:	2b03      	cmp	r3, #3
 8005f10:	f040 8172 	bne.w	80061f8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d903      	bls.n	8005f36 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	220d      	movs	r2, #13
 8005f32:	701a      	strb	r2, [r3, #0]
      break;
 8005f34:	e160      	b.n	80061f8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	795b      	ldrb	r3, [r3, #5]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 ff99 	bl	8006e74 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	791b      	ldrb	r3, [r3, #4]
 8005f46:	4619      	mov	r1, r3
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 ff93 	bl	8006e74 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
      break;
 8005f54:	e150      	b.n	80061f8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8005f56:	2112      	movs	r1, #18
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f9f1 	bl	8006340 <USBH_Get_DevDesc>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005f62:	7bbb      	ldrb	r3, [r7, #14]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d103      	bne.n	8005f70 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005f6e:	e145      	b.n	80061fc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005f70:	7bbb      	ldrb	r3, [r7, #14]
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	f040 8142 	bne.w	80061fc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005f7e:	3301      	adds	r3, #1
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d903      	bls.n	8005f9a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	220d      	movs	r2, #13
 8005f96:	701a      	strb	r2, [r3, #0]
      break;
 8005f98:	e130      	b.n	80061fc <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	795b      	ldrb	r3, [r3, #5]
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 ff67 	bl	8006e74 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	791b      	ldrb	r3, [r3, #4]
 8005faa:	4619      	mov	r1, r3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 ff61 	bl	8006e74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	701a      	strb	r2, [r3, #0]
      break;
 8005fbe:	e11d      	b.n	80061fc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fa68 	bl	8006498 <USBH_SetAddress>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005fcc:	7bbb      	ldrb	r3, [r7, #14]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d132      	bne.n	8006038 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8005fd2:	2002      	movs	r0, #2
 8005fd4:	f001 fa45 	bl	8007462 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2203      	movs	r2, #3
 8005fe4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	7919      	ldrb	r1, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005ffa:	b292      	uxth	r2, r2
 8005ffc:	9202      	str	r2, [sp, #8]
 8005ffe:	2200      	movs	r2, #0
 8006000:	9201      	str	r2, [sp, #4]
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	4603      	mov	r3, r0
 8006006:	2280      	movs	r2, #128	; 0x80
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fee3 	bl	8006dd4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	7959      	ldrb	r1, [r3, #5]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006022:	b292      	uxth	r2, r2
 8006024:	9202      	str	r2, [sp, #8]
 8006026:	2200      	movs	r2, #0
 8006028:	9201      	str	r2, [sp, #4]
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	4603      	mov	r3, r0
 800602e:	2200      	movs	r2, #0
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fecf 	bl	8006dd4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006036:	e0e3      	b.n	8006200 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006038:	7bbb      	ldrb	r3, [r7, #14]
 800603a:	2b03      	cmp	r3, #3
 800603c:	f040 80e0 	bne.w	8006200 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	220d      	movs	r2, #13
 8006044:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	705a      	strb	r2, [r3, #1]
      break;
 800604c:	e0d8      	b.n	8006200 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800604e:	2109      	movs	r1, #9
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f99d 	bl	8006390 <USBH_Get_CfgDesc>
 8006056:	4603      	mov	r3, r0
 8006058:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800605a:	7bbb      	ldrb	r3, [r7, #14]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d103      	bne.n	8006068 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2204      	movs	r2, #4
 8006064:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006066:	e0cd      	b.n	8006204 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006068:	7bbb      	ldrb	r3, [r7, #14]
 800606a:	2b03      	cmp	r3, #3
 800606c:	f040 80ca 	bne.w	8006204 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006076:	3301      	adds	r3, #1
 8006078:	b2da      	uxtb	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006086:	2b03      	cmp	r3, #3
 8006088:	d903      	bls.n	8006092 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	220d      	movs	r2, #13
 800608e:	701a      	strb	r2, [r3, #0]
      break;
 8006090:	e0b8      	b.n	8006204 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	795b      	ldrb	r3, [r3, #5]
 8006096:	4619      	mov	r1, r3
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 feeb 	bl	8006e74 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	791b      	ldrb	r3, [r3, #4]
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fee5 	bl	8006e74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	701a      	strb	r2, [r3, #0]
      break;
 80060b6:	e0a5      	b.n	8006204 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80060be:	4619      	mov	r1, r3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f965 	bl	8006390 <USBH_Get_CfgDesc>
 80060c6:	4603      	mov	r3, r0
 80060c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80060ca:	7bbb      	ldrb	r3, [r7, #14]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d103      	bne.n	80060d8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2205      	movs	r2, #5
 80060d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80060d6:	e097      	b.n	8006208 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80060d8:	7bbb      	ldrb	r3, [r7, #14]
 80060da:	2b03      	cmp	r3, #3
 80060dc:	f040 8094 	bne.w	8006208 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80060e6:	3301      	adds	r3, #1
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d903      	bls.n	8006102 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	220d      	movs	r2, #13
 80060fe:	701a      	strb	r2, [r3, #0]
      break;
 8006100:	e082      	b.n	8006208 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	795b      	ldrb	r3, [r3, #5]
 8006106:	4619      	mov	r1, r3
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 feb3 	bl	8006e74 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	791b      	ldrb	r3, [r3, #4]
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fead 	bl	8006e74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	701a      	strb	r2, [r3, #0]
      break;
 8006126:	e06f      	b.n	8006208 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800612e:	2b00      	cmp	r3, #0
 8006130:	d019      	beq.n	8006166 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800613e:	23ff      	movs	r3, #255	; 0xff
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f949 	bl	80063d8 <USBH_Get_StringDesc>
 8006146:	4603      	mov	r3, r0
 8006148:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800614a:	7bbb      	ldrb	r3, [r7, #14]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d103      	bne.n	8006158 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2206      	movs	r2, #6
 8006154:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006156:	e059      	b.n	800620c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006158:	7bbb      	ldrb	r3, [r7, #14]
 800615a:	2b03      	cmp	r3, #3
 800615c:	d156      	bne.n	800620c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2206      	movs	r2, #6
 8006162:	705a      	strb	r2, [r3, #1]
      break;
 8006164:	e052      	b.n	800620c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2206      	movs	r2, #6
 800616a:	705a      	strb	r2, [r3, #1]
      break;
 800616c:	e04e      	b.n	800620c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006174:	2b00      	cmp	r3, #0
 8006176:	d019      	beq.n	80061ac <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006184:	23ff      	movs	r3, #255	; 0xff
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f926 	bl	80063d8 <USBH_Get_StringDesc>
 800618c:	4603      	mov	r3, r0
 800618e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006190:	7bbb      	ldrb	r3, [r7, #14]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d103      	bne.n	800619e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2207      	movs	r2, #7
 800619a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800619c:	e038      	b.n	8006210 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800619e:	7bbb      	ldrb	r3, [r7, #14]
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d135      	bne.n	8006210 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2207      	movs	r2, #7
 80061a8:	705a      	strb	r2, [r3, #1]
      break;
 80061aa:	e031      	b.n	8006210 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2207      	movs	r2, #7
 80061b0:	705a      	strb	r2, [r3, #1]
      break;
 80061b2:	e02d      	b.n	8006210 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d017      	beq.n	80061ee <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80061ca:	23ff      	movs	r3, #255	; 0xff
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f903 	bl	80063d8 <USBH_Get_StringDesc>
 80061d2:	4603      	mov	r3, r0
 80061d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80061d6:	7bbb      	ldrb	r3, [r7, #14]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d102      	bne.n	80061e2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80061e0:	e018      	b.n	8006214 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80061e2:	7bbb      	ldrb	r3, [r7, #14]
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d115      	bne.n	8006214 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	73fb      	strb	r3, [r7, #15]
      break;
 80061ec:	e012      	b.n	8006214 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	73fb      	strb	r3, [r7, #15]
      break;
 80061f2:	e00f      	b.n	8006214 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80061f4:	bf00      	nop
 80061f6:	e00e      	b.n	8006216 <USBH_HandleEnum+0x3be>
      break;
 80061f8:	bf00      	nop
 80061fa:	e00c      	b.n	8006216 <USBH_HandleEnum+0x3be>
      break;
 80061fc:	bf00      	nop
 80061fe:	e00a      	b.n	8006216 <USBH_HandleEnum+0x3be>
      break;
 8006200:	bf00      	nop
 8006202:	e008      	b.n	8006216 <USBH_HandleEnum+0x3be>
      break;
 8006204:	bf00      	nop
 8006206:	e006      	b.n	8006216 <USBH_HandleEnum+0x3be>
      break;
 8006208:	bf00      	nop
 800620a:	e004      	b.n	8006216 <USBH_HandleEnum+0x3be>
      break;
 800620c:	bf00      	nop
 800620e:	e002      	b.n	8006216 <USBH_HandleEnum+0x3be>
      break;
 8006210:	bf00      	nop
 8006212:	e000      	b.n	8006216 <USBH_HandleEnum+0x3be>
      break;
 8006214:	bf00      	nop
  }
  return Status;
 8006216:	7bfb      	ldrb	r3, [r7, #15]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b082      	sub	sp, #8
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f804 	bl	8006262 <USBH_HandleSof>
}
 800625a:	bf00      	nop
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b082      	sub	sp, #8
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b0b      	cmp	r3, #11
 8006272:	d10a      	bne.n	800628a <USBH_HandleSof+0x28>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800627a:	2b00      	cmp	r3, #0
 800627c:	d005      	beq.n	800628a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	4798      	blx	r3
  }
}
 800628a:	bf00      	nop
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80062a2:	bf00      	nop
}
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80062be:	bf00      	nop
}
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 ff58 	bl	80071ce <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	791b      	ldrb	r3, [r3, #4]
 8006322:	4619      	mov	r1, r3
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fda5 	bl	8006e74 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	795b      	ldrb	r3, [r3, #5]
 800632e:	4619      	mov	r1, r3
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fd9f 	bl	8006e74 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af02      	add	r7, sp, #8
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	b29b      	uxth	r3, r3
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	4613      	mov	r3, r2
 800635a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800635e:	2100      	movs	r1, #0
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f864 	bl	800642e <USBH_GetDescriptor>
 8006366:	4603      	mov	r3, r0
 8006368:	73fb      	strb	r3, [r7, #15]
 800636a:	7bfb      	ldrb	r3, [r7, #15]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10a      	bne.n	8006386 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800637c:	78fa      	ldrb	r2, [r7, #3]
 800637e:	b292      	uxth	r2, r2
 8006380:	4619      	mov	r1, r3
 8006382:	f000 f918 	bl	80065b6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af02      	add	r7, sp, #8
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	331c      	adds	r3, #28
 80063a0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80063a2:	887b      	ldrh	r3, [r7, #2]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ac:	2100      	movs	r1, #0
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f83d 	bl	800642e <USBH_GetDescriptor>
 80063b4:	4603      	mov	r3, r0
 80063b6:	72fb      	strb	r3, [r7, #11]
 80063b8:	7afb      	ldrb	r3, [r7, #11]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d107      	bne.n	80063ce <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80063c4:	887a      	ldrh	r2, [r7, #2]
 80063c6:	68f9      	ldr	r1, [r7, #12]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 f964 	bl	8006696 <USBH_ParseCfgDesc>
  }

  return status;
 80063ce:	7afb      	ldrb	r3, [r7, #11]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af02      	add	r7, sp, #8
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	607a      	str	r2, [r7, #4]
 80063e2:	461a      	mov	r2, r3
 80063e4:	460b      	mov	r3, r1
 80063e6:	72fb      	strb	r3, [r7, #11]
 80063e8:	4613      	mov	r3, r2
 80063ea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80063ec:	7afb      	ldrb	r3, [r7, #11]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80063f4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80063fc:	893b      	ldrh	r3, [r7, #8]
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	460b      	mov	r3, r1
 8006402:	2100      	movs	r1, #0
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 f812 	bl	800642e <USBH_GetDescriptor>
 800640a:	4603      	mov	r3, r0
 800640c:	75fb      	strb	r3, [r7, #23]
 800640e:	7dfb      	ldrb	r3, [r7, #23]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d107      	bne.n	8006424 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800641a:	893a      	ldrh	r2, [r7, #8]
 800641c:	6879      	ldr	r1, [r7, #4]
 800641e:	4618      	mov	r0, r3
 8006420:	f000 fa37 	bl	8006892 <USBH_ParseStringDesc>
  }

  return status;
 8006424:	7dfb      	ldrb	r3, [r7, #23]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b084      	sub	sp, #16
 8006432:	af00      	add	r7, sp, #0
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	607b      	str	r3, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	72fb      	strb	r3, [r7, #11]
 800643c:	4613      	mov	r3, r2
 800643e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	789b      	ldrb	r3, [r3, #2]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d11c      	bne.n	8006482 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006448:	7afb      	ldrb	r3, [r7, #11]
 800644a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800644e:	b2da      	uxtb	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2206      	movs	r2, #6
 8006458:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	893a      	ldrh	r2, [r7, #8]
 800645e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006460:	893b      	ldrh	r3, [r7, #8]
 8006462:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800646a:	d104      	bne.n	8006476 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f240 4209 	movw	r2, #1033	; 0x409
 8006472:	829a      	strh	r2, [r3, #20]
 8006474:	e002      	b.n	800647c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8b3a      	ldrh	r2, [r7, #24]
 8006480:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006482:	8b3b      	ldrh	r3, [r7, #24]
 8006484:	461a      	mov	r2, r3
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 fa50 	bl	800692e <USBH_CtlReq>
 800648e:	4603      	mov	r3, r0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	789b      	ldrb	r3, [r3, #2]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d10f      	bne.n	80064cc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2205      	movs	r2, #5
 80064b6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80064b8:	78fb      	ldrb	r3, [r7, #3]
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80064cc:	2200      	movs	r2, #0
 80064ce:	2100      	movs	r1, #0
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fa2c 	bl	800692e <USBH_CtlReq>
 80064d6:	4603      	mov	r3, r0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	460b      	mov	r3, r1
 80064ea:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	789b      	ldrb	r3, [r3, #2]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d10e      	bne.n	8006512 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2209      	movs	r2, #9
 80064fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	887a      	ldrh	r2, [r7, #2]
 8006504:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006512:	2200      	movs	r2, #0
 8006514:	2100      	movs	r1, #0
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fa09 	bl	800692e <USBH_CtlReq>
 800651c:	4603      	mov	r3, r0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b082      	sub	sp, #8
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	460b      	mov	r3, r1
 8006530:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	789b      	ldrb	r3, [r3, #2]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d10f      	bne.n	800655a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2203      	movs	r2, #3
 8006544:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006546:	78fb      	ldrb	r3, [r7, #3]
 8006548:	b29a      	uxth	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800655a:	2200      	movs	r2, #0
 800655c:	2100      	movs	r1, #0
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f9e5 	bl	800692e <USBH_CtlReq>
 8006564:	4603      	mov	r3, r0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b082      	sub	sp, #8
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	460b      	mov	r3, r1
 8006578:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	789b      	ldrb	r3, [r3, #2]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d10f      	bne.n	80065a2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2202      	movs	r2, #2
 8006586:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	b29a      	uxth	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80065a2:	2200      	movs	r2, #0
 80065a4:	2100      	movs	r1, #0
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f9c1 	bl	800692e <USBH_CtlReq>
 80065ac:	4603      	mov	r3, r0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b085      	sub	sp, #20
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	60f8      	str	r0, [r7, #12]
 80065be:	60b9      	str	r1, [r7, #8]
 80065c0:	4613      	mov	r3, r2
 80065c2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	781a      	ldrb	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	785a      	ldrb	r2, [r3, #1]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	3302      	adds	r3, #2
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	b29a      	uxth	r2, r3
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	3303      	adds	r3, #3
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	021b      	lsls	r3, r3, #8
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	4313      	orrs	r3, r2
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	791a      	ldrb	r2, [r3, #4]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	795a      	ldrb	r2, [r3, #5]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	799a      	ldrb	r2, [r3, #6]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	79da      	ldrb	r2, [r3, #7]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006610:	88fb      	ldrh	r3, [r7, #6]
 8006612:	2b08      	cmp	r3, #8
 8006614:	d939      	bls.n	800668a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	3308      	adds	r3, #8
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	b29a      	uxth	r2, r3
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	3309      	adds	r3, #9
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	b29b      	uxth	r3, r3
 8006626:	021b      	lsls	r3, r3, #8
 8006628:	b29b      	uxth	r3, r3
 800662a:	4313      	orrs	r3, r2
 800662c:	b29a      	uxth	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	330a      	adds	r3, #10
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	b29a      	uxth	r2, r3
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	330b      	adds	r3, #11
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	b29b      	uxth	r3, r3
 8006642:	021b      	lsls	r3, r3, #8
 8006644:	b29b      	uxth	r3, r3
 8006646:	4313      	orrs	r3, r2
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	330c      	adds	r3, #12
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	b29a      	uxth	r2, r3
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	330d      	adds	r3, #13
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	b29b      	uxth	r3, r3
 800665e:	021b      	lsls	r3, r3, #8
 8006660:	b29b      	uxth	r3, r3
 8006662:	4313      	orrs	r3, r2
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	7b9a      	ldrb	r2, [r3, #14]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	7bda      	ldrb	r2, [r3, #15]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	7c1a      	ldrb	r2, [r3, #16]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	7c5a      	ldrb	r2, [r3, #17]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	745a      	strb	r2, [r3, #17]
  }
}
 800668a:	bf00      	nop
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b08a      	sub	sp, #40	; 0x28
 800669a:	af00      	add	r7, sp, #0
 800669c:	60f8      	str	r0, [r7, #12]
 800669e:	60b9      	str	r1, [r7, #8]
 80066a0:	4613      	mov	r3, r2
 80066a2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	781a      	ldrb	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	785a      	ldrb	r2, [r3, #1]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	3302      	adds	r3, #2
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	3303      	adds	r3, #3
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	021b      	lsls	r3, r3, #8
 80066da:	b29b      	uxth	r3, r3
 80066dc:	4313      	orrs	r3, r2
 80066de:	b29a      	uxth	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	791a      	ldrb	r2, [r3, #4]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	795a      	ldrb	r2, [r3, #5]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	799a      	ldrb	r2, [r3, #6]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	79da      	ldrb	r2, [r3, #7]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	7a1a      	ldrb	r2, [r3, #8]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800670c:	88fb      	ldrh	r3, [r7, #6]
 800670e:	2b09      	cmp	r3, #9
 8006710:	d95f      	bls.n	80067d2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006712:	2309      	movs	r3, #9
 8006714:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006716:	2300      	movs	r3, #0
 8006718:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800671a:	e051      	b.n	80067c0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800671c:	f107 0316 	add.w	r3, r7, #22
 8006720:	4619      	mov	r1, r3
 8006722:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006724:	f000 f8e8 	bl	80068f8 <USBH_GetNextDesc>
 8006728:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	785b      	ldrb	r3, [r3, #1]
 800672e:	2b04      	cmp	r3, #4
 8006730:	d146      	bne.n	80067c0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006732:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006736:	221a      	movs	r2, #26
 8006738:	fb02 f303 	mul.w	r3, r2, r3
 800673c:	3308      	adds	r3, #8
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4413      	add	r3, r2
 8006742:	3302      	adds	r3, #2
 8006744:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006748:	69f8      	ldr	r0, [r7, #28]
 800674a:	f000 f846 	bl	80067da <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006754:	2300      	movs	r3, #0
 8006756:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006758:	e022      	b.n	80067a0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800675a:	f107 0316 	add.w	r3, r7, #22
 800675e:	4619      	mov	r1, r3
 8006760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006762:	f000 f8c9 	bl	80068f8 <USBH_GetNextDesc>
 8006766:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	785b      	ldrb	r3, [r3, #1]
 800676c:	2b05      	cmp	r3, #5
 800676e:	d117      	bne.n	80067a0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006770:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006774:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006778:	3201      	adds	r2, #1
 800677a:	00d2      	lsls	r2, r2, #3
 800677c:	211a      	movs	r1, #26
 800677e:	fb01 f303 	mul.w	r3, r1, r3
 8006782:	4413      	add	r3, r2
 8006784:	3308      	adds	r3, #8
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4413      	add	r3, r2
 800678a:	3304      	adds	r3, #4
 800678c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800678e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006790:	69b8      	ldr	r0, [r7, #24]
 8006792:	f000 f851 	bl	8006838 <USBH_ParseEPDesc>
            ep_ix++;
 8006796:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800679a:	3301      	adds	r3, #1
 800679c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	791b      	ldrb	r3, [r3, #4]
 80067a4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d204      	bcs.n	80067b6 <USBH_ParseCfgDesc+0x120>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	885a      	ldrh	r2, [r3, #2]
 80067b0:	8afb      	ldrh	r3, [r7, #22]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d8d1      	bhi.n	800675a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80067b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067ba:	3301      	adds	r3, #1
 80067bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80067c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d804      	bhi.n	80067d2 <USBH_ParseCfgDesc+0x13c>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	885a      	ldrh	r2, [r3, #2]
 80067cc:	8afb      	ldrh	r3, [r7, #22]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d8a4      	bhi.n	800671c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80067d2:	bf00      	nop
 80067d4:	3728      	adds	r7, #40	; 0x28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80067da:	b480      	push	{r7}
 80067dc:	b083      	sub	sp, #12
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781a      	ldrb	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	785a      	ldrb	r2, [r3, #1]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	789a      	ldrb	r2, [r3, #2]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	78da      	ldrb	r2, [r3, #3]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	791a      	ldrb	r2, [r3, #4]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	795a      	ldrb	r2, [r3, #5]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	799a      	ldrb	r2, [r3, #6]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	79da      	ldrb	r2, [r3, #7]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	7a1a      	ldrb	r2, [r3, #8]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	721a      	strb	r2, [r3, #8]
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781a      	ldrb	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	785a      	ldrb	r2, [r3, #1]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	789a      	ldrb	r2, [r3, #2]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	78da      	ldrb	r2, [r3, #3]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	3304      	adds	r3, #4
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	b29a      	uxth	r2, r3
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	3305      	adds	r3, #5
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	b29b      	uxth	r3, r3
 8006872:	021b      	lsls	r3, r3, #8
 8006874:	b29b      	uxth	r3, r3
 8006876:	4313      	orrs	r3, r2
 8006878:	b29a      	uxth	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	799a      	ldrb	r2, [r3, #6]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	719a      	strb	r2, [r3, #6]
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006892:	b480      	push	{r7}
 8006894:	b087      	sub	sp, #28
 8006896:	af00      	add	r7, sp, #0
 8006898:	60f8      	str	r0, [r7, #12]
 800689a:	60b9      	str	r1, [r7, #8]
 800689c:	4613      	mov	r3, r2
 800689e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3301      	adds	r3, #1
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d120      	bne.n	80068ec <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	1e9a      	subs	r2, r3, #2
 80068b0:	88fb      	ldrh	r3, [r7, #6]
 80068b2:	4293      	cmp	r3, r2
 80068b4:	bf28      	it	cs
 80068b6:	4613      	movcs	r3, r2
 80068b8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3302      	adds	r3, #2
 80068be:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80068c0:	2300      	movs	r3, #0
 80068c2:	82fb      	strh	r3, [r7, #22]
 80068c4:	e00b      	b.n	80068de <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80068c6:	8afb      	ldrh	r3, [r7, #22]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	781a      	ldrb	r2, [r3, #0]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	701a      	strb	r2, [r3, #0]
      pdest++;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	3301      	adds	r3, #1
 80068d6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80068d8:	8afb      	ldrh	r3, [r7, #22]
 80068da:	3302      	adds	r3, #2
 80068dc:	82fb      	strh	r3, [r7, #22]
 80068de:	8afa      	ldrh	r2, [r7, #22]
 80068e0:	8abb      	ldrh	r3, [r7, #20]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d3ef      	bcc.n	80068c6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2200      	movs	r2, #0
 80068ea:	701a      	strb	r2, [r3, #0]
  }
}
 80068ec:	bf00      	nop
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	881a      	ldrh	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	b29b      	uxth	r3, r3
 800690c:	4413      	add	r3, r2
 800690e:	b29a      	uxth	r2, r3
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4413      	add	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006920:	68fb      	ldr	r3, [r7, #12]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b086      	sub	sp, #24
 8006932:	af00      	add	r7, sp, #0
 8006934:	60f8      	str	r0, [r7, #12]
 8006936:	60b9      	str	r1, [r7, #8]
 8006938:	4613      	mov	r3, r2
 800693a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800693c:	2301      	movs	r3, #1
 800693e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	789b      	ldrb	r3, [r3, #2]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d002      	beq.n	800694e <USBH_CtlReq+0x20>
 8006948:	2b02      	cmp	r3, #2
 800694a:	d00f      	beq.n	800696c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800694c:	e027      	b.n	800699e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	88fa      	ldrh	r2, [r7, #6]
 8006958:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2201      	movs	r2, #1
 800695e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2202      	movs	r2, #2
 8006964:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006966:	2301      	movs	r3, #1
 8006968:	75fb      	strb	r3, [r7, #23]
      break;
 800696a:	e018      	b.n	800699e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 f81b 	bl	80069a8 <USBH_HandleControl>
 8006972:	4603      	mov	r3, r0
 8006974:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <USBH_CtlReq+0x54>
 800697c:	7dfb      	ldrb	r3, [r7, #23]
 800697e:	2b03      	cmp	r3, #3
 8006980:	d106      	bne.n	8006990 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2201      	movs	r2, #1
 8006986:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	761a      	strb	r2, [r3, #24]
      break;
 800698e:	e005      	b.n	800699c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006990:	7dfb      	ldrb	r3, [r7, #23]
 8006992:	2b02      	cmp	r3, #2
 8006994:	d102      	bne.n	800699c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2201      	movs	r2, #1
 800699a:	709a      	strb	r2, [r3, #2]
      break;
 800699c:	bf00      	nop
  }
  return status;
 800699e:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80069b0:	2301      	movs	r3, #1
 80069b2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069b4:	2300      	movs	r3, #0
 80069b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	7e1b      	ldrb	r3, [r3, #24]
 80069bc:	3b01      	subs	r3, #1
 80069be:	2b0a      	cmp	r3, #10
 80069c0:	f200 8158 	bhi.w	8006c74 <USBH_HandleControl+0x2cc>
 80069c4:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <USBH_HandleControl+0x24>)
 80069c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ca:	bf00      	nop
 80069cc:	080069f9 	.word	0x080069f9
 80069d0:	08006a13 	.word	0x08006a13
 80069d4:	08006a7d 	.word	0x08006a7d
 80069d8:	08006aa3 	.word	0x08006aa3
 80069dc:	08006adb 	.word	0x08006adb
 80069e0:	08006b07 	.word	0x08006b07
 80069e4:	08006b59 	.word	0x08006b59
 80069e8:	08006b7b 	.word	0x08006b7b
 80069ec:	08006bb7 	.word	0x08006bb7
 80069f0:	08006bdf 	.word	0x08006bdf
 80069f4:	08006c1d 	.word	0x08006c1d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f103 0110 	add.w	r1, r3, #16
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	795b      	ldrb	r3, [r3, #5]
 8006a02:	461a      	mov	r2, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f945 	bl	8006c94 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	761a      	strb	r2, [r3, #24]
      break;
 8006a10:	e13b      	b.n	8006c8a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	795b      	ldrb	r3, [r3, #5]
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fcc5 	bl	80073a8 <USBH_LL_GetURBState>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006a22:	7bbb      	ldrb	r3, [r7, #14]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d11e      	bne.n	8006a66 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	7c1b      	ldrb	r3, [r3, #16]
 8006a2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a30:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	8adb      	ldrh	r3, [r3, #22]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006a3a:	7b7b      	ldrb	r3, [r7, #13]
 8006a3c:	2b80      	cmp	r3, #128	; 0x80
 8006a3e:	d103      	bne.n	8006a48 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2203      	movs	r2, #3
 8006a44:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006a46:	e117      	b.n	8006c78 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2205      	movs	r2, #5
 8006a4c:	761a      	strb	r2, [r3, #24]
      break;
 8006a4e:	e113      	b.n	8006c78 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8006a50:	7b7b      	ldrb	r3, [r7, #13]
 8006a52:	2b80      	cmp	r3, #128	; 0x80
 8006a54:	d103      	bne.n	8006a5e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2209      	movs	r2, #9
 8006a5a:	761a      	strb	r2, [r3, #24]
      break;
 8006a5c:	e10c      	b.n	8006c78 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2207      	movs	r2, #7
 8006a62:	761a      	strb	r2, [r3, #24]
      break;
 8006a64:	e108      	b.n	8006c78 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006a66:	7bbb      	ldrb	r3, [r7, #14]
 8006a68:	2b04      	cmp	r3, #4
 8006a6a:	d003      	beq.n	8006a74 <USBH_HandleControl+0xcc>
 8006a6c:	7bbb      	ldrb	r3, [r7, #14]
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	f040 8102 	bne.w	8006c78 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	220b      	movs	r2, #11
 8006a78:	761a      	strb	r2, [r3, #24]
      break;
 8006a7a:	e0fd      	b.n	8006c78 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6899      	ldr	r1, [r3, #8]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	899a      	ldrh	r2, [r3, #12]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	791b      	ldrb	r3, [r3, #4]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f93c 	bl	8006d12 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2204      	movs	r2, #4
 8006a9e:	761a      	strb	r2, [r3, #24]
      break;
 8006aa0:	e0f3      	b.n	8006c8a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	791b      	ldrb	r3, [r3, #4]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fc7d 	bl	80073a8 <USBH_LL_GetURBState>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006ab2:	7bbb      	ldrb	r3, [r7, #14]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d102      	bne.n	8006abe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2209      	movs	r2, #9
 8006abc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006abe:	7bbb      	ldrb	r3, [r7, #14]
 8006ac0:	2b05      	cmp	r3, #5
 8006ac2:	d102      	bne.n	8006aca <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006ac8:	e0d8      	b.n	8006c7c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
 8006acc:	2b04      	cmp	r3, #4
 8006ace:	f040 80d5 	bne.w	8006c7c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	220b      	movs	r2, #11
 8006ad6:	761a      	strb	r2, [r3, #24]
      break;
 8006ad8:	e0d0      	b.n	8006c7c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6899      	ldr	r1, [r3, #8]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	899a      	ldrh	r2, [r3, #12]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	7958      	ldrb	r0, [r3, #5]
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	4603      	mov	r3, r0
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f8eb 	bl	8006cc8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2206      	movs	r2, #6
 8006b02:	761a      	strb	r2, [r3, #24]
      break;
 8006b04:	e0c1      	b.n	8006c8a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	795b      	ldrb	r3, [r3, #5]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fc4b 	bl	80073a8 <USBH_LL_GetURBState>
 8006b12:	4603      	mov	r3, r0
 8006b14:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006b16:	7bbb      	ldrb	r3, [r7, #14]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d103      	bne.n	8006b24 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2207      	movs	r2, #7
 8006b20:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006b22:	e0ad      	b.n	8006c80 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8006b24:	7bbb      	ldrb	r3, [r7, #14]
 8006b26:	2b05      	cmp	r3, #5
 8006b28:	d105      	bne.n	8006b36 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	220c      	movs	r2, #12
 8006b2e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006b30:	2303      	movs	r3, #3
 8006b32:	73fb      	strb	r3, [r7, #15]
      break;
 8006b34:	e0a4      	b.n	8006c80 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006b36:	7bbb      	ldrb	r3, [r7, #14]
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d103      	bne.n	8006b44 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2205      	movs	r2, #5
 8006b40:	761a      	strb	r2, [r3, #24]
      break;
 8006b42:	e09d      	b.n	8006c80 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
 8006b46:	2b04      	cmp	r3, #4
 8006b48:	f040 809a 	bne.w	8006c80 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	220b      	movs	r2, #11
 8006b50:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006b52:	2302      	movs	r3, #2
 8006b54:	73fb      	strb	r3, [r7, #15]
      break;
 8006b56:	e093      	b.n	8006c80 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	791b      	ldrb	r3, [r3, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	2100      	movs	r1, #0
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f8d6 	bl	8006d12 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2208      	movs	r2, #8
 8006b76:	761a      	strb	r2, [r3, #24]

      break;
 8006b78:	e087      	b.n	8006c8a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	791b      	ldrb	r3, [r3, #4]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fc11 	bl	80073a8 <USBH_LL_GetURBState>
 8006b86:	4603      	mov	r3, r0
 8006b88:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006b8a:	7bbb      	ldrb	r3, [r7, #14]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d105      	bne.n	8006b9c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	220d      	movs	r2, #13
 8006b94:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006b9a:	e073      	b.n	8006c84 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8006b9c:	7bbb      	ldrb	r3, [r7, #14]
 8006b9e:	2b04      	cmp	r3, #4
 8006ba0:	d103      	bne.n	8006baa <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	220b      	movs	r2, #11
 8006ba6:	761a      	strb	r2, [r3, #24]
      break;
 8006ba8:	e06c      	b.n	8006c84 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8006baa:	7bbb      	ldrb	r3, [r7, #14]
 8006bac:	2b05      	cmp	r3, #5
 8006bae:	d169      	bne.n	8006c84 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bb4:	e066      	b.n	8006c84 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	795a      	ldrb	r2, [r3, #5]
 8006bba:	2301      	movs	r3, #1
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f87f 	bl	8006cc8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	220a      	movs	r2, #10
 8006bda:	761a      	strb	r2, [r3, #24]
      break;
 8006bdc:	e055      	b.n	8006c8a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	795b      	ldrb	r3, [r3, #5]
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fbdf 	bl	80073a8 <USBH_LL_GetURBState>
 8006bea:	4603      	mov	r3, r0
 8006bec:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006bee:	7bbb      	ldrb	r3, [r7, #14]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d105      	bne.n	8006c00 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	220d      	movs	r2, #13
 8006bfc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006bfe:	e043      	b.n	8006c88 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006c00:	7bbb      	ldrb	r3, [r7, #14]
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d103      	bne.n	8006c0e <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2209      	movs	r2, #9
 8006c0a:	761a      	strb	r2, [r3, #24]
      break;
 8006c0c:	e03c      	b.n	8006c88 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
 8006c10:	2b04      	cmp	r3, #4
 8006c12:	d139      	bne.n	8006c88 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	220b      	movs	r2, #11
 8006c18:	761a      	strb	r2, [r3, #24]
      break;
 8006c1a:	e035      	b.n	8006c88 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	7e5b      	ldrb	r3, [r3, #25]
 8006c20:	3301      	adds	r3, #1
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	765a      	strb	r2, [r3, #25]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	7e5b      	ldrb	r3, [r3, #25]
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d806      	bhi.n	8006c3e <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006c3c:	e025      	b.n	8006c8a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c44:	2106      	movs	r1, #6
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	795b      	ldrb	r3, [r3, #5]
 8006c54:	4619      	mov	r1, r3
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f90c 	bl	8006e74 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	791b      	ldrb	r3, [r3, #4]
 8006c60:	4619      	mov	r1, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f906 	bl	8006e74 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006c6e:	2302      	movs	r3, #2
 8006c70:	73fb      	strb	r3, [r7, #15]
      break;
 8006c72:	e00a      	b.n	8006c8a <USBH_HandleControl+0x2e2>

    default:
      break;
 8006c74:	bf00      	nop
 8006c76:	e008      	b.n	8006c8a <USBH_HandleControl+0x2e2>
      break;
 8006c78:	bf00      	nop
 8006c7a:	e006      	b.n	8006c8a <USBH_HandleControl+0x2e2>
      break;
 8006c7c:	bf00      	nop
 8006c7e:	e004      	b.n	8006c8a <USBH_HandleControl+0x2e2>
      break;
 8006c80:	bf00      	nop
 8006c82:	e002      	b.n	8006c8a <USBH_HandleControl+0x2e2>
      break;
 8006c84:	bf00      	nop
 8006c86:	e000      	b.n	8006c8a <USBH_HandleControl+0x2e2>
      break;
 8006c88:	bf00      	nop
  }

  return status;
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b088      	sub	sp, #32
 8006c98:	af04      	add	r7, sp, #16
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006ca2:	79f9      	ldrb	r1, [r7, #7]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	9303      	str	r3, [sp, #12]
 8006ca8:	2308      	movs	r3, #8
 8006caa:	9302      	str	r3, [sp, #8]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	9301      	str	r3, [sp, #4]
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 fb44 	bl	8007346 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af04      	add	r7, sp, #16
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	4611      	mov	r1, r2
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	80fb      	strh	r3, [r7, #6]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006cec:	7979      	ldrb	r1, [r7, #5]
 8006cee:	7e3b      	ldrb	r3, [r7, #24]
 8006cf0:	9303      	str	r3, [sp, #12]
 8006cf2:	88fb      	ldrh	r3, [r7, #6]
 8006cf4:	9302      	str	r3, [sp, #8]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	9301      	str	r3, [sp, #4]
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	2200      	movs	r2, #0
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 fb1f 	bl	8007346 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b088      	sub	sp, #32
 8006d16:	af04      	add	r7, sp, #16
 8006d18:	60f8      	str	r0, [r7, #12]
 8006d1a:	60b9      	str	r1, [r7, #8]
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	461a      	mov	r2, r3
 8006d20:	460b      	mov	r3, r1
 8006d22:	80fb      	strh	r3, [r7, #6]
 8006d24:	4613      	mov	r3, r2
 8006d26:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006d28:	7979      	ldrb	r1, [r7, #5]
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	9303      	str	r3, [sp, #12]
 8006d2e:	88fb      	ldrh	r3, [r7, #6]
 8006d30:	9302      	str	r3, [sp, #8]
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	9301      	str	r3, [sp, #4]
 8006d36:	2301      	movs	r3, #1
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 fb01 	bl	8007346 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006d44:	2300      	movs	r3, #0

}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b088      	sub	sp, #32
 8006d52:	af04      	add	r7, sp, #16
 8006d54:	60f8      	str	r0, [r7, #12]
 8006d56:	60b9      	str	r1, [r7, #8]
 8006d58:	4611      	mov	r1, r2
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	80fb      	strh	r3, [r7, #6]
 8006d60:	4613      	mov	r3, r2
 8006d62:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006d72:	7979      	ldrb	r1, [r7, #5]
 8006d74:	7e3b      	ldrb	r3, [r7, #24]
 8006d76:	9303      	str	r3, [sp, #12]
 8006d78:	88fb      	ldrh	r3, [r7, #6]
 8006d7a:	9302      	str	r3, [sp, #8]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	9301      	str	r3, [sp, #4]
 8006d80:	2301      	movs	r3, #1
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	2302      	movs	r3, #2
 8006d86:	2200      	movs	r2, #0
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 fadc 	bl	8007346 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b088      	sub	sp, #32
 8006d9c:	af04      	add	r7, sp, #16
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	4611      	mov	r1, r2
 8006da4:	461a      	mov	r2, r3
 8006da6:	460b      	mov	r3, r1
 8006da8:	80fb      	strh	r3, [r7, #6]
 8006daa:	4613      	mov	r3, r2
 8006dac:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006dae:	7979      	ldrb	r1, [r7, #5]
 8006db0:	2300      	movs	r3, #0
 8006db2:	9303      	str	r3, [sp, #12]
 8006db4:	88fb      	ldrh	r3, [r7, #6]
 8006db6:	9302      	str	r3, [sp, #8]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	9301      	str	r3, [sp, #4]
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 fabe 	bl	8007346 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af04      	add	r7, sp, #16
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	4608      	mov	r0, r1
 8006dde:	4611      	mov	r1, r2
 8006de0:	461a      	mov	r2, r3
 8006de2:	4603      	mov	r3, r0
 8006de4:	70fb      	strb	r3, [r7, #3]
 8006de6:	460b      	mov	r3, r1
 8006de8:	70bb      	strb	r3, [r7, #2]
 8006dea:	4613      	mov	r3, r2
 8006dec:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006dee:	7878      	ldrb	r0, [r7, #1]
 8006df0:	78ba      	ldrb	r2, [r7, #2]
 8006df2:	78f9      	ldrb	r1, [r7, #3]
 8006df4:	8b3b      	ldrh	r3, [r7, #24]
 8006df6:	9302      	str	r3, [sp, #8]
 8006df8:	7d3b      	ldrb	r3, [r7, #20]
 8006dfa:	9301      	str	r3, [sp, #4]
 8006dfc:	7c3b      	ldrb	r3, [r7, #16]
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	4603      	mov	r3, r0
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fa51 	bl	80072aa <USBH_LL_OpenPipe>

  return USBH_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b082      	sub	sp, #8
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8006e1e:	78fb      	ldrb	r3, [r7, #3]
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fa70 	bl	8007308 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b084      	sub	sp, #16
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f836 	bl	8006eb0 <USBH_GetFreePipe>
 8006e44:	4603      	mov	r3, r0
 8006e46:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006e48:	89fb      	ldrh	r3, [r7, #14]
 8006e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00a      	beq.n	8006e68 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8006e52:	78fa      	ldrb	r2, [r7, #3]
 8006e54:	89fb      	ldrh	r3, [r7, #14]
 8006e56:	f003 030f 	and.w	r3, r3, #15
 8006e5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	33e0      	adds	r3, #224	; 0xe0
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	440b      	add	r3, r1
 8006e66:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006e68:	89fb      	ldrh	r3, [r7, #14]
 8006e6a:	b2db      	uxtb	r3, r3
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8006e80:	78fb      	ldrb	r3, [r7, #3]
 8006e82:	2b0a      	cmp	r3, #10
 8006e84:	d80d      	bhi.n	8006ea2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006e86:	78fb      	ldrb	r3, [r7, #3]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	33e0      	adds	r3, #224	; 0xe0
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	78fb      	ldrb	r3, [r7, #3]
 8006e94:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	33e0      	adds	r3, #224	; 0xe0
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	440b      	add	r3, r1
 8006ea0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	73fb      	strb	r3, [r7, #15]
 8006ec0:	e00f      	b.n	8006ee2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	33e0      	adds	r3, #224	; 0xe0
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d102      	bne.n	8006edc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	e007      	b.n	8006eec <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	73fb      	strb	r3, [r7, #15]
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
 8006ee4:	2b0a      	cmp	r3, #10
 8006ee6:	d9ec      	bls.n	8006ec2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006ee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006efc:	2201      	movs	r2, #1
 8006efe:	490e      	ldr	r1, [pc, #56]	; (8006f38 <MX_USB_HOST_Init+0x40>)
 8006f00:	480e      	ldr	r0, [pc, #56]	; (8006f3c <MX_USB_HOST_Init+0x44>)
 8006f02:	f7fe fc9f 	bl	8005844 <USBH_Init>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d001      	beq.n	8006f10 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006f0c:	f7f9 fd8a 	bl	8000a24 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006f10:	490b      	ldr	r1, [pc, #44]	; (8006f40 <MX_USB_HOST_Init+0x48>)
 8006f12:	480a      	ldr	r0, [pc, #40]	; (8006f3c <MX_USB_HOST_Init+0x44>)
 8006f14:	f7fe fd24 	bl	8005960 <USBH_RegisterClass>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006f1e:	f7f9 fd81 	bl	8000a24 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006f22:	4806      	ldr	r0, [pc, #24]	; (8006f3c <MX_USB_HOST_Init+0x44>)
 8006f24:	f7fe fda8 	bl	8005a78 <USBH_Start>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006f2e:	f7f9 fd79 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006f32:	bf00      	nop
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	08006f59 	.word	0x08006f59
 8006f3c:	200001f0 	.word	0x200001f0
 8006f40:	2000000c 	.word	0x2000000c

08006f44 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006f48:	4802      	ldr	r0, [pc, #8]	; (8006f54 <MX_USB_HOST_Process+0x10>)
 8006f4a:	f7fe fda5 	bl	8005a98 <USBH_Process>
}
 8006f4e:	bf00      	nop
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	200001f0 	.word	0x200001f0

08006f58 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	460b      	mov	r3, r1
 8006f62:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006f64:	78fb      	ldrb	r3, [r7, #3]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	2b04      	cmp	r3, #4
 8006f6a:	d819      	bhi.n	8006fa0 <USBH_UserProcess+0x48>
 8006f6c:	a201      	add	r2, pc, #4	; (adr r2, 8006f74 <USBH_UserProcess+0x1c>)
 8006f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f72:	bf00      	nop
 8006f74:	08006fa1 	.word	0x08006fa1
 8006f78:	08006f91 	.word	0x08006f91
 8006f7c:	08006fa1 	.word	0x08006fa1
 8006f80:	08006f99 	.word	0x08006f99
 8006f84:	08006f89 	.word	0x08006f89
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006f88:	4b09      	ldr	r3, [pc, #36]	; (8006fb0 <USBH_UserProcess+0x58>)
 8006f8a:	2203      	movs	r2, #3
 8006f8c:	701a      	strb	r2, [r3, #0]
  break;
 8006f8e:	e008      	b.n	8006fa2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006f90:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <USBH_UserProcess+0x58>)
 8006f92:	2202      	movs	r2, #2
 8006f94:	701a      	strb	r2, [r3, #0]
  break;
 8006f96:	e004      	b.n	8006fa2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006f98:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <USBH_UserProcess+0x58>)
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	701a      	strb	r2, [r3, #0]
  break;
 8006f9e:	e000      	b.n	8006fa2 <USBH_UserProcess+0x4a>

  default:
  break;
 8006fa0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006fa2:	bf00      	nop
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	200000b4 	.word	0x200000b4

08006fb4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08a      	sub	sp, #40	; 0x28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fbc:	f107 0314 	add.w	r3, r7, #20
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	605a      	str	r2, [r3, #4]
 8006fc6:	609a      	str	r2, [r3, #8]
 8006fc8:	60da      	str	r2, [r3, #12]
 8006fca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fd4:	d147      	bne.n	8007066 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	613b      	str	r3, [r7, #16]
 8006fda:	4b25      	ldr	r3, [pc, #148]	; (8007070 <HAL_HCD_MspInit+0xbc>)
 8006fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fde:	4a24      	ldr	r2, [pc, #144]	; (8007070 <HAL_HCD_MspInit+0xbc>)
 8006fe0:	f043 0301 	orr.w	r3, r3, #1
 8006fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8006fe6:	4b22      	ldr	r3, [pc, #136]	; (8007070 <HAL_HCD_MspInit+0xbc>)
 8006fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	613b      	str	r3, [r7, #16]
 8006ff0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006ff2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007000:	f107 0314 	add.w	r3, r7, #20
 8007004:	4619      	mov	r1, r3
 8007006:	481b      	ldr	r0, [pc, #108]	; (8007074 <HAL_HCD_MspInit+0xc0>)
 8007008:	f7fa f87c 	bl	8001104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800700c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007012:	2302      	movs	r3, #2
 8007014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007016:	2300      	movs	r3, #0
 8007018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800701a:	2300      	movs	r3, #0
 800701c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800701e:	230a      	movs	r3, #10
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007022:	f107 0314 	add.w	r3, r7, #20
 8007026:	4619      	mov	r1, r3
 8007028:	4812      	ldr	r0, [pc, #72]	; (8007074 <HAL_HCD_MspInit+0xc0>)
 800702a:	f7fa f86b 	bl	8001104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800702e:	4b10      	ldr	r3, [pc, #64]	; (8007070 <HAL_HCD_MspInit+0xbc>)
 8007030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007032:	4a0f      	ldr	r2, [pc, #60]	; (8007070 <HAL_HCD_MspInit+0xbc>)
 8007034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007038:	6353      	str	r3, [r2, #52]	; 0x34
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]
 800703e:	4b0c      	ldr	r3, [pc, #48]	; (8007070 <HAL_HCD_MspInit+0xbc>)
 8007040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007042:	4a0b      	ldr	r2, [pc, #44]	; (8007070 <HAL_HCD_MspInit+0xbc>)
 8007044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007048:	6453      	str	r3, [r2, #68]	; 0x44
 800704a:	4b09      	ldr	r3, [pc, #36]	; (8007070 <HAL_HCD_MspInit+0xbc>)
 800704c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007056:	2200      	movs	r2, #0
 8007058:	2100      	movs	r1, #0
 800705a:	2043      	movs	r0, #67	; 0x43
 800705c:	f7fa f81b 	bl	8001096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007060:	2043      	movs	r0, #67	; 0x43
 8007062:	f7fa f834 	bl	80010ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007066:	bf00      	nop
 8007068:	3728      	adds	r7, #40	; 0x28
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	40023800 	.word	0x40023800
 8007074:	40020000 	.word	0x40020000

08007078 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007086:	4618      	mov	r0, r3
 8007088:	f7ff f8d9 	bl	800623e <USBH_LL_IncTimer>
}
 800708c:	bf00      	nop
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7ff f911 	bl	80062ca <USBH_LL_Connect>
}
 80070a8:	bf00      	nop
 80070aa:	3708      	adds	r7, #8
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070be:	4618      	mov	r0, r3
 80070c0:	f7ff f91a 	bl	80062f8 <USBH_LL_Disconnect>
}
 80070c4:	bf00      	nop
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	460b      	mov	r3, r1
 80070d6:	70fb      	strb	r3, [r7, #3]
 80070d8:	4613      	mov	r3, r2
 80070da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7ff f8cb 	bl	8006292 <USBH_LL_PortEnabled>
}
 80070fc:	bf00      	nop
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007112:	4618      	mov	r0, r3
 8007114:	f7ff f8cb 	bl	80062ae <USBH_LL_PortDisabled>
}
 8007118:	bf00      	nop
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800712e:	2b01      	cmp	r3, #1
 8007130:	d12a      	bne.n	8007188 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007132:	4a18      	ldr	r2, [pc, #96]	; (8007194 <USBH_LL_Init+0x74>)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a15      	ldr	r2, [pc, #84]	; (8007194 <USBH_LL_Init+0x74>)
 800713e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007142:	4b14      	ldr	r3, [pc, #80]	; (8007194 <USBH_LL_Init+0x74>)
 8007144:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007148:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800714a:	4b12      	ldr	r3, [pc, #72]	; (8007194 <USBH_LL_Init+0x74>)
 800714c:	2208      	movs	r2, #8
 800714e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007150:	4b10      	ldr	r3, [pc, #64]	; (8007194 <USBH_LL_Init+0x74>)
 8007152:	2201      	movs	r2, #1
 8007154:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007156:	4b0f      	ldr	r3, [pc, #60]	; (8007194 <USBH_LL_Init+0x74>)
 8007158:	2200      	movs	r2, #0
 800715a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800715c:	4b0d      	ldr	r3, [pc, #52]	; (8007194 <USBH_LL_Init+0x74>)
 800715e:	2202      	movs	r2, #2
 8007160:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007162:	4b0c      	ldr	r3, [pc, #48]	; (8007194 <USBH_LL_Init+0x74>)
 8007164:	2200      	movs	r2, #0
 8007166:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007168:	480a      	ldr	r0, [pc, #40]	; (8007194 <USBH_LL_Init+0x74>)
 800716a:	f7fa f999 	bl	80014a0 <HAL_HCD_Init>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d001      	beq.n	8007178 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007174:	f7f9 fc56 	bl	8000a24 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007178:	4806      	ldr	r0, [pc, #24]	; (8007194 <USBH_LL_Init+0x74>)
 800717a:	f7fa fd9d 	bl	8001cb8 <HAL_HCD_GetCurrentFrame>
 800717e:	4603      	mov	r3, r0
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff f84c 	bl	8006220 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	200005c8 	.word	0x200005c8

08007198 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fa fd0a 	bl	8001bc8 <HAL_HCD_Start>
 80071b4:	4603      	mov	r3, r0
 80071b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 f95c 	bl	8007478 <USBH_Get_USB_Status>
 80071c0:	4603      	mov	r3, r0
 80071c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b084      	sub	sp, #16
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fa fd12 	bl	8001c0e <HAL_HCD_Stop>
 80071ea:	4603      	mov	r3, r0
 80071ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 f941 	bl	8007478 <USBH_Get_USB_Status>
 80071f6:	4603      	mov	r3, r0
 80071f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800720c:	2301      	movs	r3, #1
 800720e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007216:	4618      	mov	r0, r3
 8007218:	f7fa fd5c 	bl	8001cd4 <HAL_HCD_GetCurrentSpeed>
 800721c:	4603      	mov	r3, r0
 800721e:	2b01      	cmp	r3, #1
 8007220:	d007      	beq.n	8007232 <USBH_LL_GetSpeed+0x2e>
 8007222:	2b01      	cmp	r3, #1
 8007224:	d302      	bcc.n	800722c <USBH_LL_GetSpeed+0x28>
 8007226:	2b02      	cmp	r3, #2
 8007228:	d006      	beq.n	8007238 <USBH_LL_GetSpeed+0x34>
 800722a:	e008      	b.n	800723e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800722c:	2300      	movs	r3, #0
 800722e:	73fb      	strb	r3, [r7, #15]
    break;
 8007230:	e008      	b.n	8007244 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007232:	2301      	movs	r3, #1
 8007234:	73fb      	strb	r3, [r7, #15]
    break;
 8007236:	e005      	b.n	8007244 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007238:	2302      	movs	r3, #2
 800723a:	73fb      	strb	r3, [r7, #15]
    break;
 800723c:	e002      	b.n	8007244 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800723e:	2301      	movs	r3, #1
 8007240:	73fb      	strb	r3, [r7, #15]
    break;
 8007242:	bf00      	nop
  }
  return  speed;
 8007244:	7bfb      	ldrb	r3, [r7, #15]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007264:	4618      	mov	r0, r3
 8007266:	f7fa fcef 	bl	8001c48 <HAL_HCD_ResetPort>
 800726a:	4603      	mov	r3, r0
 800726c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800726e:	7bfb      	ldrb	r3, [r7, #15]
 8007270:	4618      	mov	r0, r3
 8007272:	f000 f901 	bl	8007478 <USBH_Get_USB_Status>
 8007276:	4603      	mov	r3, r0
 8007278:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800727a:	7bbb      	ldrb	r3, [r7, #14]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	460b      	mov	r3, r1
 800728e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007296:	78fa      	ldrb	r2, [r7, #3]
 8007298:	4611      	mov	r1, r2
 800729a:	4618      	mov	r0, r3
 800729c:	f7fa fcf7 	bl	8001c8e <HAL_HCD_HC_GetXferCount>
 80072a0:	4603      	mov	r3, r0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80072aa:	b590      	push	{r4, r7, lr}
 80072ac:	b089      	sub	sp, #36	; 0x24
 80072ae:	af04      	add	r7, sp, #16
 80072b0:	6078      	str	r0, [r7, #4]
 80072b2:	4608      	mov	r0, r1
 80072b4:	4611      	mov	r1, r2
 80072b6:	461a      	mov	r2, r3
 80072b8:	4603      	mov	r3, r0
 80072ba:	70fb      	strb	r3, [r7, #3]
 80072bc:	460b      	mov	r3, r1
 80072be:	70bb      	strb	r3, [r7, #2]
 80072c0:	4613      	mov	r3, r2
 80072c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072c4:	2300      	movs	r3, #0
 80072c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80072c8:	2300      	movs	r3, #0
 80072ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80072d2:	787c      	ldrb	r4, [r7, #1]
 80072d4:	78ba      	ldrb	r2, [r7, #2]
 80072d6:	78f9      	ldrb	r1, [r7, #3]
 80072d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80072da:	9302      	str	r3, [sp, #8]
 80072dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80072e0:	9301      	str	r3, [sp, #4]
 80072e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	4623      	mov	r3, r4
 80072ea:	f7fa f93b 	bl	8001564 <HAL_HCD_HC_Init>
 80072ee:	4603      	mov	r3, r0
 80072f0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 f8bf 	bl	8007478 <USBH_Get_USB_Status>
 80072fa:	4603      	mov	r3, r0
 80072fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	bd90      	pop	{r4, r7, pc}

08007308 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007322:	78fa      	ldrb	r2, [r7, #3]
 8007324:	4611      	mov	r1, r2
 8007326:	4618      	mov	r0, r3
 8007328:	f7fa f9b4 	bl	8001694 <HAL_HCD_HC_Halt>
 800732c:	4603      	mov	r3, r0
 800732e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007330:	7bfb      	ldrb	r3, [r7, #15]
 8007332:	4618      	mov	r0, r3
 8007334:	f000 f8a0 	bl	8007478 <USBH_Get_USB_Status>
 8007338:	4603      	mov	r3, r0
 800733a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800733c:	7bbb      	ldrb	r3, [r7, #14]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007346:	b590      	push	{r4, r7, lr}
 8007348:	b089      	sub	sp, #36	; 0x24
 800734a:	af04      	add	r7, sp, #16
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	4608      	mov	r0, r1
 8007350:	4611      	mov	r1, r2
 8007352:	461a      	mov	r2, r3
 8007354:	4603      	mov	r3, r0
 8007356:	70fb      	strb	r3, [r7, #3]
 8007358:	460b      	mov	r3, r1
 800735a:	70bb      	strb	r3, [r7, #2]
 800735c:	4613      	mov	r3, r2
 800735e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007364:	2300      	movs	r3, #0
 8007366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800736e:	787c      	ldrb	r4, [r7, #1]
 8007370:	78ba      	ldrb	r2, [r7, #2]
 8007372:	78f9      	ldrb	r1, [r7, #3]
 8007374:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007378:	9303      	str	r3, [sp, #12]
 800737a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800737c:	9302      	str	r3, [sp, #8]
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	4623      	mov	r3, r4
 800738a:	f7fa f9a7 	bl	80016dc <HAL_HCD_HC_SubmitRequest>
 800738e:	4603      	mov	r3, r0
 8007390:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007392:	7bfb      	ldrb	r3, [r7, #15]
 8007394:	4618      	mov	r0, r3
 8007396:	f000 f86f 	bl	8007478 <USBH_Get_USB_Status>
 800739a:	4603      	mov	r3, r0
 800739c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800739e:	7bbb      	ldrb	r3, [r7, #14]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd90      	pop	{r4, r7, pc}

080073a8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	460b      	mov	r3, r1
 80073b2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80073ba:	78fa      	ldrb	r2, [r7, #3]
 80073bc:	4611      	mov	r1, r2
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fa fc50 	bl	8001c64 <HAL_HCD_HC_GetURBState>
 80073c4:	4603      	mov	r3, r0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b082      	sub	sp, #8
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	460b      	mov	r3, r1
 80073d8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d103      	bne.n	80073ec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80073e4:	78fb      	ldrb	r3, [r7, #3]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 f872 	bl	80074d0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80073ec:	20c8      	movs	r0, #200	; 0xc8
 80073ee:	f7f9 fd55 	bl	8000e9c <HAL_Delay>
  return USBH_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]
 8007408:	4613      	mov	r3, r2
 800740a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007412:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007414:	78fa      	ldrb	r2, [r7, #3]
 8007416:	68f9      	ldr	r1, [r7, #12]
 8007418:	4613      	mov	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	440b      	add	r3, r1
 8007422:	333b      	adds	r3, #59	; 0x3b
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800742a:	78fa      	ldrb	r2, [r7, #3]
 800742c:	68f9      	ldr	r1, [r7, #12]
 800742e:	4613      	mov	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	00db      	lsls	r3, r3, #3
 8007436:	440b      	add	r3, r1
 8007438:	3350      	adds	r3, #80	; 0x50
 800743a:	78ba      	ldrb	r2, [r7, #2]
 800743c:	701a      	strb	r2, [r3, #0]
 800743e:	e009      	b.n	8007454 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007440:	78fa      	ldrb	r2, [r7, #3]
 8007442:	68f9      	ldr	r1, [r7, #12]
 8007444:	4613      	mov	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	440b      	add	r3, r1
 800744e:	3351      	adds	r3, #81	; 0x51
 8007450:	78ba      	ldrb	r2, [r7, #2]
 8007452:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b082      	sub	sp, #8
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7f9 fd16 	bl	8000e9c <HAL_Delay>
}
 8007470:	bf00      	nop
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	4603      	mov	r3, r0
 8007480:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007486:	79fb      	ldrb	r3, [r7, #7]
 8007488:	2b03      	cmp	r3, #3
 800748a:	d817      	bhi.n	80074bc <USBH_Get_USB_Status+0x44>
 800748c:	a201      	add	r2, pc, #4	; (adr r2, 8007494 <USBH_Get_USB_Status+0x1c>)
 800748e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007492:	bf00      	nop
 8007494:	080074a5 	.word	0x080074a5
 8007498:	080074ab 	.word	0x080074ab
 800749c:	080074b1 	.word	0x080074b1
 80074a0:	080074b7 	.word	0x080074b7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	73fb      	strb	r3, [r7, #15]
    break;
 80074a8:	e00b      	b.n	80074c2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80074aa:	2302      	movs	r3, #2
 80074ac:	73fb      	strb	r3, [r7, #15]
    break;
 80074ae:	e008      	b.n	80074c2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80074b0:	2301      	movs	r3, #1
 80074b2:	73fb      	strb	r3, [r7, #15]
    break;
 80074b4:	e005      	b.n	80074c2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80074b6:	2302      	movs	r3, #2
 80074b8:	73fb      	strb	r3, [r7, #15]
    break;
 80074ba:	e002      	b.n	80074c2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80074bc:	2302      	movs	r3, #2
 80074be:	73fb      	strb	r3, [r7, #15]
    break;
 80074c0:	bf00      	nop
  }
  return usb_status;
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	4603      	mov	r3, r0
 80074d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80074da:	79fb      	ldrb	r3, [r7, #7]
 80074dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80074de:	79fb      	ldrb	r3, [r7, #7]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d102      	bne.n	80074ea <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80074e4:	2301      	movs	r3, #1
 80074e6:	73fb      	strb	r3, [r7, #15]
 80074e8:	e001      	b.n	80074ee <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80074ea:	2300      	movs	r3, #0
 80074ec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	461a      	mov	r2, r3
 80074f2:	2101      	movs	r1, #1
 80074f4:	4803      	ldr	r0, [pc, #12]	; (8007504 <MX_DriverVbusFS+0x34>)
 80074f6:	f7f9 ff9f 	bl	8001438 <HAL_GPIO_WritePin>
}
 80074fa:	bf00      	nop
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	40020800 	.word	0x40020800

08007508 <__errno>:
 8007508:	4b01      	ldr	r3, [pc, #4]	; (8007510 <__errno+0x8>)
 800750a:	6818      	ldr	r0, [r3, #0]
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	2000002c 	.word	0x2000002c

08007514 <__libc_init_array>:
 8007514:	b570      	push	{r4, r5, r6, lr}
 8007516:	4e0d      	ldr	r6, [pc, #52]	; (800754c <__libc_init_array+0x38>)
 8007518:	4c0d      	ldr	r4, [pc, #52]	; (8007550 <__libc_init_array+0x3c>)
 800751a:	1ba4      	subs	r4, r4, r6
 800751c:	10a4      	asrs	r4, r4, #2
 800751e:	2500      	movs	r5, #0
 8007520:	42a5      	cmp	r5, r4
 8007522:	d109      	bne.n	8007538 <__libc_init_array+0x24>
 8007524:	4e0b      	ldr	r6, [pc, #44]	; (8007554 <__libc_init_array+0x40>)
 8007526:	4c0c      	ldr	r4, [pc, #48]	; (8007558 <__libc_init_array+0x44>)
 8007528:	f000 f8ea 	bl	8007700 <_init>
 800752c:	1ba4      	subs	r4, r4, r6
 800752e:	10a4      	asrs	r4, r4, #2
 8007530:	2500      	movs	r5, #0
 8007532:	42a5      	cmp	r5, r4
 8007534:	d105      	bne.n	8007542 <__libc_init_array+0x2e>
 8007536:	bd70      	pop	{r4, r5, r6, pc}
 8007538:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800753c:	4798      	blx	r3
 800753e:	3501      	adds	r5, #1
 8007540:	e7ee      	b.n	8007520 <__libc_init_array+0xc>
 8007542:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007546:	4798      	blx	r3
 8007548:	3501      	adds	r5, #1
 800754a:	e7f2      	b.n	8007532 <__libc_init_array+0x1e>
 800754c:	0800773c 	.word	0x0800773c
 8007550:	0800773c 	.word	0x0800773c
 8007554:	0800773c 	.word	0x0800773c
 8007558:	08007740 	.word	0x08007740

0800755c <malloc>:
 800755c:	4b02      	ldr	r3, [pc, #8]	; (8007568 <malloc+0xc>)
 800755e:	4601      	mov	r1, r0
 8007560:	6818      	ldr	r0, [r3, #0]
 8007562:	f000 b861 	b.w	8007628 <_malloc_r>
 8007566:	bf00      	nop
 8007568:	2000002c 	.word	0x2000002c

0800756c <free>:
 800756c:	4b02      	ldr	r3, [pc, #8]	; (8007578 <free+0xc>)
 800756e:	4601      	mov	r1, r0
 8007570:	6818      	ldr	r0, [r3, #0]
 8007572:	f000 b80b 	b.w	800758c <_free_r>
 8007576:	bf00      	nop
 8007578:	2000002c 	.word	0x2000002c

0800757c <memset>:
 800757c:	4402      	add	r2, r0
 800757e:	4603      	mov	r3, r0
 8007580:	4293      	cmp	r3, r2
 8007582:	d100      	bne.n	8007586 <memset+0xa>
 8007584:	4770      	bx	lr
 8007586:	f803 1b01 	strb.w	r1, [r3], #1
 800758a:	e7f9      	b.n	8007580 <memset+0x4>

0800758c <_free_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	4605      	mov	r5, r0
 8007590:	2900      	cmp	r1, #0
 8007592:	d045      	beq.n	8007620 <_free_r+0x94>
 8007594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007598:	1f0c      	subs	r4, r1, #4
 800759a:	2b00      	cmp	r3, #0
 800759c:	bfb8      	it	lt
 800759e:	18e4      	addlt	r4, r4, r3
 80075a0:	f000 f8ac 	bl	80076fc <__malloc_lock>
 80075a4:	4a1f      	ldr	r2, [pc, #124]	; (8007624 <_free_r+0x98>)
 80075a6:	6813      	ldr	r3, [r2, #0]
 80075a8:	4610      	mov	r0, r2
 80075aa:	b933      	cbnz	r3, 80075ba <_free_r+0x2e>
 80075ac:	6063      	str	r3, [r4, #4]
 80075ae:	6014      	str	r4, [r2, #0]
 80075b0:	4628      	mov	r0, r5
 80075b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075b6:	f000 b8a2 	b.w	80076fe <__malloc_unlock>
 80075ba:	42a3      	cmp	r3, r4
 80075bc:	d90c      	bls.n	80075d8 <_free_r+0x4c>
 80075be:	6821      	ldr	r1, [r4, #0]
 80075c0:	1862      	adds	r2, r4, r1
 80075c2:	4293      	cmp	r3, r2
 80075c4:	bf04      	itt	eq
 80075c6:	681a      	ldreq	r2, [r3, #0]
 80075c8:	685b      	ldreq	r3, [r3, #4]
 80075ca:	6063      	str	r3, [r4, #4]
 80075cc:	bf04      	itt	eq
 80075ce:	1852      	addeq	r2, r2, r1
 80075d0:	6022      	streq	r2, [r4, #0]
 80075d2:	6004      	str	r4, [r0, #0]
 80075d4:	e7ec      	b.n	80075b0 <_free_r+0x24>
 80075d6:	4613      	mov	r3, r2
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	b10a      	cbz	r2, 80075e0 <_free_r+0x54>
 80075dc:	42a2      	cmp	r2, r4
 80075de:	d9fa      	bls.n	80075d6 <_free_r+0x4a>
 80075e0:	6819      	ldr	r1, [r3, #0]
 80075e2:	1858      	adds	r0, r3, r1
 80075e4:	42a0      	cmp	r0, r4
 80075e6:	d10b      	bne.n	8007600 <_free_r+0x74>
 80075e8:	6820      	ldr	r0, [r4, #0]
 80075ea:	4401      	add	r1, r0
 80075ec:	1858      	adds	r0, r3, r1
 80075ee:	4282      	cmp	r2, r0
 80075f0:	6019      	str	r1, [r3, #0]
 80075f2:	d1dd      	bne.n	80075b0 <_free_r+0x24>
 80075f4:	6810      	ldr	r0, [r2, #0]
 80075f6:	6852      	ldr	r2, [r2, #4]
 80075f8:	605a      	str	r2, [r3, #4]
 80075fa:	4401      	add	r1, r0
 80075fc:	6019      	str	r1, [r3, #0]
 80075fe:	e7d7      	b.n	80075b0 <_free_r+0x24>
 8007600:	d902      	bls.n	8007608 <_free_r+0x7c>
 8007602:	230c      	movs	r3, #12
 8007604:	602b      	str	r3, [r5, #0]
 8007606:	e7d3      	b.n	80075b0 <_free_r+0x24>
 8007608:	6820      	ldr	r0, [r4, #0]
 800760a:	1821      	adds	r1, r4, r0
 800760c:	428a      	cmp	r2, r1
 800760e:	bf04      	itt	eq
 8007610:	6811      	ldreq	r1, [r2, #0]
 8007612:	6852      	ldreq	r2, [r2, #4]
 8007614:	6062      	str	r2, [r4, #4]
 8007616:	bf04      	itt	eq
 8007618:	1809      	addeq	r1, r1, r0
 800761a:	6021      	streq	r1, [r4, #0]
 800761c:	605c      	str	r4, [r3, #4]
 800761e:	e7c7      	b.n	80075b0 <_free_r+0x24>
 8007620:	bd38      	pop	{r3, r4, r5, pc}
 8007622:	bf00      	nop
 8007624:	200000b8 	.word	0x200000b8

08007628 <_malloc_r>:
 8007628:	b570      	push	{r4, r5, r6, lr}
 800762a:	1ccd      	adds	r5, r1, #3
 800762c:	f025 0503 	bic.w	r5, r5, #3
 8007630:	3508      	adds	r5, #8
 8007632:	2d0c      	cmp	r5, #12
 8007634:	bf38      	it	cc
 8007636:	250c      	movcc	r5, #12
 8007638:	2d00      	cmp	r5, #0
 800763a:	4606      	mov	r6, r0
 800763c:	db01      	blt.n	8007642 <_malloc_r+0x1a>
 800763e:	42a9      	cmp	r1, r5
 8007640:	d903      	bls.n	800764a <_malloc_r+0x22>
 8007642:	230c      	movs	r3, #12
 8007644:	6033      	str	r3, [r6, #0]
 8007646:	2000      	movs	r0, #0
 8007648:	bd70      	pop	{r4, r5, r6, pc}
 800764a:	f000 f857 	bl	80076fc <__malloc_lock>
 800764e:	4a21      	ldr	r2, [pc, #132]	; (80076d4 <_malloc_r+0xac>)
 8007650:	6814      	ldr	r4, [r2, #0]
 8007652:	4621      	mov	r1, r4
 8007654:	b991      	cbnz	r1, 800767c <_malloc_r+0x54>
 8007656:	4c20      	ldr	r4, [pc, #128]	; (80076d8 <_malloc_r+0xb0>)
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	b91b      	cbnz	r3, 8007664 <_malloc_r+0x3c>
 800765c:	4630      	mov	r0, r6
 800765e:	f000 f83d 	bl	80076dc <_sbrk_r>
 8007662:	6020      	str	r0, [r4, #0]
 8007664:	4629      	mov	r1, r5
 8007666:	4630      	mov	r0, r6
 8007668:	f000 f838 	bl	80076dc <_sbrk_r>
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	d124      	bne.n	80076ba <_malloc_r+0x92>
 8007670:	230c      	movs	r3, #12
 8007672:	6033      	str	r3, [r6, #0]
 8007674:	4630      	mov	r0, r6
 8007676:	f000 f842 	bl	80076fe <__malloc_unlock>
 800767a:	e7e4      	b.n	8007646 <_malloc_r+0x1e>
 800767c:	680b      	ldr	r3, [r1, #0]
 800767e:	1b5b      	subs	r3, r3, r5
 8007680:	d418      	bmi.n	80076b4 <_malloc_r+0x8c>
 8007682:	2b0b      	cmp	r3, #11
 8007684:	d90f      	bls.n	80076a6 <_malloc_r+0x7e>
 8007686:	600b      	str	r3, [r1, #0]
 8007688:	50cd      	str	r5, [r1, r3]
 800768a:	18cc      	adds	r4, r1, r3
 800768c:	4630      	mov	r0, r6
 800768e:	f000 f836 	bl	80076fe <__malloc_unlock>
 8007692:	f104 000b 	add.w	r0, r4, #11
 8007696:	1d23      	adds	r3, r4, #4
 8007698:	f020 0007 	bic.w	r0, r0, #7
 800769c:	1ac3      	subs	r3, r0, r3
 800769e:	d0d3      	beq.n	8007648 <_malloc_r+0x20>
 80076a0:	425a      	negs	r2, r3
 80076a2:	50e2      	str	r2, [r4, r3]
 80076a4:	e7d0      	b.n	8007648 <_malloc_r+0x20>
 80076a6:	428c      	cmp	r4, r1
 80076a8:	684b      	ldr	r3, [r1, #4]
 80076aa:	bf16      	itet	ne
 80076ac:	6063      	strne	r3, [r4, #4]
 80076ae:	6013      	streq	r3, [r2, #0]
 80076b0:	460c      	movne	r4, r1
 80076b2:	e7eb      	b.n	800768c <_malloc_r+0x64>
 80076b4:	460c      	mov	r4, r1
 80076b6:	6849      	ldr	r1, [r1, #4]
 80076b8:	e7cc      	b.n	8007654 <_malloc_r+0x2c>
 80076ba:	1cc4      	adds	r4, r0, #3
 80076bc:	f024 0403 	bic.w	r4, r4, #3
 80076c0:	42a0      	cmp	r0, r4
 80076c2:	d005      	beq.n	80076d0 <_malloc_r+0xa8>
 80076c4:	1a21      	subs	r1, r4, r0
 80076c6:	4630      	mov	r0, r6
 80076c8:	f000 f808 	bl	80076dc <_sbrk_r>
 80076cc:	3001      	adds	r0, #1
 80076ce:	d0cf      	beq.n	8007670 <_malloc_r+0x48>
 80076d0:	6025      	str	r5, [r4, #0]
 80076d2:	e7db      	b.n	800768c <_malloc_r+0x64>
 80076d4:	200000b8 	.word	0x200000b8
 80076d8:	200000bc 	.word	0x200000bc

080076dc <_sbrk_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	4c06      	ldr	r4, [pc, #24]	; (80076f8 <_sbrk_r+0x1c>)
 80076e0:	2300      	movs	r3, #0
 80076e2:	4605      	mov	r5, r0
 80076e4:	4608      	mov	r0, r1
 80076e6:	6023      	str	r3, [r4, #0]
 80076e8:	f7f9 faf0 	bl	8000ccc <_sbrk>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	d102      	bne.n	80076f6 <_sbrk_r+0x1a>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	b103      	cbz	r3, 80076f6 <_sbrk_r+0x1a>
 80076f4:	602b      	str	r3, [r5, #0]
 80076f6:	bd38      	pop	{r3, r4, r5, pc}
 80076f8:	2000088c 	.word	0x2000088c

080076fc <__malloc_lock>:
 80076fc:	4770      	bx	lr

080076fe <__malloc_unlock>:
 80076fe:	4770      	bx	lr

08007700 <_init>:
 8007700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007702:	bf00      	nop
 8007704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007706:	bc08      	pop	{r3}
 8007708:	469e      	mov	lr, r3
 800770a:	4770      	bx	lr

0800770c <_fini>:
 800770c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770e:	bf00      	nop
 8007710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007712:	bc08      	pop	{r3}
 8007714:	469e      	mov	lr, r3
 8007716:	4770      	bx	lr
