
MyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003980  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  08003b10  08003b10  00013b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004110  08004110  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08004110  08004110  00014110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004118  08004118  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004118  08004118  00014118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800411c  0800411c  0001411c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  20000090  080041b0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  080041b0  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a69a  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001927  00000000  00000000  0002a75a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a08  00000000  00000000  0002c088  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000930  00000000  00000000  0002ca90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000213de  00000000  00000000  0002d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007be2  00000000  00000000  0004e79e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c841b  00000000  00000000  00056380  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011e79b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fbc  00000000  00000000  0011e818  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003af8 	.word	0x08003af8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08003af8 	.word	0x08003af8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <CMDArray_Init>:
 */

#include <stdio.h>

void CMDArray_Init(int *CMDArray, int hspd, int bs, int gck, int sep, int osc, int pol, int cntset, int onest)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
 800057c:	603b      	str	r3, [r7, #0]
	switch (hspd)
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d002      	beq.n	800058a <CMDArray_Init+0x1a>
 8000584:	2b01      	cmp	r3, #1
 8000586:	d008      	beq.n	800059a <CMDArray_Init+0x2a>
 8000588:	e00f      	b.n	80005aa <CMDArray_Init+0x3a>
	{
		case 0:
			printf("MY9221: Slow mode selected");
 800058a:	48ae      	ldr	r0, [pc, #696]	; (8000844 <CMDArray_Init+0x2d4>)
 800058c:	f002 fbd0 	bl	8002d30 <iprintf>
			CMDArray[10] = 0;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	3328      	adds	r3, #40	; 0x28
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
			break;
 8000598:	e010      	b.n	80005bc <CMDArray_Init+0x4c>

		case 1:
			printf("MY9221: Fast mode selected");
 800059a:	48ab      	ldr	r0, [pc, #684]	; (8000848 <CMDArray_Init+0x2d8>)
 800059c:	f002 fbc8 	bl	8002d30 <iprintf>
			CMDArray[10] = 1;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	3328      	adds	r3, #40	; 0x28
 80005a4:	2201      	movs	r2, #1
 80005a6:	601a      	str	r2, [r3, #0]
			break;
 80005a8:	e008      	b.n	80005bc <CMDArray_Init+0x4c>

		default:
			printf("MY9221: MODE BAD INPUT (CMDArray_Init)");
 80005aa:	48a8      	ldr	r0, [pc, #672]	; (800084c <CMDArray_Init+0x2dc>)
 80005ac:	f002 fbc0 	bl	8002d30 <iprintf>
			CMDArray[10] = -1;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	3328      	adds	r3, #40	; 0x28
 80005b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005b8:	601a      	str	r2, [r3, #0]
			break;
 80005ba:	bf00      	nop
	}

	switch (bs)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b03      	cmp	r3, #3
 80005c0:	d83a      	bhi.n	8000638 <CMDArray_Init+0xc8>
 80005c2:	a201      	add	r2, pc, #4	; (adr r2, 80005c8 <CMDArray_Init+0x58>)
 80005c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c8:	080005d9 	.word	0x080005d9
 80005cc:	080005f1 	.word	0x080005f1
 80005d0:	08000609 	.word	0x08000609
 80005d4:	08000621 	.word	0x08000621
	{
		case 0:
			printf("MY9221: 8-bit grayscale selected");
 80005d8:	489d      	ldr	r0, [pc, #628]	; (8000850 <CMDArray_Init+0x2e0>)
 80005da:	f002 fba9 	bl	8002d30 <iprintf>
			CMDArray[8] = 0;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3320      	adds	r3, #32
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
			CMDArray[9] = 0;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	3324      	adds	r3, #36	; 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
			break;
 80005ee:	e031      	b.n	8000654 <CMDArray_Init+0xe4>

		case 1:
			printf("MY9221: 12-bit grayscale selected");
 80005f0:	4898      	ldr	r0, [pc, #608]	; (8000854 <CMDArray_Init+0x2e4>)
 80005f2:	f002 fb9d 	bl	8002d30 <iprintf>
			CMDArray[8] = 1;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	3320      	adds	r3, #32
 80005fa:	2201      	movs	r2, #1
 80005fc:	601a      	str	r2, [r3, #0]
			CMDArray[9] = 0;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	3324      	adds	r3, #36	; 0x24
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
			break;
 8000606:	e025      	b.n	8000654 <CMDArray_Init+0xe4>

		case 2:
			printf("MY9221: 14-bit grayscale selected");
 8000608:	4893      	ldr	r0, [pc, #588]	; (8000858 <CMDArray_Init+0x2e8>)
 800060a:	f002 fb91 	bl	8002d30 <iprintf>
			CMDArray[8] = 0;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	3320      	adds	r3, #32
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
			CMDArray[9] = 1;
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	3324      	adds	r3, #36	; 0x24
 800061a:	2201      	movs	r2, #1
 800061c:	601a      	str	r2, [r3, #0]
			break;
 800061e:	e019      	b.n	8000654 <CMDArray_Init+0xe4>

		case 3:
			printf("MY9221: 16-bit grayscale selected");
 8000620:	488e      	ldr	r0, [pc, #568]	; (800085c <CMDArray_Init+0x2ec>)
 8000622:	f002 fb85 	bl	8002d30 <iprintf>
			CMDArray[8] = 1;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	3320      	adds	r3, #32
 800062a:	2201      	movs	r2, #1
 800062c:	601a      	str	r2, [r3, #0]
			CMDArray[9] = 1;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3324      	adds	r3, #36	; 0x24
 8000632:	2201      	movs	r2, #1
 8000634:	601a      	str	r2, [r3, #0]
			break;
 8000636:	e00d      	b.n	8000654 <CMDArray_Init+0xe4>

		default:
			printf("MY9221: GRAYSCALE BAD INPUT (CMDArray_Init)");
 8000638:	4889      	ldr	r0, [pc, #548]	; (8000860 <CMDArray_Init+0x2f0>)
 800063a:	f002 fb79 	bl	8002d30 <iprintf>
			CMDArray[8] = -1;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	3320      	adds	r3, #32
 8000642:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000646:	601a      	str	r2, [r3, #0]
			CMDArray[9] = -1;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	3324      	adds	r3, #36	; 0x24
 800064c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000650:	601a      	str	r2, [r3, #0]
			break;
 8000652:	bf00      	nop
	}

	switch (gck)
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	2b07      	cmp	r3, #7
 8000658:	f200 8094 	bhi.w	8000784 <CMDArray_Init+0x214>
 800065c:	a201      	add	r2, pc, #4	; (adr r2, 8000664 <CMDArray_Init+0xf4>)
 800065e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000662:	bf00      	nop
 8000664:	08000685 	.word	0x08000685
 8000668:	080006a5 	.word	0x080006a5
 800066c:	080006c5 	.word	0x080006c5
 8000670:	080006e5 	.word	0x080006e5
 8000674:	08000705 	.word	0x08000705
 8000678:	08000725 	.word	0x08000725
 800067c:	08000745 	.word	0x08000745
 8000680:	08000765 	.word	0x08000765
	{
		case 0:
			printf("MY9221: original freq selected");
 8000684:	4877      	ldr	r0, [pc, #476]	; (8000864 <CMDArray_Init+0x2f4>)
 8000686:	f002 fb53 	bl	8002d30 <iprintf>
			CMDArray[5] = 0;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	3314      	adds	r3, #20
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
			CMDArray[6] = 0;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	3318      	adds	r3, #24
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
			CMDArray[7] = 0;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	331c      	adds	r3, #28
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
			break;
 80006a2:	e07f      	b.n	80007a4 <CMDArray_Init+0x234>

		case 1:
			printf("MY9221: original freq/2 selected");
 80006a4:	4870      	ldr	r0, [pc, #448]	; (8000868 <CMDArray_Init+0x2f8>)
 80006a6:	f002 fb43 	bl	8002d30 <iprintf>
			CMDArray[5] = 1;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3314      	adds	r3, #20
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
			CMDArray[6] = 0;
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	3318      	adds	r3, #24
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
			CMDArray[7] = 0;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	331c      	adds	r3, #28
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
			break;
 80006c2:	e06f      	b.n	80007a4 <CMDArray_Init+0x234>

		case 2:
			printf("MY9221: original freq/4 selected");
 80006c4:	4869      	ldr	r0, [pc, #420]	; (800086c <CMDArray_Init+0x2fc>)
 80006c6:	f002 fb33 	bl	8002d30 <iprintf>
			CMDArray[5] = 0;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	3314      	adds	r3, #20
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
			CMDArray[6] = 1;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3318      	adds	r3, #24
 80006d6:	2201      	movs	r2, #1
 80006d8:	601a      	str	r2, [r3, #0]
			CMDArray[7] = 0;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	331c      	adds	r3, #28
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
			break;
 80006e2:	e05f      	b.n	80007a4 <CMDArray_Init+0x234>

		case 3:
			printf("MY9221: original freq/8 selected");
 80006e4:	4862      	ldr	r0, [pc, #392]	; (8000870 <CMDArray_Init+0x300>)
 80006e6:	f002 fb23 	bl	8002d30 <iprintf>
			CMDArray[5] = 1;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3314      	adds	r3, #20
 80006ee:	2201      	movs	r2, #1
 80006f0:	601a      	str	r2, [r3, #0]
			CMDArray[6] = 1;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	3318      	adds	r3, #24
 80006f6:	2201      	movs	r2, #1
 80006f8:	601a      	str	r2, [r3, #0]
			CMDArray[7] = 0;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	331c      	adds	r3, #28
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
			break;
 8000702:	e04f      	b.n	80007a4 <CMDArray_Init+0x234>

		case 4:
			printf("MY9221: original freq/16 selected");
 8000704:	485b      	ldr	r0, [pc, #364]	; (8000874 <CMDArray_Init+0x304>)
 8000706:	f002 fb13 	bl	8002d30 <iprintf>
			CMDArray[5] = 0;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	3314      	adds	r3, #20
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
			CMDArray[6] = 0;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	3318      	adds	r3, #24
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
			CMDArray[7] = 1;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	331c      	adds	r3, #28
 800071e:	2201      	movs	r2, #1
 8000720:	601a      	str	r2, [r3, #0]
			break;
 8000722:	e03f      	b.n	80007a4 <CMDArray_Init+0x234>

		case 5:
			printf("MY9221: original freq/64 selected");
 8000724:	4854      	ldr	r0, [pc, #336]	; (8000878 <CMDArray_Init+0x308>)
 8000726:	f002 fb03 	bl	8002d30 <iprintf>
			CMDArray[5] = 1;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	3314      	adds	r3, #20
 800072e:	2201      	movs	r2, #1
 8000730:	601a      	str	r2, [r3, #0]
			CMDArray[6] = 0;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	3318      	adds	r3, #24
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
			CMDArray[7] = 1;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	331c      	adds	r3, #28
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]
			break;
 8000742:	e02f      	b.n	80007a4 <CMDArray_Init+0x234>

		case 6:
			printf("MY9221: original freq/128 selected");
 8000744:	484d      	ldr	r0, [pc, #308]	; (800087c <CMDArray_Init+0x30c>)
 8000746:	f002 faf3 	bl	8002d30 <iprintf>
			CMDArray[5] = 0;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	3314      	adds	r3, #20
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
			CMDArray[6] = 1;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	3318      	adds	r3, #24
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
			CMDArray[7] = 1;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	331c      	adds	r3, #28
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
			break;
 8000762:	e01f      	b.n	80007a4 <CMDArray_Init+0x234>

		case 7:
			printf("MY9221: original freq/256 selected");
 8000764:	4846      	ldr	r0, [pc, #280]	; (8000880 <CMDArray_Init+0x310>)
 8000766:	f002 fae3 	bl	8002d30 <iprintf>
			CMDArray[5] = 1;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	3314      	adds	r3, #20
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
			CMDArray[6] = 1;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	3318      	adds	r3, #24
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
			CMDArray[7] = 1;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	331c      	adds	r3, #28
 800077e:	2201      	movs	r2, #1
 8000780:	601a      	str	r2, [r3, #0]
			break;
 8000782:	e00f      	b.n	80007a4 <CMDArray_Init+0x234>

		default:
			printf("MY9221: INTERNAL OSCILLATOR BAD INPUT (CMDArray_Init)");
 8000784:	483f      	ldr	r0, [pc, #252]	; (8000884 <CMDArray_Init+0x314>)
 8000786:	f002 fad3 	bl	8002d30 <iprintf>
			CMDArray[5] = 1;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3314      	adds	r3, #20
 800078e:	2201      	movs	r2, #1
 8000790:	601a      	str	r2, [r3, #0]
			CMDArray[6] = 1;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	3318      	adds	r3, #24
 8000796:	2201      	movs	r2, #1
 8000798:	601a      	str	r2, [r3, #0]
			CMDArray[7] = 1;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	331c      	adds	r3, #28
 800079e:	2201      	movs	r2, #1
 80007a0:	601a      	str	r2, [r3, #0]
			break;
 80007a2:	bf00      	nop

	}

	switch (sep)
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d002      	beq.n	80007b0 <CMDArray_Init+0x240>
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d008      	beq.n	80007c0 <CMDArray_Init+0x250>
 80007ae:	e00f      	b.n	80007d0 <CMDArray_Init+0x260>
	{
		case 0:
			printf("MY9221: MY-PWM output waveform selected");
 80007b0:	4835      	ldr	r0, [pc, #212]	; (8000888 <CMDArray_Init+0x318>)
 80007b2:	f002 fabd 	bl	8002d30 <iprintf>
			CMDArray[4] = 0;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	3310      	adds	r3, #16
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
			break;
 80007be:	e010      	b.n	80007e2 <CMDArray_Init+0x272>

		case 1:
			printf("MY9221: APDM output waveform selected");
 80007c0:	4832      	ldr	r0, [pc, #200]	; (800088c <CMDArray_Init+0x31c>)
 80007c2:	f002 fab5 	bl	8002d30 <iprintf>
			CMDArray[4] = 1;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	3310      	adds	r3, #16
 80007ca:	2201      	movs	r2, #1
 80007cc:	601a      	str	r2, [r3, #0]
			break;
 80007ce:	e008      	b.n	80007e2 <CMDArray_Init+0x272>

		default:
			printf("MY9221: OUTPUT WAVEFORM BAD INPUT (CMDArray_Init)");
 80007d0:	482f      	ldr	r0, [pc, #188]	; (8000890 <CMDArray_Init+0x320>)
 80007d2:	f002 faad 	bl	8002d30 <iprintf>
			CMDArray[4] = -1;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	3310      	adds	r3, #16
 80007da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007de:	601a      	str	r2, [r3, #0]
			break;
 80007e0:	bf00      	nop
	}

	switch (osc)
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d002      	beq.n	80007ee <CMDArray_Init+0x27e>
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d008      	beq.n	80007fe <CMDArray_Init+0x28e>
 80007ec:	e01b      	b.n	8000826 <CMDArray_Init+0x2b6>
	{
		case 0:
			printf("MY9221: Internal oscillator selected");
 80007ee:	4829      	ldr	r0, [pc, #164]	; (8000894 <CMDArray_Init+0x324>)
 80007f0:	f002 fa9e 	bl	8002d30 <iprintf>
			CMDArray[3] = 0;
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	330c      	adds	r3, #12
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
			break;
 80007fc:	e01c      	b.n	8000838 <CMDArray_Init+0x2c8>

		case 1:
			printf("MY9221: External oscillator selected");
 80007fe:	4826      	ldr	r0, [pc, #152]	; (8000898 <CMDArray_Init+0x328>)
 8000800:	f002 fa96 	bl	8002d30 <iprintf>
			CMDArray[3] = 1;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	330c      	adds	r3, #12
 8000808:	2201      	movs	r2, #1
 800080a:	601a      	str	r2, [r3, #0]
			CMDArray[7] = 0;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	331c      	adds	r3, #28
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
			CMDArray[6] = 0;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3318      	adds	r3, #24
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
			CMDArray[5] = 0;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	3314      	adds	r3, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
			break;
 8000824:	e008      	b.n	8000838 <CMDArray_Init+0x2c8>

		default:
			printf("MY9221: GRAYSCALE CLOCK BAD INPUT (CMDArray_Init)");
 8000826:	481d      	ldr	r0, [pc, #116]	; (800089c <CMDArray_Init+0x32c>)
 8000828:	f002 fa82 	bl	8002d30 <iprintf>
			CMDArray[3] = -1;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	330c      	adds	r3, #12
 8000830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000834:	601a      	str	r2, [r3, #0]
			break;
 8000836:	bf00      	nop
	}

	switch (pol)
 8000838:	6a3b      	ldr	r3, [r7, #32]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d030      	beq.n	80008a0 <CMDArray_Init+0x330>
 800083e:	2b01      	cmp	r3, #1
 8000840:	d036      	beq.n	80008b0 <CMDArray_Init+0x340>
 8000842:	e03d      	b.n	80008c0 <CMDArray_Init+0x350>
 8000844:	08003b10 	.word	0x08003b10
 8000848:	08003b2c 	.word	0x08003b2c
 800084c:	08003b48 	.word	0x08003b48
 8000850:	08003b70 	.word	0x08003b70
 8000854:	08003b94 	.word	0x08003b94
 8000858:	08003bb8 	.word	0x08003bb8
 800085c:	08003bdc 	.word	0x08003bdc
 8000860:	08003c00 	.word	0x08003c00
 8000864:	08003c2c 	.word	0x08003c2c
 8000868:	08003c4c 	.word	0x08003c4c
 800086c:	08003c70 	.word	0x08003c70
 8000870:	08003c94 	.word	0x08003c94
 8000874:	08003cb8 	.word	0x08003cb8
 8000878:	08003cdc 	.word	0x08003cdc
 800087c:	08003d00 	.word	0x08003d00
 8000880:	08003d24 	.word	0x08003d24
 8000884:	08003d48 	.word	0x08003d48
 8000888:	08003d80 	.word	0x08003d80
 800088c:	08003da8 	.word	0x08003da8
 8000890:	08003dd0 	.word	0x08003dd0
 8000894:	08003e04 	.word	0x08003e04
 8000898:	08003e2c 	.word	0x08003e2c
 800089c:	08003e54 	.word	0x08003e54
	{
		case 0:
			printf("MY9221: LED driver selected");
 80008a0:	4839      	ldr	r0, [pc, #228]	; (8000988 <CMDArray_Init+0x418>)
 80008a2:	f002 fa45 	bl	8002d30 <iprintf>
			CMDArray[2] = 0;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	3308      	adds	r3, #8
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
			break;
 80008ae:	e010      	b.n	80008d2 <CMDArray_Init+0x362>

		case 1:
			printf("MY9221: MY-PWM/APDM selected");
 80008b0:	4836      	ldr	r0, [pc, #216]	; (800098c <CMDArray_Init+0x41c>)
 80008b2:	f002 fa3d 	bl	8002d30 <iprintf>
			CMDArray[2] = 1;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	3308      	adds	r3, #8
 80008ba:	2201      	movs	r2, #1
 80008bc:	601a      	str	r2, [r3, #0]
			break;
 80008be:	e008      	b.n	80008d2 <CMDArray_Init+0x362>

		default:
			printf("MY9221: OUTPUT POLARITY BAD INPUT (CMDArray_Init)");
 80008c0:	4833      	ldr	r0, [pc, #204]	; (8000990 <CMDArray_Init+0x420>)
 80008c2:	f002 fa35 	bl	8002d30 <iprintf>
			CMDArray[2] = -1;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	3308      	adds	r3, #8
 80008ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008ce:	601a      	str	r2, [r3, #0]
			break;
 80008d0:	bf00      	nop
	}

	switch (cntset)
 80008d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d002      	beq.n	80008de <CMDArray_Init+0x36e>
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d008      	beq.n	80008ee <CMDArray_Init+0x37e>
 80008dc:	e01d      	b.n	800091a <CMDArray_Init+0x3aa>
	{
		case 0:
			printf("MY9221: Free running mode selected");
 80008de:	482d      	ldr	r0, [pc, #180]	; (8000994 <CMDArray_Init+0x424>)
 80008e0:	f002 fa26 	bl	8002d30 <iprintf>
			CMDArray[1] = 0;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	3304      	adds	r3, #4
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
			break;
 80008ec:	e01e      	b.n	800092c <CMDArray_Init+0x3bc>

		case 1:
			if (CMDArray[3] != 1)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	330c      	adds	r3, #12
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d008      	beq.n	800090a <CMDArray_Init+0x39a>
			{
				printf("MY9221: MODE BAD INPUT (CMDArray_Init) [osc needs to be 1!]");
 80008f8:	4827      	ldr	r0, [pc, #156]	; (8000998 <CMDArray_Init+0x428>)
 80008fa:	f002 fa19 	bl	8002d30 <iprintf>
				CMDArray[1] = -1;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	3304      	adds	r3, #4
 8000902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000906:	601a      	str	r2, [r3, #0]
				break;
 8000908:	e010      	b.n	800092c <CMDArray_Init+0x3bc>
			}
			printf("MY9221: Counter reset mode selected");
 800090a:	4824      	ldr	r0, [pc, #144]	; (800099c <CMDArray_Init+0x42c>)
 800090c:	f002 fa10 	bl	8002d30 <iprintf>
			CMDArray[1] = 1;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3304      	adds	r3, #4
 8000914:	2201      	movs	r2, #1
 8000916:	601a      	str	r2, [r3, #0]
			break;
 8000918:	e008      	b.n	800092c <CMDArray_Init+0x3bc>

		default:
			printf("MY9221: MODE BAD INPUT (CMDArray_Init)");
 800091a:	4821      	ldr	r0, [pc, #132]	; (80009a0 <CMDArray_Init+0x430>)
 800091c:	f002 fa08 	bl	8002d30 <iprintf>
			CMDArray[1] = -1;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	3304      	adds	r3, #4
 8000924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000928:	601a      	str	r2, [r3, #0]
			break;
 800092a:	bf00      	nop
	}

	switch (onest)
 800092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092e:	2b00      	cmp	r3, #0
 8000930:	d002      	beq.n	8000938 <CMDArray_Init+0x3c8>
 8000932:	2b01      	cmp	r3, #1
 8000934:	d007      	beq.n	8000946 <CMDArray_Init+0x3d6>
 8000936:	e01a      	b.n	800096e <CMDArray_Init+0x3fe>
	{
		case 0:
			printf("MY9221: Frame cycle repeat mode selected");
 8000938:	481a      	ldr	r0, [pc, #104]	; (80009a4 <CMDArray_Init+0x434>)
 800093a:	f002 f9f9 	bl	8002d30 <iprintf>
			CMDArray[0] = 0;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
			break;
 8000944:	e01b      	b.n	800097e <CMDArray_Init+0x40e>

		case 1:
			if (CMDArray[1] != 1)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	3304      	adds	r3, #4
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d007      	beq.n	8000960 <CMDArray_Init+0x3f0>
			{
				printf("MY9221: CNTSET NEEDS TO BE 1! (CMDArray_Init)");
 8000950:	4815      	ldr	r0, [pc, #84]	; (80009a8 <CMDArray_Init+0x438>)
 8000952:	f002 f9ed 	bl	8002d30 <iprintf>
				CMDArray[0] = -1;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800095c:	601a      	str	r2, [r3, #0]
				break;
 800095e:	e00e      	b.n	800097e <CMDArray_Init+0x40e>
			}
			printf("MY9221: Frame cycle one-shot mode selected");
 8000960:	4812      	ldr	r0, [pc, #72]	; (80009ac <CMDArray_Init+0x43c>)
 8000962:	f002 f9e5 	bl	8002d30 <iprintf>
			CMDArray[0] = 1;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2201      	movs	r2, #1
 800096a:	601a      	str	r2, [r3, #0]
			break;
 800096c:	e007      	b.n	800097e <CMDArray_Init+0x40e>

		default:
			printf("MY9221: ONE-SHOT SELECT BAD INPUT (CMDArray_Init)");
 800096e:	4810      	ldr	r0, [pc, #64]	; (80009b0 <CMDArray_Init+0x440>)
 8000970:	f002 f9de 	bl	8002d30 <iprintf>
			CMDArray[0] = -1;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800097a:	601a      	str	r2, [r3, #0]
			break;
 800097c:	bf00      	nop
	}
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	08003e88 	.word	0x08003e88
 800098c:	08003ea4 	.word	0x08003ea4
 8000990:	08003ec4 	.word	0x08003ec4
 8000994:	08003ef8 	.word	0x08003ef8
 8000998:	08003f1c 	.word	0x08003f1c
 800099c:	08003f58 	.word	0x08003f58
 80009a0:	08003b48 	.word	0x08003b48
 80009a4:	08003f7c 	.word	0x08003f7c
 80009a8:	08003fa8 	.word	0x08003fa8
 80009ac:	08003fd8 	.word	0x08003fd8
 80009b0:	08004004 	.word	0x08004004

080009b4 <Grayscale_Init>:

void Grayscale_Init(int *GrArr, int bs, int *ClrArr)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
	int GrayscaleBits;
	int Frame;
	int Bit;

	switch (bs)
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d822      	bhi.n	8000a0c <Grayscale_Init+0x58>
 80009c6:	a201      	add	r2, pc, #4	; (adr r2, 80009cc <Grayscale_Init+0x18>)
 80009c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009cc:	080009dd 	.word	0x080009dd
 80009d0:	080009e9 	.word	0x080009e9
 80009d4:	080009f5 	.word	0x080009f5
 80009d8:	08000a01 	.word	0x08000a01
	{
		case 0:
			printf("MY9221: 8-bit grayscale selected");
 80009dc:	482a      	ldr	r0, [pc, #168]	; (8000a88 <Grayscale_Init+0xd4>)
 80009de:	f002 f9a7 	bl	8002d30 <iprintf>
			GrayscaleBits = 8;
 80009e2:	2308      	movs	r3, #8
 80009e4:	61fb      	str	r3, [r7, #28]
			break;
 80009e6:	e015      	b.n	8000a14 <Grayscale_Init+0x60>

		case 1:
			printf("MY9221: 12-bit grayscale selected");
 80009e8:	4828      	ldr	r0, [pc, #160]	; (8000a8c <Grayscale_Init+0xd8>)
 80009ea:	f002 f9a1 	bl	8002d30 <iprintf>
			GrayscaleBits = 12;
 80009ee:	230c      	movs	r3, #12
 80009f0:	61fb      	str	r3, [r7, #28]
			break;
 80009f2:	e00f      	b.n	8000a14 <Grayscale_Init+0x60>

		case 2:
			printf("MY9221: 14-bit grayscale selected");
 80009f4:	4826      	ldr	r0, [pc, #152]	; (8000a90 <Grayscale_Init+0xdc>)
 80009f6:	f002 f99b 	bl	8002d30 <iprintf>
			GrayscaleBits = 14;
 80009fa:	230e      	movs	r3, #14
 80009fc:	61fb      	str	r3, [r7, #28]
			break;
 80009fe:	e009      	b.n	8000a14 <Grayscale_Init+0x60>

		case 3:
			printf("MY9221: 16-bit grayscale selected");
 8000a00:	4824      	ldr	r0, [pc, #144]	; (8000a94 <Grayscale_Init+0xe0>)
 8000a02:	f002 f995 	bl	8002d30 <iprintf>
			GrayscaleBits = 16;
 8000a06:	2310      	movs	r3, #16
 8000a08:	61fb      	str	r3, [r7, #28]
			break;
 8000a0a:	e003      	b.n	8000a14 <Grayscale_Init+0x60>

		default:
			printf("MY9221: GRAYSCALE BAD INPUT (Grayscale_Init)");
 8000a0c:	4822      	ldr	r0, [pc, #136]	; (8000a98 <Grayscale_Init+0xe4>)
 8000a0e:	f002 f98f 	bl	8002d30 <iprintf>
			break;
 8000a12:	bf00      	nop
	}

	for (Frame = 11; Frame >= 0; --Frame)
 8000a14:	230b      	movs	r3, #11
 8000a16:	61bb      	str	r3, [r7, #24]
 8000a18:	e02e      	b.n	8000a78 <Grayscale_Init+0xc4>
	{
		for (Bit = 0; Bit < GrayscaleBits; ++Bit)
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	e00f      	b.n	8000a40 <Grayscale_Init+0x8c>
		{
			GrArr[Frame*16+Bit] = ClrArr[Bit];
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	441a      	add	r2, r3
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	0119      	lsls	r1, r3, #4
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	440b      	add	r3, r1
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	68f9      	ldr	r1, [r7, #12]
 8000a34:	440b      	add	r3, r1
 8000a36:	6812      	ldr	r2, [r2, #0]
 8000a38:	601a      	str	r2, [r3, #0]
		for (Bit = 0; Bit < GrayscaleBits; ++Bit)
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	dbeb      	blt.n	8000a20 <Grayscale_Init+0x6c>
		}
		for (Bit = GrayscaleBits; Bit < (16-GrayscaleBits); ++Bit)
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	e00b      	b.n	8000a66 <Grayscale_Init+0xb2>
		{
			GrArr[Frame*16+Bit] = 0;
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	011a      	lsls	r2, r3, #4
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	4413      	add	r3, r2
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
		for (Bit = GrayscaleBits; Bit < (16-GrayscaleBits); ++Bit)
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	3301      	adds	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	f1c3 0310 	rsb	r3, r3, #16
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	dbed      	blt.n	8000a4e <Grayscale_Init+0x9a>
	for (Frame = 11; Frame >= 0; --Frame)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	3b01      	subs	r3, #1
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	dacd      	bge.n	8000a1a <Grayscale_Init+0x66>
		}

	}
}
 8000a7e:	bf00      	nop
 8000a80:	3720      	adds	r7, #32
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	08003b70 	.word	0x08003b70
 8000a8c:	08003b94 	.word	0x08003b94
 8000a90:	08003bb8 	.word	0x08003bb8
 8000a94:	08003bdc 	.word	0x08003bdc
 8000a98:	08004038 	.word	0x08004038

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa2:	f000 fbe1 	bl	8001268 <HAL_Init>

  /* USER CODE BEGIN Init */
  CMDArray_Init(CMDArray, hspd, bs, gck, sep, osc, pol, cntset, onest);
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	9304      	str	r3, [sp, #16]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	9303      	str	r3, [sp, #12]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	9302      	str	r3, [sp, #8]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	9301      	str	r3, [sp, #4]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	2300      	movs	r3, #0
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4811      	ldr	r0, [pc, #68]	; (8000b08 <main+0x6c>)
 8000ac2:	f7ff fd55 	bl	8000570 <CMDArray_Init>
  Grayscale_Init(GrayscaleArray, bs, ColorArray);
 8000ac6:	4a11      	ldr	r2, [pc, #68]	; (8000b0c <main+0x70>)
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4811      	ldr	r0, [pc, #68]	; (8000b10 <main+0x74>)
 8000acc:	f7ff ff72 	bl	80009b4 <Grayscale_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad0:	f000 f824 	bl	8000b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad4:	f000 f978 	bl	8000dc8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000ad8:	f000 f88a 	bl	8000bf0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000adc:	f000 f8fe 	bl	8000cdc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim3);
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		// start the pwm
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	480c      	ldr	r0, [pc, #48]	; (8000b14 <main+0x78>)
 8000ae4:	f001 fbaa 	bl	800223c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	480b      	ldr	r0, [pc, #44]	; (8000b18 <main+0x7c>)
 8000aec:	f001 fba6 	bl	800223c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000af0:	4808      	ldr	r0, [pc, #32]	; (8000b14 <main+0x78>)
 8000af2:	f001 fb4a 	bl	800218a <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  htim3.Instance->CCR1 = (int)(360 * 50 / 100);	//50% duty cycle
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <main+0x78>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	22b4      	movs	r2, #180	; 0xb4
 8000afc:	635a      	str	r2, [r3, #52]	; 0x34
  htim4.Instance->CCR1 = (int)(360 * 50 / 100);
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <main+0x7c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	22b4      	movs	r2, #180	; 0xb4
 8000b04:	635a      	str	r2, [r3, #52]	; 0x34
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <main+0x6a>
 8000b08:	200003b8 	.word	0x200003b8
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	200000b8 	.word	0x200000b8
 8000b14:	20000438 	.word	0x20000438
 8000b18:	200003f8 	.word	0x200003f8

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b094      	sub	sp, #80	; 0x50
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0320 	add.w	r3, r7, #32
 8000b26:	2230      	movs	r2, #48	; 0x30
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f002 f8f8 	bl	8002d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <SystemClock_Config+0xcc>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	4a27      	ldr	r2, [pc, #156]	; (8000be8 <SystemClock_Config+0xcc>)
 8000b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b50:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <SystemClock_Config+0xcc>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <SystemClock_Config+0xd0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a21      	ldr	r2, [pc, #132]	; (8000bec <SystemClock_Config+0xd0>)
 8000b66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <SystemClock_Config+0xd0>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b80:	2310      	movs	r3, #16
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b84:	2302      	movs	r3, #2
 8000b86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b90:	23a8      	movs	r3, #168	; 0xa8
 8000b92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000b98:	2305      	movs	r3, #5
 8000b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9c:	f107 0320 	add.w	r3, r7, #32
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 fe99 	bl	80018d8 <HAL_RCC_OscConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bac:	f000 f96c 	bl	8000e88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bbc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	2105      	movs	r1, #5
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 f8f2 	bl	8001db8 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bda:	f000 f955 	bl	8000e88 <Error_Handler>
  }
}
 8000bde:	bf00      	nop
 8000be0:	3750      	adds	r7, #80	; 0x50
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40007000 	.word	0x40007000

08000bf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08e      	sub	sp, #56	; 0x38
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c04:	f107 0320 	add.w	r3, r7, #32
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
 8000c1c:	615a      	str	r2, [r3, #20]
 8000c1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <MX_TIM3_Init+0xe4>)
 8000c22:	4a2d      	ldr	r2, [pc, #180]	; (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c26:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <MX_TIM3_Init+0xe4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <MX_TIM3_Init+0xe4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168-1;
 8000c32:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <MX_TIM3_Init+0xe4>)
 8000c34:	22a7      	movs	r2, #167	; 0xa7
 8000c36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <MX_TIM3_Init+0xe4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <MX_TIM3_Init+0xe4>)
 8000c40:	2280      	movs	r2, #128	; 0x80
 8000c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c44:	4823      	ldr	r0, [pc, #140]	; (8000cd4 <MX_TIM3_Init+0xe4>)
 8000c46:	f001 fa75 	bl	8002134 <HAL_TIM_Base_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000c50:	f000 f91a 	bl	8000e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	481c      	ldr	r0, [pc, #112]	; (8000cd4 <MX_TIM3_Init+0xe4>)
 8000c62:	f001 fbef 	bl	8002444 <HAL_TIM_ConfigClockSource>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000c6c:	f000 f90c 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c70:	4818      	ldr	r0, [pc, #96]	; (8000cd4 <MX_TIM3_Init+0xe4>)
 8000c72:	f001 faae 	bl	80021d2 <HAL_TIM_PWM_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000c7c:	f000 f904 	bl	8000e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c88:	f107 0320 	add.w	r3, r7, #32
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4811      	ldr	r0, [pc, #68]	; (8000cd4 <MX_TIM3_Init+0xe4>)
 8000c90:	f001 ffa0 	bl	8002bd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000c9a:	f000 f8f5 	bl	8000e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c9e:	2360      	movs	r3, #96	; 0x60
 8000ca0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <MX_TIM3_Init+0xe4>)
 8000cb6:	f001 faff 	bl	80022b8 <HAL_TIM_PWM_ConfigChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000cc0:	f000 f8e2 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <MX_TIM3_Init+0xe4>)
 8000cc6:	f000 f949 	bl	8000f5c <HAL_TIM_MspPostInit>

}
 8000cca:	bf00      	nop
 8000ccc:	3738      	adds	r7, #56	; 0x38
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000438 	.word	0x20000438
 8000cd8:	40000400 	.word	0x40000400

08000cdc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	; 0x38
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf0:	f107 0320 	add.w	r3, r7, #32
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
 8000d08:	615a      	str	r2, [r3, #20]
 8000d0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d0c:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <MX_TIM4_Init+0xe4>)
 8000d0e:	4a2d      	ldr	r2, [pc, #180]	; (8000dc4 <MX_TIM4_Init+0xe8>)
 8000d10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d12:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <MX_TIM4_Init+0xe4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d18:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <MX_TIM4_Init+0xe4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 336-1;
 8000d1e:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <MX_TIM4_Init+0xe4>)
 8000d20:	f240 124f 	movw	r2, #335	; 0x14f
 8000d24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <MX_TIM4_Init+0xe4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d2c:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <MX_TIM4_Init+0xe4>)
 8000d2e:	2280      	movs	r2, #128	; 0x80
 8000d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d32:	4823      	ldr	r0, [pc, #140]	; (8000dc0 <MX_TIM4_Init+0xe4>)
 8000d34:	f001 f9fe 	bl	8002134 <HAL_TIM_Base_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000d3e:	f000 f8a3 	bl	8000e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	481c      	ldr	r0, [pc, #112]	; (8000dc0 <MX_TIM4_Init+0xe4>)
 8000d50:	f001 fb78 	bl	8002444 <HAL_TIM_ConfigClockSource>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d5a:	f000 f895 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d5e:	4818      	ldr	r0, [pc, #96]	; (8000dc0 <MX_TIM4_Init+0xe4>)
 8000d60:	f001 fa37 	bl	80021d2 <HAL_TIM_PWM_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000d6a:	f000 f88d 	bl	8000e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d76:	f107 0320 	add.w	r3, r7, #32
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4810      	ldr	r0, [pc, #64]	; (8000dc0 <MX_TIM4_Init+0xe4>)
 8000d7e:	f001 ff29 	bl	8002bd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d88:	f000 f87e 	bl	8000e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d8c:	2360      	movs	r3, #96	; 0x60
 8000d8e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	4619      	mov	r1, r3
 8000da2:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <MX_TIM4_Init+0xe4>)
 8000da4:	f001 fa88 	bl	80022b8 <HAL_TIM_PWM_ConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000dae:	f000 f86b 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000db2:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <MX_TIM4_Init+0xe4>)
 8000db4:	f000 f8d2 	bl	8000f5c <HAL_TIM_MspPostInit>

}
 8000db8:	bf00      	nop
 8000dba:	3738      	adds	r7, #56	; 0x38
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200003f8 	.word	0x200003f8
 8000dc4:	40000800 	.word	0x40000800

08000dc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <MX_GPIO_Init+0xb8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a26      	ldr	r2, [pc, #152]	; (8000e80 <MX_GPIO_Init+0xb8>)
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <MX_GPIO_Init+0xb8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <MX_GPIO_Init+0xb8>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a1f      	ldr	r2, [pc, #124]	; (8000e80 <MX_GPIO_Init+0xb8>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <MX_GPIO_Init+0xb8>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <MX_GPIO_Init+0xb8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a18      	ldr	r2, [pc, #96]	; (8000e80 <MX_GPIO_Init+0xb8>)
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <MX_GPIO_Init+0xb8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e38:	4812      	ldr	r0, [pc, #72]	; (8000e84 <MX_GPIO_Init+0xbc>)
 8000e3a:	f000 fd33 	bl	80018a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	4619      	mov	r1, r3
 8000e52:	480c      	ldr	r0, [pc, #48]	; (8000e84 <MX_GPIO_Init+0xbc>)
 8000e54:	f000 fb8c 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <MX_GPIO_Init+0xbc>)
 8000e72:	f000 fb7d 	bl	8001570 <HAL_GPIO_Init>

}
 8000e76:	bf00      	nop
 8000e78:	3720      	adds	r7, #32
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020800 	.word	0x40020800

08000e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <Error_Handler+0x6>

08000e90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <HAL_MspInit+0x4c>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <HAL_MspInit+0x4c>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HAL_MspInit+0x4c>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_MspInit+0x4c>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	4a08      	ldr	r2, [pc, #32]	; (8000edc <HAL_MspInit+0x4c>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_MspInit+0x4c>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ece:	2007      	movs	r0, #7
 8000ed0:	f000 fb0c 	bl	80014ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40023800 	.word	0x40023800

08000ee0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a18      	ldr	r2, [pc, #96]	; (8000f50 <HAL_TIM_Base_MspInit+0x70>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d116      	bne.n	8000f20 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_TIM_Base_MspInit+0x74>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a16      	ldr	r2, [pc, #88]	; (8000f54 <HAL_TIM_Base_MspInit+0x74>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_TIM_Base_MspInit+0x74>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	201d      	movs	r0, #29
 8000f14:	f000 faf5 	bl	8001502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f18:	201d      	movs	r0, #29
 8000f1a:	f000 fb0e 	bl	800153a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f1e:	e012      	b.n	8000f46 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0c      	ldr	r2, [pc, #48]	; (8000f58 <HAL_TIM_Base_MspInit+0x78>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d10d      	bne.n	8000f46 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_TIM_Base_MspInit+0x74>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <HAL_TIM_Base_MspInit+0x74>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_TIM_Base_MspInit+0x74>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40000400 	.word	0x40000400
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40000800 	.word	0x40000800

08000f5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a24      	ldr	r2, [pc, #144]	; (800100c <HAL_TIM_MspPostInit+0xb0>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d11e      	bne.n	8000fbc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <HAL_TIM_MspPostInit+0xb4>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a22      	ldr	r2, [pc, #136]	; (8001010 <HAL_TIM_MspPostInit+0xb4>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <HAL_TIM_MspPostInit+0xb4>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f9a:	2340      	movs	r3, #64	; 0x40
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000faa:	2302      	movs	r3, #2
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4817      	ldr	r0, [pc, #92]	; (8001014 <HAL_TIM_MspPostInit+0xb8>)
 8000fb6:	f000 fadb 	bl	8001570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000fba:	e023      	b.n	8001004 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a15      	ldr	r2, [pc, #84]	; (8001018 <HAL_TIM_MspPostInit+0xbc>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d11e      	bne.n	8001004 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_TIM_MspPostInit+0xb4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a10      	ldr	r2, [pc, #64]	; (8001010 <HAL_TIM_MspPostInit+0xb4>)
 8000fd0:	f043 0308 	orr.w	r3, r3, #8
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_TIM_MspPostInit+0xb4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0308 	and.w	r3, r3, #8
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4807      	ldr	r0, [pc, #28]	; (800101c <HAL_TIM_MspPostInit+0xc0>)
 8001000:	f000 fab6 	bl	8001570 <HAL_GPIO_Init>
}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40000400 	.word	0x40000400
 8001010:	40023800 	.word	0x40023800
 8001014:	40020000 	.word	0x40020000
 8001018:	40000800 	.word	0x40000800
 800101c:	40020c00 	.word	0x40020c00

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <NMI_Handler+0x4>

08001026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <MemManage_Handler+0x4>

08001032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <UsageFault_Handler+0x4>

0800103e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106c:	f000 f94e 	bl	800130c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  GPIOC->ODR ^= (1<<9);
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <TIM3_IRQHandler+0x24>)
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <TIM3_IRQHandler+0x24>)
 800107e:	f483 7300 	eor.w	r3, r3, #512	; 0x200
 8001082:	6153      	str	r3, [r2, #20]

  /* USER CODE END TIM3_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim3,TIM_IT_UPDATE);
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <TIM3_IRQHandler+0x28>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f06f 0201 	mvn.w	r2, #1
 800108c:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM3_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	40020800 	.word	0x40020800
 800109c:	20000438 	.word	0x20000438

080010a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	e00a      	b.n	80010c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010b2:	f3af 8000 	nop.w
 80010b6:	4601      	mov	r1, r0
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	60ba      	str	r2, [r7, #8]
 80010be:	b2ca      	uxtb	r2, r1
 80010c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dbf0      	blt.n	80010b2 <_read+0x12>
	}

return len;
 80010d0:	687b      	ldr	r3, [r7, #4]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	e009      	b.n	8001100 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	60ba      	str	r2, [r7, #8]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	429a      	cmp	r2, r3
 8001106:	dbf1      	blt.n	80010ec <_write+0x12>
	}
	return len;
 8001108:	687b      	ldr	r3, [r7, #4]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <_close>:

int _close(int file)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
	return -1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800113a:	605a      	str	r2, [r3, #4]
	return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_isatty>:

int _isatty(int file)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	return 1;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
	return 0;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001184:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <_sbrk+0x5c>)
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <_sbrk+0x60>)
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <_sbrk+0x64>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <_sbrk+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d207      	bcs.n	80011bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ac:	f001 fd8e 	bl	8002ccc <__errno>
 80011b0:	4602      	mov	r2, r0
 80011b2:	230c      	movs	r3, #12
 80011b4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ba:	e009      	b.n	80011d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <_sbrk+0x64>)
 80011cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ce:	68fb      	ldr	r3, [r7, #12]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20020000 	.word	0x20020000
 80011dc:	00000400 	.word	0x00000400
 80011e0:	200000ac 	.word	0x200000ac
 80011e4:	20000480 	.word	0x20000480

080011e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <SystemInit+0x28>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f2:	4a07      	ldr	r2, [pc, #28]	; (8001210 <SystemInit+0x28>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <SystemInit+0x28>)
 80011fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001202:	609a      	str	r2, [r3, #8]
#endif
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800124c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001218:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800121a:	e003      	b.n	8001224 <LoopCopyDataInit>

0800121c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800121e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001220:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001222:	3104      	adds	r1, #4

08001224 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001224:	480b      	ldr	r0, [pc, #44]	; (8001254 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001228:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800122a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800122c:	d3f6      	bcc.n	800121c <CopyDataInit>
  ldr  r2, =_sbss
 800122e:	4a0b      	ldr	r2, [pc, #44]	; (800125c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001230:	e002      	b.n	8001238 <LoopFillZerobss>

08001232 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001232:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001234:	f842 3b04 	str.w	r3, [r2], #4

08001238 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800123a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800123c:	d3f9      	bcc.n	8001232 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800123e:	f7ff ffd3 	bl	80011e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001242:	f001 fd49 	bl	8002cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001246:	f7ff fc29 	bl	8000a9c <main>
  bx  lr    
 800124a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800124c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001250:	08004120 	.word	0x08004120
  ldr  r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001258:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 800125c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001260:	20000480 	.word	0x20000480

08001264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001264:	e7fe      	b.n	8001264 <ADC_IRQHandler>
	...

08001268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <HAL_Init+0x40>)
 8001272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_Init+0x40>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <HAL_Init+0x40>)
 800127e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <HAL_Init+0x40>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <HAL_Init+0x40>)
 800128a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001290:	2003      	movs	r0, #3
 8001292:	f000 f92b 	bl	80014ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001296:	2000      	movs	r0, #0
 8001298:	f000 f808 	bl	80012ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800129c:	f7ff fdf8 	bl	8000e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023c00 	.word	0x40023c00

080012ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_InitTick+0x54>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_InitTick+0x58>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f943 	bl	8001556 <HAL_SYSTICK_Config>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00e      	b.n	80012f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b0f      	cmp	r3, #15
 80012de:	d80a      	bhi.n	80012f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e0:	2200      	movs	r2, #0
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012e8:	f000 f90b 	bl	8001502 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ec:	4a06      	ldr	r2, [pc, #24]	; (8001308 <HAL_InitTick+0x5c>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e000      	b.n	80012f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000020 	.word	0x20000020
 8001304:	20000028 	.word	0x20000028
 8001308:	20000024 	.word	0x20000024

0800130c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_IncTick+0x20>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_IncTick+0x24>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4413      	add	r3, r2
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <HAL_IncTick+0x24>)
 800131e:	6013      	str	r3, [r2, #0]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000028 	.word	0x20000028
 8001330:	20000478 	.word	0x20000478

08001334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return uwTick;
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <HAL_GetTick+0x14>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000478 	.word	0x20000478

0800134c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001368:	4013      	ands	r3, r2
 800136a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800137c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137e:	4a04      	ldr	r2, [pc, #16]	; (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	60d3      	str	r3, [r2, #12]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <__NVIC_GetPriorityGrouping+0x18>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	f003 0307 	and.w	r3, r3, #7
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db0b      	blt.n	80013da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f003 021f 	and.w	r2, r3, #31
 80013c8:	4907      	ldr	r1, [pc, #28]	; (80013e8 <__NVIC_EnableIRQ+0x38>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	095b      	lsrs	r3, r3, #5
 80013d0:	2001      	movs	r0, #1
 80013d2:	fa00 f202 	lsl.w	r2, r0, r2
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000e100 	.word	0xe000e100

080013ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db0a      	blt.n	8001416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	490c      	ldr	r1, [pc, #48]	; (8001438 <__NVIC_SetPriority+0x4c>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	0112      	lsls	r2, r2, #4
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	440b      	add	r3, r1
 8001410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001414:	e00a      	b.n	800142c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4908      	ldr	r1, [pc, #32]	; (800143c <__NVIC_SetPriority+0x50>)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	3b04      	subs	r3, #4
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	440b      	add	r3, r1
 800142a:	761a      	strb	r2, [r3, #24]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000e100 	.word	0xe000e100
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f1c3 0307 	rsb	r3, r3, #7
 800145a:	2b04      	cmp	r3, #4
 800145c:	bf28      	it	cs
 800145e:	2304      	movcs	r3, #4
 8001460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3304      	adds	r3, #4
 8001466:	2b06      	cmp	r3, #6
 8001468:	d902      	bls.n	8001470 <NVIC_EncodePriority+0x30>
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3b03      	subs	r3, #3
 800146e:	e000      	b.n	8001472 <NVIC_EncodePriority+0x32>
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	401a      	ands	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001488:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	43d9      	mvns	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	4313      	orrs	r3, r2
         );
}
 800149a:	4618      	mov	r0, r3
 800149c:	3724      	adds	r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b8:	d301      	bcc.n	80014be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00f      	b.n	80014de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014be:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <SysTick_Config+0x40>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c6:	210f      	movs	r1, #15
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014cc:	f7ff ff8e 	bl	80013ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <SysTick_Config+0x40>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d6:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <SysTick_Config+0x40>)
 80014d8:	2207      	movs	r2, #7
 80014da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	e000e010 	.word	0xe000e010

080014ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff29 	bl	800134c <__NVIC_SetPriorityGrouping>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
 800150e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001514:	f7ff ff3e 	bl	8001394 <__NVIC_GetPriorityGrouping>
 8001518:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	6978      	ldr	r0, [r7, #20]
 8001520:	f7ff ff8e 	bl	8001440 <NVIC_EncodePriority>
 8001524:	4602      	mov	r2, r0
 8001526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff5d 	bl	80013ec <__NVIC_SetPriority>
}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff31 	bl	80013b0 <__NVIC_EnableIRQ>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ffa2 	bl	80014a8 <SysTick_Config>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001570:	b480      	push	{r7}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
 800158a:	e16b      	b.n	8001864 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800158c:	2201      	movs	r2, #1
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	f040 815a 	bne.w	800185e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d00b      	beq.n	80015ca <HAL_GPIO_Init+0x5a>
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d007      	beq.n	80015ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015be:	2b11      	cmp	r3, #17
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b12      	cmp	r3, #18
 80015c8:	d130      	bne.n	800162c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	2203      	movs	r2, #3
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001600:	2201      	movs	r2, #1
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	091b      	lsrs	r3, r3, #4
 8001616:	f003 0201 	and.w	r2, r3, #1
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	2203      	movs	r2, #3
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0xfc>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b12      	cmp	r3, #18
 800166a:	d123      	bne.n	80016b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	08da      	lsrs	r2, r3, #3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3208      	adds	r2, #8
 8001674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	220f      	movs	r2, #15
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	691a      	ldr	r2, [r3, #16]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	08da      	lsrs	r2, r3, #3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3208      	adds	r2, #8
 80016ae:	69b9      	ldr	r1, [r7, #24]
 80016b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0203 	and.w	r2, r3, #3
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 80b4 	beq.w	800185e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b5f      	ldr	r3, [pc, #380]	; (8001878 <HAL_GPIO_Init+0x308>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	4a5e      	ldr	r2, [pc, #376]	; (8001878 <HAL_GPIO_Init+0x308>)
 8001700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001704:	6453      	str	r3, [r2, #68]	; 0x44
 8001706:	4b5c      	ldr	r3, [pc, #368]	; (8001878 <HAL_GPIO_Init+0x308>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001712:	4a5a      	ldr	r2, [pc, #360]	; (800187c <HAL_GPIO_Init+0x30c>)
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	220f      	movs	r2, #15
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a51      	ldr	r2, [pc, #324]	; (8001880 <HAL_GPIO_Init+0x310>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d02b      	beq.n	8001796 <HAL_GPIO_Init+0x226>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a50      	ldr	r2, [pc, #320]	; (8001884 <HAL_GPIO_Init+0x314>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d025      	beq.n	8001792 <HAL_GPIO_Init+0x222>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4f      	ldr	r2, [pc, #316]	; (8001888 <HAL_GPIO_Init+0x318>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d01f      	beq.n	800178e <HAL_GPIO_Init+0x21e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4e      	ldr	r2, [pc, #312]	; (800188c <HAL_GPIO_Init+0x31c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d019      	beq.n	800178a <HAL_GPIO_Init+0x21a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4d      	ldr	r2, [pc, #308]	; (8001890 <HAL_GPIO_Init+0x320>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d013      	beq.n	8001786 <HAL_GPIO_Init+0x216>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4c      	ldr	r2, [pc, #304]	; (8001894 <HAL_GPIO_Init+0x324>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d00d      	beq.n	8001782 <HAL_GPIO_Init+0x212>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4b      	ldr	r2, [pc, #300]	; (8001898 <HAL_GPIO_Init+0x328>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d007      	beq.n	800177e <HAL_GPIO_Init+0x20e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4a      	ldr	r2, [pc, #296]	; (800189c <HAL_GPIO_Init+0x32c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d101      	bne.n	800177a <HAL_GPIO_Init+0x20a>
 8001776:	2307      	movs	r3, #7
 8001778:	e00e      	b.n	8001798 <HAL_GPIO_Init+0x228>
 800177a:	2308      	movs	r3, #8
 800177c:	e00c      	b.n	8001798 <HAL_GPIO_Init+0x228>
 800177e:	2306      	movs	r3, #6
 8001780:	e00a      	b.n	8001798 <HAL_GPIO_Init+0x228>
 8001782:	2305      	movs	r3, #5
 8001784:	e008      	b.n	8001798 <HAL_GPIO_Init+0x228>
 8001786:	2304      	movs	r3, #4
 8001788:	e006      	b.n	8001798 <HAL_GPIO_Init+0x228>
 800178a:	2303      	movs	r3, #3
 800178c:	e004      	b.n	8001798 <HAL_GPIO_Init+0x228>
 800178e:	2302      	movs	r3, #2
 8001790:	e002      	b.n	8001798 <HAL_GPIO_Init+0x228>
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <HAL_GPIO_Init+0x228>
 8001796:	2300      	movs	r3, #0
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	f002 0203 	and.w	r2, r2, #3
 800179e:	0092      	lsls	r2, r2, #2
 80017a0:	4093      	lsls	r3, r2
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a8:	4934      	ldr	r1, [pc, #208]	; (800187c <HAL_GPIO_Init+0x30c>)
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	089b      	lsrs	r3, r3, #2
 80017ae:	3302      	adds	r3, #2
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b6:	4b3a      	ldr	r3, [pc, #232]	; (80018a0 <HAL_GPIO_Init+0x330>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017da:	4a31      	ldr	r2, [pc, #196]	; (80018a0 <HAL_GPIO_Init+0x330>)
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017e0:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <HAL_GPIO_Init+0x330>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001804:	4a26      	ldr	r2, [pc, #152]	; (80018a0 <HAL_GPIO_Init+0x330>)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800180a:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <HAL_GPIO_Init+0x330>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800182e:	4a1c      	ldr	r2, [pc, #112]	; (80018a0 <HAL_GPIO_Init+0x330>)
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001834:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <HAL_GPIO_Init+0x330>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001858:	4a11      	ldr	r2, [pc, #68]	; (80018a0 <HAL_GPIO_Init+0x330>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3301      	adds	r3, #1
 8001862:	61fb      	str	r3, [r7, #28]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	2b0f      	cmp	r3, #15
 8001868:	f67f ae90 	bls.w	800158c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800186c:	bf00      	nop
 800186e:	3724      	adds	r7, #36	; 0x24
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	40023800 	.word	0x40023800
 800187c:	40013800 	.word	0x40013800
 8001880:	40020000 	.word	0x40020000
 8001884:	40020400 	.word	0x40020400
 8001888:	40020800 	.word	0x40020800
 800188c:	40020c00 	.word	0x40020c00
 8001890:	40021000 	.word	0x40021000
 8001894:	40021400 	.word	0x40021400
 8001898:	40021800 	.word	0x40021800
 800189c:	40021c00 	.word	0x40021c00
 80018a0:	40013c00 	.word	0x40013c00

080018a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
 80018b0:	4613      	mov	r3, r2
 80018b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b4:	787b      	ldrb	r3, [r7, #1]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ba:	887a      	ldrh	r2, [r7, #2]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018c0:	e003      	b.n	80018ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018c2:	887b      	ldrh	r3, [r7, #2]
 80018c4:	041a      	lsls	r2, r3, #16
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	619a      	str	r2, [r3, #24]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e25b      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d075      	beq.n	80019e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018f6:	4ba3      	ldr	r3, [pc, #652]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d00c      	beq.n	800191c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001902:	4ba0      	ldr	r3, [pc, #640]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800190a:	2b08      	cmp	r3, #8
 800190c:	d112      	bne.n	8001934 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800190e:	4b9d      	ldr	r3, [pc, #628]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800191a:	d10b      	bne.n	8001934 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	4b99      	ldr	r3, [pc, #612]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d05b      	beq.n	80019e0 <HAL_RCC_OscConfig+0x108>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d157      	bne.n	80019e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e236      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193c:	d106      	bne.n	800194c <HAL_RCC_OscConfig+0x74>
 800193e:	4b91      	ldr	r3, [pc, #580]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a90      	ldr	r2, [pc, #576]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e01d      	b.n	8001988 <HAL_RCC_OscConfig+0xb0>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001954:	d10c      	bne.n	8001970 <HAL_RCC_OscConfig+0x98>
 8001956:	4b8b      	ldr	r3, [pc, #556]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a8a      	ldr	r2, [pc, #552]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 800195c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b88      	ldr	r3, [pc, #544]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a87      	ldr	r2, [pc, #540]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e00b      	b.n	8001988 <HAL_RCC_OscConfig+0xb0>
 8001970:	4b84      	ldr	r3, [pc, #528]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a83      	ldr	r2, [pc, #524]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b81      	ldr	r3, [pc, #516]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a80      	ldr	r2, [pc, #512]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d013      	beq.n	80019b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff fcd0 	bl	8001334 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff fccc 	bl	8001334 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e1fb      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b76      	ldr	r3, [pc, #472]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0xc0>
 80019b6:	e014      	b.n	80019e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fcbc 	bl	8001334 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff fcb8 	bl	8001334 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	; 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e1e7      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d2:	4b6c      	ldr	r3, [pc, #432]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0xe8>
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d063      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ee:	4b65      	ldr	r3, [pc, #404]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019fa:	4b62      	ldr	r3, [pc, #392]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d11c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a06:	4b5f      	ldr	r3, [pc, #380]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d116      	bne.n	8001a40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	4b5c      	ldr	r3, [pc, #368]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_RCC_OscConfig+0x152>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e1bb      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4b56      	ldr	r3, [pc, #344]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4952      	ldr	r1, [pc, #328]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3e:	e03a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d020      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a48:	4b4f      	ldr	r3, [pc, #316]	; (8001b88 <HAL_RCC_OscConfig+0x2b0>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fc71 	bl	8001334 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a56:	f7ff fc6d 	bl	8001334 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e19c      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	4b46      	ldr	r3, [pc, #280]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b43      	ldr	r3, [pc, #268]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4940      	ldr	r1, [pc, #256]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8a:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <HAL_RCC_OscConfig+0x2b0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff fc50 	bl	8001334 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a98:	f7ff fc4c 	bl	8001334 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e17b      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d030      	beq.n	8001b24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d016      	beq.n	8001af8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aca:	4b30      	ldr	r3, [pc, #192]	; (8001b8c <HAL_RCC_OscConfig+0x2b4>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fc30 	bl	8001334 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fc2c 	bl	8001334 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e15b      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x200>
 8001af6:	e015      	b.n	8001b24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <HAL_RCC_OscConfig+0x2b4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afe:	f7ff fc19 	bl	8001334 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b06:	f7ff fc15 	bl	8001334 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e144      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80a0 	beq.w	8001c72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10f      	bne.n	8001b62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_RCC_OscConfig+0x2b8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d121      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_RCC_OscConfig+0x2b8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_RCC_OscConfig+0x2b8>)
 8001b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff fbdb 	bl	8001334 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	e011      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2ce>
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	42470000 	.word	0x42470000
 8001b8c:	42470e80 	.word	0x42470e80
 8001b90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b94:	f7ff fbce 	bl	8001334 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e0fd      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba6:	4b81      	ldr	r3, [pc, #516]	; (8001dac <HAL_RCC_OscConfig+0x4d4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d106      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x2f0>
 8001bba:	4b7d      	ldr	r3, [pc, #500]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbe:	4a7c      	ldr	r2, [pc, #496]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc6:	e01c      	b.n	8001c02 <HAL_RCC_OscConfig+0x32a>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b05      	cmp	r3, #5
 8001bce:	d10c      	bne.n	8001bea <HAL_RCC_OscConfig+0x312>
 8001bd0:	4b77      	ldr	r3, [pc, #476]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	4a76      	ldr	r2, [pc, #472]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	6713      	str	r3, [r2, #112]	; 0x70
 8001bdc:	4b74      	ldr	r3, [pc, #464]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be0:	4a73      	ldr	r2, [pc, #460]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6713      	str	r3, [r2, #112]	; 0x70
 8001be8:	e00b      	b.n	8001c02 <HAL_RCC_OscConfig+0x32a>
 8001bea:	4b71      	ldr	r3, [pc, #452]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bee:	4a70      	ldr	r2, [pc, #448]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf6:	4b6e      	ldr	r3, [pc, #440]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfa:	4a6d      	ldr	r2, [pc, #436]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001bfc:	f023 0304 	bic.w	r3, r3, #4
 8001c00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d015      	beq.n	8001c36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0a:	f7ff fb93 	bl	8001334 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7ff fb8f 	bl	8001334 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e0bc      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c28:	4b61      	ldr	r3, [pc, #388]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0ee      	beq.n	8001c12 <HAL_RCC_OscConfig+0x33a>
 8001c34:	e014      	b.n	8001c60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c36:	f7ff fb7d 	bl	8001334 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3c:	e00a      	b.n	8001c54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c3e:	f7ff fb79 	bl	8001334 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e0a6      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c54:	4b56      	ldr	r3, [pc, #344]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ee      	bne.n	8001c3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c66:	4b52      	ldr	r3, [pc, #328]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a51      	ldr	r2, [pc, #324]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 8092 	beq.w	8001da0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c7c:	4b4c      	ldr	r3, [pc, #304]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d05c      	beq.n	8001d42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d141      	bne.n	8001d14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c90:	4b48      	ldr	r3, [pc, #288]	; (8001db4 <HAL_RCC_OscConfig+0x4dc>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7ff fb4d 	bl	8001334 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7ff fb49 	bl	8001334 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e078      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb0:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f0      	bne.n	8001c9e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69da      	ldr	r2, [r3, #28]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	019b      	lsls	r3, r3, #6
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	085b      	lsrs	r3, r3, #1
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	041b      	lsls	r3, r3, #16
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cde:	061b      	lsls	r3, r3, #24
 8001ce0:	4933      	ldr	r1, [pc, #204]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce6:	4b33      	ldr	r3, [pc, #204]	; (8001db4 <HAL_RCC_OscConfig+0x4dc>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff fb22 	bl	8001334 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7ff fb1e 	bl	8001334 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e04d      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x41c>
 8001d12:	e045      	b.n	8001da0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d14:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <HAL_RCC_OscConfig+0x4dc>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1a:	f7ff fb0b 	bl	8001334 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d22:	f7ff fb07 	bl	8001334 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e036      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f0      	bne.n	8001d22 <HAL_RCC_OscConfig+0x44a>
 8001d40:	e02e      	b.n	8001da0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e029      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_RCC_OscConfig+0x4d8>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d11c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d115      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d76:	4013      	ands	r3, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d10d      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d106      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40007000 	.word	0x40007000
 8001db0:	40023800 	.word	0x40023800
 8001db4:	42470060 	.word	0x42470060

08001db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0cc      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dcc:	4b68      	ldr	r3, [pc, #416]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d90c      	bls.n	8001df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	4b65      	ldr	r3, [pc, #404]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de2:	4b63      	ldr	r3, [pc, #396]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0b8      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d020      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e0c:	4b59      	ldr	r3, [pc, #356]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	4a58      	ldr	r2, [pc, #352]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e24:	4b53      	ldr	r3, [pc, #332]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4a52      	ldr	r2, [pc, #328]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e30:	4b50      	ldr	r3, [pc, #320]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	494d      	ldr	r1, [pc, #308]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d044      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d107      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e56:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d119      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e07f      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d003      	beq.n	8001e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e76:	4b3f      	ldr	r3, [pc, #252]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e06f      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e86:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e067      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e96:	4b37      	ldr	r3, [pc, #220]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f023 0203 	bic.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4934      	ldr	r1, [pc, #208]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea8:	f7ff fa44 	bl	8001334 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f7ff fa40 	bl	8001334 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e04f      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 020c 	and.w	r2, r3, #12
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d1eb      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d20c      	bcs.n	8001f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e032      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4916      	ldr	r1, [pc, #88]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d009      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	490e      	ldr	r1, [pc, #56]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f3e:	f000 f821 	bl	8001f84 <HAL_RCC_GetSysClockFreq>
 8001f42:	4601      	mov	r1, r0
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	5cd3      	ldrb	r3, [r2, r3]
 8001f52:	fa21 f303 	lsr.w	r3, r1, r3
 8001f56:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff f9a4 	bl	80012ac <HAL_InitTick>

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023c00 	.word	0x40023c00
 8001f74:	40023800 	.word	0x40023800
 8001f78:	08004068 	.word	0x08004068
 8001f7c:	20000020 	.word	0x20000020
 8001f80:	20000024 	.word	0x20000024

08001f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	2300      	movs	r3, #0
 8001f94:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f9a:	4b63      	ldr	r3, [pc, #396]	; (8002128 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d007      	beq.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x32>
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d008      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x38>
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f040 80b4 	bne.w	8002118 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fb0:	4b5e      	ldr	r3, [pc, #376]	; (800212c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001fb2:	60bb      	str	r3, [r7, #8]
       break;
 8001fb4:	e0b3      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fb6:	4b5e      	ldr	r3, [pc, #376]	; (8002130 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001fb8:	60bb      	str	r3, [r7, #8]
      break;
 8001fba:	e0b0      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fbc:	4b5a      	ldr	r3, [pc, #360]	; (8002128 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fc4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fc6:	4b58      	ldr	r3, [pc, #352]	; (8002128 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d04a      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd2:	4b55      	ldr	r3, [pc, #340]	; (8002128 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	099b      	lsrs	r3, r3, #6
 8001fd8:	f04f 0400 	mov.w	r4, #0
 8001fdc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	ea03 0501 	and.w	r5, r3, r1
 8001fe8:	ea04 0602 	and.w	r6, r4, r2
 8001fec:	4629      	mov	r1, r5
 8001fee:	4632      	mov	r2, r6
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	f04f 0400 	mov.w	r4, #0
 8001ff8:	0154      	lsls	r4, r2, #5
 8001ffa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ffe:	014b      	lsls	r3, r1, #5
 8002000:	4619      	mov	r1, r3
 8002002:	4622      	mov	r2, r4
 8002004:	1b49      	subs	r1, r1, r5
 8002006:	eb62 0206 	sbc.w	r2, r2, r6
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	f04f 0400 	mov.w	r4, #0
 8002012:	0194      	lsls	r4, r2, #6
 8002014:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002018:	018b      	lsls	r3, r1, #6
 800201a:	1a5b      	subs	r3, r3, r1
 800201c:	eb64 0402 	sbc.w	r4, r4, r2
 8002020:	f04f 0100 	mov.w	r1, #0
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	00e2      	lsls	r2, r4, #3
 800202a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800202e:	00d9      	lsls	r1, r3, #3
 8002030:	460b      	mov	r3, r1
 8002032:	4614      	mov	r4, r2
 8002034:	195b      	adds	r3, r3, r5
 8002036:	eb44 0406 	adc.w	r4, r4, r6
 800203a:	f04f 0100 	mov.w	r1, #0
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	0262      	lsls	r2, r4, #9
 8002044:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002048:	0259      	lsls	r1, r3, #9
 800204a:	460b      	mov	r3, r1
 800204c:	4614      	mov	r4, r2
 800204e:	4618      	mov	r0, r3
 8002050:	4621      	mov	r1, r4
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f04f 0400 	mov.w	r4, #0
 8002058:	461a      	mov	r2, r3
 800205a:	4623      	mov	r3, r4
 800205c:	f7fe f908 	bl	8000270 <__aeabi_uldivmod>
 8002060:	4603      	mov	r3, r0
 8002062:	460c      	mov	r4, r1
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	e049      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002068:	4b2f      	ldr	r3, [pc, #188]	; (8002128 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	099b      	lsrs	r3, r3, #6
 800206e:	f04f 0400 	mov.w	r4, #0
 8002072:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	ea03 0501 	and.w	r5, r3, r1
 800207e:	ea04 0602 	and.w	r6, r4, r2
 8002082:	4629      	mov	r1, r5
 8002084:	4632      	mov	r2, r6
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	f04f 0400 	mov.w	r4, #0
 800208e:	0154      	lsls	r4, r2, #5
 8002090:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002094:	014b      	lsls	r3, r1, #5
 8002096:	4619      	mov	r1, r3
 8002098:	4622      	mov	r2, r4
 800209a:	1b49      	subs	r1, r1, r5
 800209c:	eb62 0206 	sbc.w	r2, r2, r6
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	f04f 0400 	mov.w	r4, #0
 80020a8:	0194      	lsls	r4, r2, #6
 80020aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020ae:	018b      	lsls	r3, r1, #6
 80020b0:	1a5b      	subs	r3, r3, r1
 80020b2:	eb64 0402 	sbc.w	r4, r4, r2
 80020b6:	f04f 0100 	mov.w	r1, #0
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	00e2      	lsls	r2, r4, #3
 80020c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020c4:	00d9      	lsls	r1, r3, #3
 80020c6:	460b      	mov	r3, r1
 80020c8:	4614      	mov	r4, r2
 80020ca:	195b      	adds	r3, r3, r5
 80020cc:	eb44 0406 	adc.w	r4, r4, r6
 80020d0:	f04f 0100 	mov.w	r1, #0
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	02a2      	lsls	r2, r4, #10
 80020da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020de:	0299      	lsls	r1, r3, #10
 80020e0:	460b      	mov	r3, r1
 80020e2:	4614      	mov	r4, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	4621      	mov	r1, r4
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f04f 0400 	mov.w	r4, #0
 80020ee:	461a      	mov	r2, r3
 80020f0:	4623      	mov	r3, r4
 80020f2:	f7fe f8bd 	bl	8000270 <__aeabi_uldivmod>
 80020f6:	4603      	mov	r3, r0
 80020f8:	460c      	mov	r4, r1
 80020fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	0c1b      	lsrs	r3, r3, #16
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	3301      	adds	r3, #1
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	fbb2 f3f3 	udiv	r3, r2, r3
 8002114:	60bb      	str	r3, [r7, #8]
      break;
 8002116:	e002      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800211a:	60bb      	str	r3, [r7, #8]
      break;
 800211c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800211e:	68bb      	ldr	r3, [r7, #8]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002128:	40023800 	.word	0x40023800
 800212c:	00f42400 	.word	0x00f42400
 8002130:	007a1200 	.word	0x007a1200

08002134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e01d      	b.n	8002182 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7fe fec0 	bl	8000ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3304      	adds	r3, #4
 8002170:	4619      	mov	r1, r3
 8002172:	4610      	mov	r0, r2
 8002174:	f000 fa1e 	bl	80025b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800218a:	b480      	push	{r7}
 800218c:	b085      	sub	sp, #20
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0201 	orr.w	r2, r2, #1
 80021a0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b06      	cmp	r3, #6
 80021b2:	d007      	beq.n	80021c4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e01d      	b.n	8002220 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d106      	bne.n	80021fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f815 	bl	8002228 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2202      	movs	r2, #2
 8002202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3304      	adds	r3, #4
 800220e:	4619      	mov	r1, r3
 8002210:	4610      	mov	r0, r2
 8002212:	f000 f9cf 	bl	80025b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2201      	movs	r2, #1
 800224c:	6839      	ldr	r1, [r7, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fc9a 	bl	8002b88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a15      	ldr	r2, [pc, #84]	; (80022b0 <HAL_TIM_PWM_Start+0x74>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d004      	beq.n	8002268 <HAL_TIM_PWM_Start+0x2c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a14      	ldr	r2, [pc, #80]	; (80022b4 <HAL_TIM_PWM_Start+0x78>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d101      	bne.n	800226c <HAL_TIM_PWM_Start+0x30>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_TIM_PWM_Start+0x32>
 800226c:	2300      	movs	r3, #0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002280:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b06      	cmp	r3, #6
 8002292:	d007      	beq.n	80022a4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40010000 	.word	0x40010000
 80022b4:	40010400 	.word	0x40010400

080022b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e0b4      	b.n	800243c <HAL_TIM_PWM_ConfigChannel+0x184>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2202      	movs	r2, #2
 80022de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b0c      	cmp	r3, #12
 80022e6:	f200 809f 	bhi.w	8002428 <HAL_TIM_PWM_ConfigChannel+0x170>
 80022ea:	a201      	add	r2, pc, #4	; (adr r2, 80022f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80022ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f0:	08002325 	.word	0x08002325
 80022f4:	08002429 	.word	0x08002429
 80022f8:	08002429 	.word	0x08002429
 80022fc:	08002429 	.word	0x08002429
 8002300:	08002365 	.word	0x08002365
 8002304:	08002429 	.word	0x08002429
 8002308:	08002429 	.word	0x08002429
 800230c:	08002429 	.word	0x08002429
 8002310:	080023a7 	.word	0x080023a7
 8002314:	08002429 	.word	0x08002429
 8002318:	08002429 	.word	0x08002429
 800231c:	08002429 	.word	0x08002429
 8002320:	080023e7 	.word	0x080023e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f9e2 	bl	80026f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699a      	ldr	r2, [r3, #24]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0208 	orr.w	r2, r2, #8
 800233e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699a      	ldr	r2, [r3, #24]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0204 	bic.w	r2, r2, #4
 800234e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6999      	ldr	r1, [r3, #24]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	619a      	str	r2, [r3, #24]
      break;
 8002362:	e062      	b.n	800242a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68b9      	ldr	r1, [r7, #8]
 800236a:	4618      	mov	r0, r3
 800236c:	f000 fa32 	bl	80027d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699a      	ldr	r2, [r3, #24]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800237e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699a      	ldr	r2, [r3, #24]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800238e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6999      	ldr	r1, [r3, #24]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	021a      	lsls	r2, r3, #8
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	619a      	str	r2, [r3, #24]
      break;
 80023a4:	e041      	b.n	800242a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68b9      	ldr	r1, [r7, #8]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 fa87 	bl	80028c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	69da      	ldr	r2, [r3, #28]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0208 	orr.w	r2, r2, #8
 80023c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	69da      	ldr	r2, [r3, #28]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0204 	bic.w	r2, r2, #4
 80023d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	69d9      	ldr	r1, [r3, #28]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	61da      	str	r2, [r3, #28]
      break;
 80023e4:	e021      	b.n	800242a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68b9      	ldr	r1, [r7, #8]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fadb 	bl	80029a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	69da      	ldr	r2, [r3, #28]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	69da      	ldr	r2, [r3, #28]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69d9      	ldr	r1, [r3, #28]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	021a      	lsls	r2, r3, #8
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	61da      	str	r2, [r3, #28]
      break;
 8002426:	e000      	b.n	800242a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002428:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_TIM_ConfigClockSource+0x18>
 8002458:	2302      	movs	r3, #2
 800245a:	e0a6      	b.n	80025aa <HAL_TIM_ConfigClockSource+0x166>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800247a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002482:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b40      	cmp	r3, #64	; 0x40
 8002492:	d067      	beq.n	8002564 <HAL_TIM_ConfigClockSource+0x120>
 8002494:	2b40      	cmp	r3, #64	; 0x40
 8002496:	d80b      	bhi.n	80024b0 <HAL_TIM_ConfigClockSource+0x6c>
 8002498:	2b10      	cmp	r3, #16
 800249a:	d073      	beq.n	8002584 <HAL_TIM_ConfigClockSource+0x140>
 800249c:	2b10      	cmp	r3, #16
 800249e:	d802      	bhi.n	80024a6 <HAL_TIM_ConfigClockSource+0x62>
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d06f      	beq.n	8002584 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80024a4:	e078      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	d06c      	beq.n	8002584 <HAL_TIM_ConfigClockSource+0x140>
 80024aa:	2b30      	cmp	r3, #48	; 0x30
 80024ac:	d06a      	beq.n	8002584 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80024ae:	e073      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024b0:	2b70      	cmp	r3, #112	; 0x70
 80024b2:	d00d      	beq.n	80024d0 <HAL_TIM_ConfigClockSource+0x8c>
 80024b4:	2b70      	cmp	r3, #112	; 0x70
 80024b6:	d804      	bhi.n	80024c2 <HAL_TIM_ConfigClockSource+0x7e>
 80024b8:	2b50      	cmp	r3, #80	; 0x50
 80024ba:	d033      	beq.n	8002524 <HAL_TIM_ConfigClockSource+0xe0>
 80024bc:	2b60      	cmp	r3, #96	; 0x60
 80024be:	d041      	beq.n	8002544 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80024c0:	e06a      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c6:	d066      	beq.n	8002596 <HAL_TIM_ConfigClockSource+0x152>
 80024c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024cc:	d017      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0xba>
      break;
 80024ce:	e063      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	6899      	ldr	r1, [r3, #8]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f000 fb32 	bl	8002b48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	609a      	str	r2, [r3, #8]
      break;
 80024fc:	e04c      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	6899      	ldr	r1, [r3, #8]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f000 fb1b 	bl	8002b48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002520:	609a      	str	r2, [r3, #8]
      break;
 8002522:	e039      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6859      	ldr	r1, [r3, #4]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	461a      	mov	r2, r3
 8002532:	f000 fa8f 	bl	8002a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2150      	movs	r1, #80	; 0x50
 800253c:	4618      	mov	r0, r3
 800253e:	f000 fae8 	bl	8002b12 <TIM_ITRx_SetConfig>
      break;
 8002542:	e029      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	461a      	mov	r2, r3
 8002552:	f000 faae 	bl	8002ab2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2160      	movs	r1, #96	; 0x60
 800255c:	4618      	mov	r0, r3
 800255e:	f000 fad8 	bl	8002b12 <TIM_ITRx_SetConfig>
      break;
 8002562:	e019      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	6859      	ldr	r1, [r3, #4]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	461a      	mov	r2, r3
 8002572:	f000 fa6f 	bl	8002a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2140      	movs	r1, #64	; 0x40
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fac8 	bl	8002b12 <TIM_ITRx_SetConfig>
      break;
 8002582:	e009      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	4610      	mov	r0, r2
 8002590:	f000 fabf 	bl	8002b12 <TIM_ITRx_SetConfig>
      break;
 8002594:	e000      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002596:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a40      	ldr	r2, [pc, #256]	; (80026c8 <TIM_Base_SetConfig+0x114>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d013      	beq.n	80025f4 <TIM_Base_SetConfig+0x40>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d2:	d00f      	beq.n	80025f4 <TIM_Base_SetConfig+0x40>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a3d      	ldr	r2, [pc, #244]	; (80026cc <TIM_Base_SetConfig+0x118>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d00b      	beq.n	80025f4 <TIM_Base_SetConfig+0x40>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a3c      	ldr	r2, [pc, #240]	; (80026d0 <TIM_Base_SetConfig+0x11c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d007      	beq.n	80025f4 <TIM_Base_SetConfig+0x40>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a3b      	ldr	r2, [pc, #236]	; (80026d4 <TIM_Base_SetConfig+0x120>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d003      	beq.n	80025f4 <TIM_Base_SetConfig+0x40>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a3a      	ldr	r2, [pc, #232]	; (80026d8 <TIM_Base_SetConfig+0x124>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d108      	bne.n	8002606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a2f      	ldr	r2, [pc, #188]	; (80026c8 <TIM_Base_SetConfig+0x114>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d02b      	beq.n	8002666 <TIM_Base_SetConfig+0xb2>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002614:	d027      	beq.n	8002666 <TIM_Base_SetConfig+0xb2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a2c      	ldr	r2, [pc, #176]	; (80026cc <TIM_Base_SetConfig+0x118>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d023      	beq.n	8002666 <TIM_Base_SetConfig+0xb2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a2b      	ldr	r2, [pc, #172]	; (80026d0 <TIM_Base_SetConfig+0x11c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d01f      	beq.n	8002666 <TIM_Base_SetConfig+0xb2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a2a      	ldr	r2, [pc, #168]	; (80026d4 <TIM_Base_SetConfig+0x120>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d01b      	beq.n	8002666 <TIM_Base_SetConfig+0xb2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a29      	ldr	r2, [pc, #164]	; (80026d8 <TIM_Base_SetConfig+0x124>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d017      	beq.n	8002666 <TIM_Base_SetConfig+0xb2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a28      	ldr	r2, [pc, #160]	; (80026dc <TIM_Base_SetConfig+0x128>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d013      	beq.n	8002666 <TIM_Base_SetConfig+0xb2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a27      	ldr	r2, [pc, #156]	; (80026e0 <TIM_Base_SetConfig+0x12c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00f      	beq.n	8002666 <TIM_Base_SetConfig+0xb2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a26      	ldr	r2, [pc, #152]	; (80026e4 <TIM_Base_SetConfig+0x130>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00b      	beq.n	8002666 <TIM_Base_SetConfig+0xb2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a25      	ldr	r2, [pc, #148]	; (80026e8 <TIM_Base_SetConfig+0x134>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d007      	beq.n	8002666 <TIM_Base_SetConfig+0xb2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a24      	ldr	r2, [pc, #144]	; (80026ec <TIM_Base_SetConfig+0x138>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d003      	beq.n	8002666 <TIM_Base_SetConfig+0xb2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a23      	ldr	r2, [pc, #140]	; (80026f0 <TIM_Base_SetConfig+0x13c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d108      	bne.n	8002678 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800266c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4313      	orrs	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <TIM_Base_SetConfig+0x114>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d003      	beq.n	80026ac <TIM_Base_SetConfig+0xf8>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a0c      	ldr	r2, [pc, #48]	; (80026d8 <TIM_Base_SetConfig+0x124>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d103      	bne.n	80026b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	615a      	str	r2, [r3, #20]
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40010000 	.word	0x40010000
 80026cc:	40000400 	.word	0x40000400
 80026d0:	40000800 	.word	0x40000800
 80026d4:	40000c00 	.word	0x40000c00
 80026d8:	40010400 	.word	0x40010400
 80026dc:	40014000 	.word	0x40014000
 80026e0:	40014400 	.word	0x40014400
 80026e4:	40014800 	.word	0x40014800
 80026e8:	40001800 	.word	0x40001800
 80026ec:	40001c00 	.word	0x40001c00
 80026f0:	40002000 	.word	0x40002000

080026f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	f023 0201 	bic.w	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0303 	bic.w	r3, r3, #3
 800272a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f023 0302 	bic.w	r3, r3, #2
 800273c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a20      	ldr	r2, [pc, #128]	; (80027cc <TIM_OC1_SetConfig+0xd8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d003      	beq.n	8002758 <TIM_OC1_SetConfig+0x64>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a1f      	ldr	r2, [pc, #124]	; (80027d0 <TIM_OC1_SetConfig+0xdc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d10c      	bne.n	8002772 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f023 0308 	bic.w	r3, r3, #8
 800275e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f023 0304 	bic.w	r3, r3, #4
 8002770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a15      	ldr	r2, [pc, #84]	; (80027cc <TIM_OC1_SetConfig+0xd8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d003      	beq.n	8002782 <TIM_OC1_SetConfig+0x8e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <TIM_OC1_SetConfig+0xdc>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d111      	bne.n	80027a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	621a      	str	r2, [r3, #32]
}
 80027c0:	bf00      	nop
 80027c2:	371c      	adds	r7, #28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	40010000 	.word	0x40010000
 80027d0:	40010400 	.word	0x40010400

080027d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	f023 0210 	bic.w	r2, r3, #16
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800280a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4313      	orrs	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f023 0320 	bic.w	r3, r3, #32
 800281e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	4313      	orrs	r3, r2
 800282a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a22      	ldr	r2, [pc, #136]	; (80028b8 <TIM_OC2_SetConfig+0xe4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d003      	beq.n	800283c <TIM_OC2_SetConfig+0x68>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a21      	ldr	r2, [pc, #132]	; (80028bc <TIM_OC2_SetConfig+0xe8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d10d      	bne.n	8002858 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002856:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a17      	ldr	r2, [pc, #92]	; (80028b8 <TIM_OC2_SetConfig+0xe4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d003      	beq.n	8002868 <TIM_OC2_SetConfig+0x94>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a16      	ldr	r2, [pc, #88]	; (80028bc <TIM_OC2_SetConfig+0xe8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d113      	bne.n	8002890 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800286e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002876:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	621a      	str	r2, [r3, #32]
}
 80028aa:	bf00      	nop
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40010000 	.word	0x40010000
 80028bc:	40010400 	.word	0x40010400

080028c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0303 	bic.w	r3, r3, #3
 80028f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4313      	orrs	r3, r2
 8002914:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a21      	ldr	r2, [pc, #132]	; (80029a0 <TIM_OC3_SetConfig+0xe0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d003      	beq.n	8002926 <TIM_OC3_SetConfig+0x66>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a20      	ldr	r2, [pc, #128]	; (80029a4 <TIM_OC3_SetConfig+0xe4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d10d      	bne.n	8002942 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800292c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	021b      	lsls	r3, r3, #8
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	4313      	orrs	r3, r2
 8002938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a16      	ldr	r2, [pc, #88]	; (80029a0 <TIM_OC3_SetConfig+0xe0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d003      	beq.n	8002952 <TIM_OC3_SetConfig+0x92>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a15      	ldr	r2, [pc, #84]	; (80029a4 <TIM_OC3_SetConfig+0xe4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d113      	bne.n	800297a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	621a      	str	r2, [r3, #32]
}
 8002994:	bf00      	nop
 8002996:	371c      	adds	r7, #28
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	40010000 	.word	0x40010000
 80029a4:	40010400 	.word	0x40010400

080029a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	031b      	lsls	r3, r3, #12
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <TIM_OC4_SetConfig+0xa4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d003      	beq.n	8002a10 <TIM_OC4_SetConfig+0x68>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a11      	ldr	r2, [pc, #68]	; (8002a50 <TIM_OC4_SetConfig+0xa8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d109      	bne.n	8002a24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	019b      	lsls	r3, r3, #6
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	621a      	str	r2, [r3, #32]
}
 8002a3e:	bf00      	nop
 8002a40:	371c      	adds	r7, #28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40010000 	.word	0x40010000
 8002a50:	40010400 	.word	0x40010400

08002a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	f023 0201 	bic.w	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f023 030a 	bic.w	r3, r3, #10
 8002a90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	621a      	str	r2, [r3, #32]
}
 8002aa6:	bf00      	nop
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b087      	sub	sp, #28
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	f023 0210 	bic.w	r2, r3, #16
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002adc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	031b      	lsls	r3, r3, #12
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002aee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	621a      	str	r2, [r3, #32]
}
 8002b06:	bf00      	nop
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b085      	sub	sp, #20
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f043 0307 	orr.w	r3, r3, #7
 8002b34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	609a      	str	r2, [r3, #8]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	021a      	lsls	r2, r3, #8
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	609a      	str	r2, [r3, #8]
}
 8002b7c:	bf00      	nop
 8002b7e:	371c      	adds	r7, #28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f003 031f 	and.w	r3, r3, #31
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a1a      	ldr	r2, [r3, #32]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	401a      	ands	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a1a      	ldr	r2, [r3, #32]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f003 031f 	and.w	r3, r3, #31
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	621a      	str	r2, [r3, #32]
}
 8002bc6:	bf00      	nop
 8002bc8:	371c      	adds	r7, #28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e05a      	b.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a21      	ldr	r2, [pc, #132]	; (8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d022      	beq.n	8002c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c38:	d01d      	beq.n	8002c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1d      	ldr	r2, [pc, #116]	; (8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d018      	beq.n	8002c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1b      	ldr	r2, [pc, #108]	; (8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1a      	ldr	r2, [pc, #104]	; (8002cbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00e      	beq.n	8002c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a18      	ldr	r2, [pc, #96]	; (8002cc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d009      	beq.n	8002c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a17      	ldr	r2, [pc, #92]	; (8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d004      	beq.n	8002c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a15      	ldr	r2, [pc, #84]	; (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d10c      	bne.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40010000 	.word	0x40010000
 8002cb4:	40000400 	.word	0x40000400
 8002cb8:	40000800 	.word	0x40000800
 8002cbc:	40000c00 	.word	0x40000c00
 8002cc0:	40010400 	.word	0x40010400
 8002cc4:	40014000 	.word	0x40014000
 8002cc8:	40001800 	.word	0x40001800

08002ccc <__errno>:
 8002ccc:	4b01      	ldr	r3, [pc, #4]	; (8002cd4 <__errno+0x8>)
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	2000002c 	.word	0x2000002c

08002cd8 <__libc_init_array>:
 8002cd8:	b570      	push	{r4, r5, r6, lr}
 8002cda:	4e0d      	ldr	r6, [pc, #52]	; (8002d10 <__libc_init_array+0x38>)
 8002cdc:	4c0d      	ldr	r4, [pc, #52]	; (8002d14 <__libc_init_array+0x3c>)
 8002cde:	1ba4      	subs	r4, r4, r6
 8002ce0:	10a4      	asrs	r4, r4, #2
 8002ce2:	2500      	movs	r5, #0
 8002ce4:	42a5      	cmp	r5, r4
 8002ce6:	d109      	bne.n	8002cfc <__libc_init_array+0x24>
 8002ce8:	4e0b      	ldr	r6, [pc, #44]	; (8002d18 <__libc_init_array+0x40>)
 8002cea:	4c0c      	ldr	r4, [pc, #48]	; (8002d1c <__libc_init_array+0x44>)
 8002cec:	f000 ff04 	bl	8003af8 <_init>
 8002cf0:	1ba4      	subs	r4, r4, r6
 8002cf2:	10a4      	asrs	r4, r4, #2
 8002cf4:	2500      	movs	r5, #0
 8002cf6:	42a5      	cmp	r5, r4
 8002cf8:	d105      	bne.n	8002d06 <__libc_init_array+0x2e>
 8002cfa:	bd70      	pop	{r4, r5, r6, pc}
 8002cfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d00:	4798      	blx	r3
 8002d02:	3501      	adds	r5, #1
 8002d04:	e7ee      	b.n	8002ce4 <__libc_init_array+0xc>
 8002d06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d0a:	4798      	blx	r3
 8002d0c:	3501      	adds	r5, #1
 8002d0e:	e7f2      	b.n	8002cf6 <__libc_init_array+0x1e>
 8002d10:	08004118 	.word	0x08004118
 8002d14:	08004118 	.word	0x08004118
 8002d18:	08004118 	.word	0x08004118
 8002d1c:	0800411c 	.word	0x0800411c

08002d20 <memset>:
 8002d20:	4402      	add	r2, r0
 8002d22:	4603      	mov	r3, r0
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d100      	bne.n	8002d2a <memset+0xa>
 8002d28:	4770      	bx	lr
 8002d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d2e:	e7f9      	b.n	8002d24 <memset+0x4>

08002d30 <iprintf>:
 8002d30:	b40f      	push	{r0, r1, r2, r3}
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <iprintf+0x2c>)
 8002d34:	b513      	push	{r0, r1, r4, lr}
 8002d36:	681c      	ldr	r4, [r3, #0]
 8002d38:	b124      	cbz	r4, 8002d44 <iprintf+0x14>
 8002d3a:	69a3      	ldr	r3, [r4, #24]
 8002d3c:	b913      	cbnz	r3, 8002d44 <iprintf+0x14>
 8002d3e:	4620      	mov	r0, r4
 8002d40:	f000 f84e 	bl	8002de0 <__sinit>
 8002d44:	ab05      	add	r3, sp, #20
 8002d46:	9a04      	ldr	r2, [sp, #16]
 8002d48:	68a1      	ldr	r1, [r4, #8]
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	f000 f955 	bl	8002ffc <_vfiprintf_r>
 8002d52:	b002      	add	sp, #8
 8002d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d58:	b004      	add	sp, #16
 8002d5a:	4770      	bx	lr
 8002d5c:	2000002c 	.word	0x2000002c

08002d60 <std>:
 8002d60:	2300      	movs	r3, #0
 8002d62:	b510      	push	{r4, lr}
 8002d64:	4604      	mov	r4, r0
 8002d66:	e9c0 3300 	strd	r3, r3, [r0]
 8002d6a:	6083      	str	r3, [r0, #8]
 8002d6c:	8181      	strh	r1, [r0, #12]
 8002d6e:	6643      	str	r3, [r0, #100]	; 0x64
 8002d70:	81c2      	strh	r2, [r0, #14]
 8002d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d76:	6183      	str	r3, [r0, #24]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	2208      	movs	r2, #8
 8002d7c:	305c      	adds	r0, #92	; 0x5c
 8002d7e:	f7ff ffcf 	bl	8002d20 <memset>
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <std+0x38>)
 8002d84:	6263      	str	r3, [r4, #36]	; 0x24
 8002d86:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <std+0x3c>)
 8002d88:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d8a:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <std+0x40>)
 8002d8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d8e:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <std+0x44>)
 8002d90:	6224      	str	r4, [r4, #32]
 8002d92:	6323      	str	r3, [r4, #48]	; 0x30
 8002d94:	bd10      	pop	{r4, pc}
 8002d96:	bf00      	nop
 8002d98:	08003559 	.word	0x08003559
 8002d9c:	0800357b 	.word	0x0800357b
 8002da0:	080035b3 	.word	0x080035b3
 8002da4:	080035d7 	.word	0x080035d7

08002da8 <_cleanup_r>:
 8002da8:	4901      	ldr	r1, [pc, #4]	; (8002db0 <_cleanup_r+0x8>)
 8002daa:	f000 b885 	b.w	8002eb8 <_fwalk_reent>
 8002dae:	bf00      	nop
 8002db0:	080038b1 	.word	0x080038b1

08002db4 <__sfmoreglue>:
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	1e4a      	subs	r2, r1, #1
 8002db8:	2568      	movs	r5, #104	; 0x68
 8002dba:	4355      	muls	r5, r2
 8002dbc:	460e      	mov	r6, r1
 8002dbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002dc2:	f000 f897 	bl	8002ef4 <_malloc_r>
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	b140      	cbz	r0, 8002ddc <__sfmoreglue+0x28>
 8002dca:	2100      	movs	r1, #0
 8002dcc:	e9c0 1600 	strd	r1, r6, [r0]
 8002dd0:	300c      	adds	r0, #12
 8002dd2:	60a0      	str	r0, [r4, #8]
 8002dd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002dd8:	f7ff ffa2 	bl	8002d20 <memset>
 8002ddc:	4620      	mov	r0, r4
 8002dde:	bd70      	pop	{r4, r5, r6, pc}

08002de0 <__sinit>:
 8002de0:	6983      	ldr	r3, [r0, #24]
 8002de2:	b510      	push	{r4, lr}
 8002de4:	4604      	mov	r4, r0
 8002de6:	bb33      	cbnz	r3, 8002e36 <__sinit+0x56>
 8002de8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002dec:	6503      	str	r3, [r0, #80]	; 0x50
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <__sinit+0x58>)
 8002df0:	4a12      	ldr	r2, [pc, #72]	; (8002e3c <__sinit+0x5c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6282      	str	r2, [r0, #40]	; 0x28
 8002df6:	4298      	cmp	r0, r3
 8002df8:	bf04      	itt	eq
 8002dfa:	2301      	moveq	r3, #1
 8002dfc:	6183      	streq	r3, [r0, #24]
 8002dfe:	f000 f81f 	bl	8002e40 <__sfp>
 8002e02:	6060      	str	r0, [r4, #4]
 8002e04:	4620      	mov	r0, r4
 8002e06:	f000 f81b 	bl	8002e40 <__sfp>
 8002e0a:	60a0      	str	r0, [r4, #8]
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	f000 f817 	bl	8002e40 <__sfp>
 8002e12:	2200      	movs	r2, #0
 8002e14:	60e0      	str	r0, [r4, #12]
 8002e16:	2104      	movs	r1, #4
 8002e18:	6860      	ldr	r0, [r4, #4]
 8002e1a:	f7ff ffa1 	bl	8002d60 <std>
 8002e1e:	2201      	movs	r2, #1
 8002e20:	2109      	movs	r1, #9
 8002e22:	68a0      	ldr	r0, [r4, #8]
 8002e24:	f7ff ff9c 	bl	8002d60 <std>
 8002e28:	2202      	movs	r2, #2
 8002e2a:	2112      	movs	r1, #18
 8002e2c:	68e0      	ldr	r0, [r4, #12]
 8002e2e:	f7ff ff97 	bl	8002d60 <std>
 8002e32:	2301      	movs	r3, #1
 8002e34:	61a3      	str	r3, [r4, #24]
 8002e36:	bd10      	pop	{r4, pc}
 8002e38:	08004078 	.word	0x08004078
 8002e3c:	08002da9 	.word	0x08002da9

08002e40 <__sfp>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <__sfp+0x70>)
 8002e44:	681e      	ldr	r6, [r3, #0]
 8002e46:	69b3      	ldr	r3, [r6, #24]
 8002e48:	4607      	mov	r7, r0
 8002e4a:	b913      	cbnz	r3, 8002e52 <__sfp+0x12>
 8002e4c:	4630      	mov	r0, r6
 8002e4e:	f7ff ffc7 	bl	8002de0 <__sinit>
 8002e52:	3648      	adds	r6, #72	; 0x48
 8002e54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	d503      	bpl.n	8002e64 <__sfp+0x24>
 8002e5c:	6833      	ldr	r3, [r6, #0]
 8002e5e:	b133      	cbz	r3, 8002e6e <__sfp+0x2e>
 8002e60:	6836      	ldr	r6, [r6, #0]
 8002e62:	e7f7      	b.n	8002e54 <__sfp+0x14>
 8002e64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002e68:	b16d      	cbz	r5, 8002e86 <__sfp+0x46>
 8002e6a:	3468      	adds	r4, #104	; 0x68
 8002e6c:	e7f4      	b.n	8002e58 <__sfp+0x18>
 8002e6e:	2104      	movs	r1, #4
 8002e70:	4638      	mov	r0, r7
 8002e72:	f7ff ff9f 	bl	8002db4 <__sfmoreglue>
 8002e76:	6030      	str	r0, [r6, #0]
 8002e78:	2800      	cmp	r0, #0
 8002e7a:	d1f1      	bne.n	8002e60 <__sfp+0x20>
 8002e7c:	230c      	movs	r3, #12
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	4604      	mov	r4, r0
 8002e82:	4620      	mov	r0, r4
 8002e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e86:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <__sfp+0x74>)
 8002e88:	6665      	str	r5, [r4, #100]	; 0x64
 8002e8a:	e9c4 5500 	strd	r5, r5, [r4]
 8002e8e:	60a5      	str	r5, [r4, #8]
 8002e90:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002e94:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002e98:	2208      	movs	r2, #8
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002ea0:	f7ff ff3e 	bl	8002d20 <memset>
 8002ea4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002ea8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002eac:	e7e9      	b.n	8002e82 <__sfp+0x42>
 8002eae:	bf00      	nop
 8002eb0:	08004078 	.word	0x08004078
 8002eb4:	ffff0001 	.word	0xffff0001

08002eb8 <_fwalk_reent>:
 8002eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ebc:	4680      	mov	r8, r0
 8002ebe:	4689      	mov	r9, r1
 8002ec0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002ec4:	2600      	movs	r6, #0
 8002ec6:	b914      	cbnz	r4, 8002ece <_fwalk_reent+0x16>
 8002ec8:	4630      	mov	r0, r6
 8002eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ece:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002ed2:	3f01      	subs	r7, #1
 8002ed4:	d501      	bpl.n	8002eda <_fwalk_reent+0x22>
 8002ed6:	6824      	ldr	r4, [r4, #0]
 8002ed8:	e7f5      	b.n	8002ec6 <_fwalk_reent+0xe>
 8002eda:	89ab      	ldrh	r3, [r5, #12]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d907      	bls.n	8002ef0 <_fwalk_reent+0x38>
 8002ee0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	d003      	beq.n	8002ef0 <_fwalk_reent+0x38>
 8002ee8:	4629      	mov	r1, r5
 8002eea:	4640      	mov	r0, r8
 8002eec:	47c8      	blx	r9
 8002eee:	4306      	orrs	r6, r0
 8002ef0:	3568      	adds	r5, #104	; 0x68
 8002ef2:	e7ee      	b.n	8002ed2 <_fwalk_reent+0x1a>

08002ef4 <_malloc_r>:
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	1ccd      	adds	r5, r1, #3
 8002ef8:	f025 0503 	bic.w	r5, r5, #3
 8002efc:	3508      	adds	r5, #8
 8002efe:	2d0c      	cmp	r5, #12
 8002f00:	bf38      	it	cc
 8002f02:	250c      	movcc	r5, #12
 8002f04:	2d00      	cmp	r5, #0
 8002f06:	4606      	mov	r6, r0
 8002f08:	db01      	blt.n	8002f0e <_malloc_r+0x1a>
 8002f0a:	42a9      	cmp	r1, r5
 8002f0c:	d903      	bls.n	8002f16 <_malloc_r+0x22>
 8002f0e:	230c      	movs	r3, #12
 8002f10:	6033      	str	r3, [r6, #0]
 8002f12:	2000      	movs	r0, #0
 8002f14:	bd70      	pop	{r4, r5, r6, pc}
 8002f16:	f000 fd6b 	bl	80039f0 <__malloc_lock>
 8002f1a:	4a21      	ldr	r2, [pc, #132]	; (8002fa0 <_malloc_r+0xac>)
 8002f1c:	6814      	ldr	r4, [r2, #0]
 8002f1e:	4621      	mov	r1, r4
 8002f20:	b991      	cbnz	r1, 8002f48 <_malloc_r+0x54>
 8002f22:	4c20      	ldr	r4, [pc, #128]	; (8002fa4 <_malloc_r+0xb0>)
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	b91b      	cbnz	r3, 8002f30 <_malloc_r+0x3c>
 8002f28:	4630      	mov	r0, r6
 8002f2a:	f000 fb05 	bl	8003538 <_sbrk_r>
 8002f2e:	6020      	str	r0, [r4, #0]
 8002f30:	4629      	mov	r1, r5
 8002f32:	4630      	mov	r0, r6
 8002f34:	f000 fb00 	bl	8003538 <_sbrk_r>
 8002f38:	1c43      	adds	r3, r0, #1
 8002f3a:	d124      	bne.n	8002f86 <_malloc_r+0x92>
 8002f3c:	230c      	movs	r3, #12
 8002f3e:	6033      	str	r3, [r6, #0]
 8002f40:	4630      	mov	r0, r6
 8002f42:	f000 fd56 	bl	80039f2 <__malloc_unlock>
 8002f46:	e7e4      	b.n	8002f12 <_malloc_r+0x1e>
 8002f48:	680b      	ldr	r3, [r1, #0]
 8002f4a:	1b5b      	subs	r3, r3, r5
 8002f4c:	d418      	bmi.n	8002f80 <_malloc_r+0x8c>
 8002f4e:	2b0b      	cmp	r3, #11
 8002f50:	d90f      	bls.n	8002f72 <_malloc_r+0x7e>
 8002f52:	600b      	str	r3, [r1, #0]
 8002f54:	50cd      	str	r5, [r1, r3]
 8002f56:	18cc      	adds	r4, r1, r3
 8002f58:	4630      	mov	r0, r6
 8002f5a:	f000 fd4a 	bl	80039f2 <__malloc_unlock>
 8002f5e:	f104 000b 	add.w	r0, r4, #11
 8002f62:	1d23      	adds	r3, r4, #4
 8002f64:	f020 0007 	bic.w	r0, r0, #7
 8002f68:	1ac3      	subs	r3, r0, r3
 8002f6a:	d0d3      	beq.n	8002f14 <_malloc_r+0x20>
 8002f6c:	425a      	negs	r2, r3
 8002f6e:	50e2      	str	r2, [r4, r3]
 8002f70:	e7d0      	b.n	8002f14 <_malloc_r+0x20>
 8002f72:	428c      	cmp	r4, r1
 8002f74:	684b      	ldr	r3, [r1, #4]
 8002f76:	bf16      	itet	ne
 8002f78:	6063      	strne	r3, [r4, #4]
 8002f7a:	6013      	streq	r3, [r2, #0]
 8002f7c:	460c      	movne	r4, r1
 8002f7e:	e7eb      	b.n	8002f58 <_malloc_r+0x64>
 8002f80:	460c      	mov	r4, r1
 8002f82:	6849      	ldr	r1, [r1, #4]
 8002f84:	e7cc      	b.n	8002f20 <_malloc_r+0x2c>
 8002f86:	1cc4      	adds	r4, r0, #3
 8002f88:	f024 0403 	bic.w	r4, r4, #3
 8002f8c:	42a0      	cmp	r0, r4
 8002f8e:	d005      	beq.n	8002f9c <_malloc_r+0xa8>
 8002f90:	1a21      	subs	r1, r4, r0
 8002f92:	4630      	mov	r0, r6
 8002f94:	f000 fad0 	bl	8003538 <_sbrk_r>
 8002f98:	3001      	adds	r0, #1
 8002f9a:	d0cf      	beq.n	8002f3c <_malloc_r+0x48>
 8002f9c:	6025      	str	r5, [r4, #0]
 8002f9e:	e7db      	b.n	8002f58 <_malloc_r+0x64>
 8002fa0:	200000b0 	.word	0x200000b0
 8002fa4:	200000b4 	.word	0x200000b4

08002fa8 <__sfputc_r>:
 8002fa8:	6893      	ldr	r3, [r2, #8]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	b410      	push	{r4}
 8002fb0:	6093      	str	r3, [r2, #8]
 8002fb2:	da08      	bge.n	8002fc6 <__sfputc_r+0x1e>
 8002fb4:	6994      	ldr	r4, [r2, #24]
 8002fb6:	42a3      	cmp	r3, r4
 8002fb8:	db01      	blt.n	8002fbe <__sfputc_r+0x16>
 8002fba:	290a      	cmp	r1, #10
 8002fbc:	d103      	bne.n	8002fc6 <__sfputc_r+0x1e>
 8002fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fc2:	f000 bb0d 	b.w	80035e0 <__swbuf_r>
 8002fc6:	6813      	ldr	r3, [r2, #0]
 8002fc8:	1c58      	adds	r0, r3, #1
 8002fca:	6010      	str	r0, [r2, #0]
 8002fcc:	7019      	strb	r1, [r3, #0]
 8002fce:	4608      	mov	r0, r1
 8002fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <__sfputs_r>:
 8002fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd8:	4606      	mov	r6, r0
 8002fda:	460f      	mov	r7, r1
 8002fdc:	4614      	mov	r4, r2
 8002fde:	18d5      	adds	r5, r2, r3
 8002fe0:	42ac      	cmp	r4, r5
 8002fe2:	d101      	bne.n	8002fe8 <__sfputs_r+0x12>
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	e007      	b.n	8002ff8 <__sfputs_r+0x22>
 8002fe8:	463a      	mov	r2, r7
 8002fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fee:	4630      	mov	r0, r6
 8002ff0:	f7ff ffda 	bl	8002fa8 <__sfputc_r>
 8002ff4:	1c43      	adds	r3, r0, #1
 8002ff6:	d1f3      	bne.n	8002fe0 <__sfputs_r+0xa>
 8002ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ffc <_vfiprintf_r>:
 8002ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003000:	460c      	mov	r4, r1
 8003002:	b09d      	sub	sp, #116	; 0x74
 8003004:	4617      	mov	r7, r2
 8003006:	461d      	mov	r5, r3
 8003008:	4606      	mov	r6, r0
 800300a:	b118      	cbz	r0, 8003014 <_vfiprintf_r+0x18>
 800300c:	6983      	ldr	r3, [r0, #24]
 800300e:	b90b      	cbnz	r3, 8003014 <_vfiprintf_r+0x18>
 8003010:	f7ff fee6 	bl	8002de0 <__sinit>
 8003014:	4b7c      	ldr	r3, [pc, #496]	; (8003208 <_vfiprintf_r+0x20c>)
 8003016:	429c      	cmp	r4, r3
 8003018:	d158      	bne.n	80030cc <_vfiprintf_r+0xd0>
 800301a:	6874      	ldr	r4, [r6, #4]
 800301c:	89a3      	ldrh	r3, [r4, #12]
 800301e:	0718      	lsls	r0, r3, #28
 8003020:	d55e      	bpl.n	80030e0 <_vfiprintf_r+0xe4>
 8003022:	6923      	ldr	r3, [r4, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d05b      	beq.n	80030e0 <_vfiprintf_r+0xe4>
 8003028:	2300      	movs	r3, #0
 800302a:	9309      	str	r3, [sp, #36]	; 0x24
 800302c:	2320      	movs	r3, #32
 800302e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003032:	2330      	movs	r3, #48	; 0x30
 8003034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003038:	9503      	str	r5, [sp, #12]
 800303a:	f04f 0b01 	mov.w	fp, #1
 800303e:	46b8      	mov	r8, r7
 8003040:	4645      	mov	r5, r8
 8003042:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003046:	b10b      	cbz	r3, 800304c <_vfiprintf_r+0x50>
 8003048:	2b25      	cmp	r3, #37	; 0x25
 800304a:	d154      	bne.n	80030f6 <_vfiprintf_r+0xfa>
 800304c:	ebb8 0a07 	subs.w	sl, r8, r7
 8003050:	d00b      	beq.n	800306a <_vfiprintf_r+0x6e>
 8003052:	4653      	mov	r3, sl
 8003054:	463a      	mov	r2, r7
 8003056:	4621      	mov	r1, r4
 8003058:	4630      	mov	r0, r6
 800305a:	f7ff ffbc 	bl	8002fd6 <__sfputs_r>
 800305e:	3001      	adds	r0, #1
 8003060:	f000 80c2 	beq.w	80031e8 <_vfiprintf_r+0x1ec>
 8003064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003066:	4453      	add	r3, sl
 8003068:	9309      	str	r3, [sp, #36]	; 0x24
 800306a:	f898 3000 	ldrb.w	r3, [r8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 80ba 	beq.w	80031e8 <_vfiprintf_r+0x1ec>
 8003074:	2300      	movs	r3, #0
 8003076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800307a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800307e:	9304      	str	r3, [sp, #16]
 8003080:	9307      	str	r3, [sp, #28]
 8003082:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003086:	931a      	str	r3, [sp, #104]	; 0x68
 8003088:	46a8      	mov	r8, r5
 800308a:	2205      	movs	r2, #5
 800308c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003090:	485e      	ldr	r0, [pc, #376]	; (800320c <_vfiprintf_r+0x210>)
 8003092:	f7fd f89d 	bl	80001d0 <memchr>
 8003096:	9b04      	ldr	r3, [sp, #16]
 8003098:	bb78      	cbnz	r0, 80030fa <_vfiprintf_r+0xfe>
 800309a:	06d9      	lsls	r1, r3, #27
 800309c:	bf44      	itt	mi
 800309e:	2220      	movmi	r2, #32
 80030a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80030a4:	071a      	lsls	r2, r3, #28
 80030a6:	bf44      	itt	mi
 80030a8:	222b      	movmi	r2, #43	; 0x2b
 80030aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80030ae:	782a      	ldrb	r2, [r5, #0]
 80030b0:	2a2a      	cmp	r2, #42	; 0x2a
 80030b2:	d02a      	beq.n	800310a <_vfiprintf_r+0x10e>
 80030b4:	9a07      	ldr	r2, [sp, #28]
 80030b6:	46a8      	mov	r8, r5
 80030b8:	2000      	movs	r0, #0
 80030ba:	250a      	movs	r5, #10
 80030bc:	4641      	mov	r1, r8
 80030be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030c2:	3b30      	subs	r3, #48	; 0x30
 80030c4:	2b09      	cmp	r3, #9
 80030c6:	d969      	bls.n	800319c <_vfiprintf_r+0x1a0>
 80030c8:	b360      	cbz	r0, 8003124 <_vfiprintf_r+0x128>
 80030ca:	e024      	b.n	8003116 <_vfiprintf_r+0x11a>
 80030cc:	4b50      	ldr	r3, [pc, #320]	; (8003210 <_vfiprintf_r+0x214>)
 80030ce:	429c      	cmp	r4, r3
 80030d0:	d101      	bne.n	80030d6 <_vfiprintf_r+0xda>
 80030d2:	68b4      	ldr	r4, [r6, #8]
 80030d4:	e7a2      	b.n	800301c <_vfiprintf_r+0x20>
 80030d6:	4b4f      	ldr	r3, [pc, #316]	; (8003214 <_vfiprintf_r+0x218>)
 80030d8:	429c      	cmp	r4, r3
 80030da:	bf08      	it	eq
 80030dc:	68f4      	ldreq	r4, [r6, #12]
 80030de:	e79d      	b.n	800301c <_vfiprintf_r+0x20>
 80030e0:	4621      	mov	r1, r4
 80030e2:	4630      	mov	r0, r6
 80030e4:	f000 fae0 	bl	80036a8 <__swsetup_r>
 80030e8:	2800      	cmp	r0, #0
 80030ea:	d09d      	beq.n	8003028 <_vfiprintf_r+0x2c>
 80030ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030f0:	b01d      	add	sp, #116	; 0x74
 80030f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030f6:	46a8      	mov	r8, r5
 80030f8:	e7a2      	b.n	8003040 <_vfiprintf_r+0x44>
 80030fa:	4a44      	ldr	r2, [pc, #272]	; (800320c <_vfiprintf_r+0x210>)
 80030fc:	1a80      	subs	r0, r0, r2
 80030fe:	fa0b f000 	lsl.w	r0, fp, r0
 8003102:	4318      	orrs	r0, r3
 8003104:	9004      	str	r0, [sp, #16]
 8003106:	4645      	mov	r5, r8
 8003108:	e7be      	b.n	8003088 <_vfiprintf_r+0x8c>
 800310a:	9a03      	ldr	r2, [sp, #12]
 800310c:	1d11      	adds	r1, r2, #4
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	9103      	str	r1, [sp, #12]
 8003112:	2a00      	cmp	r2, #0
 8003114:	db01      	blt.n	800311a <_vfiprintf_r+0x11e>
 8003116:	9207      	str	r2, [sp, #28]
 8003118:	e004      	b.n	8003124 <_vfiprintf_r+0x128>
 800311a:	4252      	negs	r2, r2
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	9207      	str	r2, [sp, #28]
 8003122:	9304      	str	r3, [sp, #16]
 8003124:	f898 3000 	ldrb.w	r3, [r8]
 8003128:	2b2e      	cmp	r3, #46	; 0x2e
 800312a:	d10e      	bne.n	800314a <_vfiprintf_r+0x14e>
 800312c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003130:	2b2a      	cmp	r3, #42	; 0x2a
 8003132:	d138      	bne.n	80031a6 <_vfiprintf_r+0x1aa>
 8003134:	9b03      	ldr	r3, [sp, #12]
 8003136:	1d1a      	adds	r2, r3, #4
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	9203      	str	r2, [sp, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	bfb8      	it	lt
 8003140:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003144:	f108 0802 	add.w	r8, r8, #2
 8003148:	9305      	str	r3, [sp, #20]
 800314a:	4d33      	ldr	r5, [pc, #204]	; (8003218 <_vfiprintf_r+0x21c>)
 800314c:	f898 1000 	ldrb.w	r1, [r8]
 8003150:	2203      	movs	r2, #3
 8003152:	4628      	mov	r0, r5
 8003154:	f7fd f83c 	bl	80001d0 <memchr>
 8003158:	b140      	cbz	r0, 800316c <_vfiprintf_r+0x170>
 800315a:	2340      	movs	r3, #64	; 0x40
 800315c:	1b40      	subs	r0, r0, r5
 800315e:	fa03 f000 	lsl.w	r0, r3, r0
 8003162:	9b04      	ldr	r3, [sp, #16]
 8003164:	4303      	orrs	r3, r0
 8003166:	f108 0801 	add.w	r8, r8, #1
 800316a:	9304      	str	r3, [sp, #16]
 800316c:	f898 1000 	ldrb.w	r1, [r8]
 8003170:	482a      	ldr	r0, [pc, #168]	; (800321c <_vfiprintf_r+0x220>)
 8003172:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003176:	2206      	movs	r2, #6
 8003178:	f108 0701 	add.w	r7, r8, #1
 800317c:	f7fd f828 	bl	80001d0 <memchr>
 8003180:	2800      	cmp	r0, #0
 8003182:	d037      	beq.n	80031f4 <_vfiprintf_r+0x1f8>
 8003184:	4b26      	ldr	r3, [pc, #152]	; (8003220 <_vfiprintf_r+0x224>)
 8003186:	bb1b      	cbnz	r3, 80031d0 <_vfiprintf_r+0x1d4>
 8003188:	9b03      	ldr	r3, [sp, #12]
 800318a:	3307      	adds	r3, #7
 800318c:	f023 0307 	bic.w	r3, r3, #7
 8003190:	3308      	adds	r3, #8
 8003192:	9303      	str	r3, [sp, #12]
 8003194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003196:	444b      	add	r3, r9
 8003198:	9309      	str	r3, [sp, #36]	; 0x24
 800319a:	e750      	b.n	800303e <_vfiprintf_r+0x42>
 800319c:	fb05 3202 	mla	r2, r5, r2, r3
 80031a0:	2001      	movs	r0, #1
 80031a2:	4688      	mov	r8, r1
 80031a4:	e78a      	b.n	80030bc <_vfiprintf_r+0xc0>
 80031a6:	2300      	movs	r3, #0
 80031a8:	f108 0801 	add.w	r8, r8, #1
 80031ac:	9305      	str	r3, [sp, #20]
 80031ae:	4619      	mov	r1, r3
 80031b0:	250a      	movs	r5, #10
 80031b2:	4640      	mov	r0, r8
 80031b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031b8:	3a30      	subs	r2, #48	; 0x30
 80031ba:	2a09      	cmp	r2, #9
 80031bc:	d903      	bls.n	80031c6 <_vfiprintf_r+0x1ca>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0c3      	beq.n	800314a <_vfiprintf_r+0x14e>
 80031c2:	9105      	str	r1, [sp, #20]
 80031c4:	e7c1      	b.n	800314a <_vfiprintf_r+0x14e>
 80031c6:	fb05 2101 	mla	r1, r5, r1, r2
 80031ca:	2301      	movs	r3, #1
 80031cc:	4680      	mov	r8, r0
 80031ce:	e7f0      	b.n	80031b2 <_vfiprintf_r+0x1b6>
 80031d0:	ab03      	add	r3, sp, #12
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	4622      	mov	r2, r4
 80031d6:	4b13      	ldr	r3, [pc, #76]	; (8003224 <_vfiprintf_r+0x228>)
 80031d8:	a904      	add	r1, sp, #16
 80031da:	4630      	mov	r0, r6
 80031dc:	f3af 8000 	nop.w
 80031e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80031e4:	4681      	mov	r9, r0
 80031e6:	d1d5      	bne.n	8003194 <_vfiprintf_r+0x198>
 80031e8:	89a3      	ldrh	r3, [r4, #12]
 80031ea:	065b      	lsls	r3, r3, #25
 80031ec:	f53f af7e 	bmi.w	80030ec <_vfiprintf_r+0xf0>
 80031f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031f2:	e77d      	b.n	80030f0 <_vfiprintf_r+0xf4>
 80031f4:	ab03      	add	r3, sp, #12
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	4622      	mov	r2, r4
 80031fa:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <_vfiprintf_r+0x228>)
 80031fc:	a904      	add	r1, sp, #16
 80031fe:	4630      	mov	r0, r6
 8003200:	f000 f888 	bl	8003314 <_printf_i>
 8003204:	e7ec      	b.n	80031e0 <_vfiprintf_r+0x1e4>
 8003206:	bf00      	nop
 8003208:	0800409c 	.word	0x0800409c
 800320c:	080040dc 	.word	0x080040dc
 8003210:	080040bc 	.word	0x080040bc
 8003214:	0800407c 	.word	0x0800407c
 8003218:	080040e2 	.word	0x080040e2
 800321c:	080040e6 	.word	0x080040e6
 8003220:	00000000 	.word	0x00000000
 8003224:	08002fd7 	.word	0x08002fd7

08003228 <_printf_common>:
 8003228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800322c:	4691      	mov	r9, r2
 800322e:	461f      	mov	r7, r3
 8003230:	688a      	ldr	r2, [r1, #8]
 8003232:	690b      	ldr	r3, [r1, #16]
 8003234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003238:	4293      	cmp	r3, r2
 800323a:	bfb8      	it	lt
 800323c:	4613      	movlt	r3, r2
 800323e:	f8c9 3000 	str.w	r3, [r9]
 8003242:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003246:	4606      	mov	r6, r0
 8003248:	460c      	mov	r4, r1
 800324a:	b112      	cbz	r2, 8003252 <_printf_common+0x2a>
 800324c:	3301      	adds	r3, #1
 800324e:	f8c9 3000 	str.w	r3, [r9]
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	0699      	lsls	r1, r3, #26
 8003256:	bf42      	ittt	mi
 8003258:	f8d9 3000 	ldrmi.w	r3, [r9]
 800325c:	3302      	addmi	r3, #2
 800325e:	f8c9 3000 	strmi.w	r3, [r9]
 8003262:	6825      	ldr	r5, [r4, #0]
 8003264:	f015 0506 	ands.w	r5, r5, #6
 8003268:	d107      	bne.n	800327a <_printf_common+0x52>
 800326a:	f104 0a19 	add.w	sl, r4, #25
 800326e:	68e3      	ldr	r3, [r4, #12]
 8003270:	f8d9 2000 	ldr.w	r2, [r9]
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	42ab      	cmp	r3, r5
 8003278:	dc28      	bgt.n	80032cc <_printf_common+0xa4>
 800327a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800327e:	6822      	ldr	r2, [r4, #0]
 8003280:	3300      	adds	r3, #0
 8003282:	bf18      	it	ne
 8003284:	2301      	movne	r3, #1
 8003286:	0692      	lsls	r2, r2, #26
 8003288:	d42d      	bmi.n	80032e6 <_printf_common+0xbe>
 800328a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800328e:	4639      	mov	r1, r7
 8003290:	4630      	mov	r0, r6
 8003292:	47c0      	blx	r8
 8003294:	3001      	adds	r0, #1
 8003296:	d020      	beq.n	80032da <_printf_common+0xb2>
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	68e5      	ldr	r5, [r4, #12]
 800329c:	f8d9 2000 	ldr.w	r2, [r9]
 80032a0:	f003 0306 	and.w	r3, r3, #6
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	bf08      	it	eq
 80032a8:	1aad      	subeq	r5, r5, r2
 80032aa:	68a3      	ldr	r3, [r4, #8]
 80032ac:	6922      	ldr	r2, [r4, #16]
 80032ae:	bf0c      	ite	eq
 80032b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032b4:	2500      	movne	r5, #0
 80032b6:	4293      	cmp	r3, r2
 80032b8:	bfc4      	itt	gt
 80032ba:	1a9b      	subgt	r3, r3, r2
 80032bc:	18ed      	addgt	r5, r5, r3
 80032be:	f04f 0900 	mov.w	r9, #0
 80032c2:	341a      	adds	r4, #26
 80032c4:	454d      	cmp	r5, r9
 80032c6:	d11a      	bne.n	80032fe <_printf_common+0xd6>
 80032c8:	2000      	movs	r0, #0
 80032ca:	e008      	b.n	80032de <_printf_common+0xb6>
 80032cc:	2301      	movs	r3, #1
 80032ce:	4652      	mov	r2, sl
 80032d0:	4639      	mov	r1, r7
 80032d2:	4630      	mov	r0, r6
 80032d4:	47c0      	blx	r8
 80032d6:	3001      	adds	r0, #1
 80032d8:	d103      	bne.n	80032e2 <_printf_common+0xba>
 80032da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032e2:	3501      	adds	r5, #1
 80032e4:	e7c3      	b.n	800326e <_printf_common+0x46>
 80032e6:	18e1      	adds	r1, r4, r3
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	2030      	movs	r0, #48	; 0x30
 80032ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032f0:	4422      	add	r2, r4
 80032f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032fa:	3302      	adds	r3, #2
 80032fc:	e7c5      	b.n	800328a <_printf_common+0x62>
 80032fe:	2301      	movs	r3, #1
 8003300:	4622      	mov	r2, r4
 8003302:	4639      	mov	r1, r7
 8003304:	4630      	mov	r0, r6
 8003306:	47c0      	blx	r8
 8003308:	3001      	adds	r0, #1
 800330a:	d0e6      	beq.n	80032da <_printf_common+0xb2>
 800330c:	f109 0901 	add.w	r9, r9, #1
 8003310:	e7d8      	b.n	80032c4 <_printf_common+0x9c>
	...

08003314 <_printf_i>:
 8003314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003318:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800331c:	460c      	mov	r4, r1
 800331e:	7e09      	ldrb	r1, [r1, #24]
 8003320:	b085      	sub	sp, #20
 8003322:	296e      	cmp	r1, #110	; 0x6e
 8003324:	4617      	mov	r7, r2
 8003326:	4606      	mov	r6, r0
 8003328:	4698      	mov	r8, r3
 800332a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800332c:	f000 80b3 	beq.w	8003496 <_printf_i+0x182>
 8003330:	d822      	bhi.n	8003378 <_printf_i+0x64>
 8003332:	2963      	cmp	r1, #99	; 0x63
 8003334:	d036      	beq.n	80033a4 <_printf_i+0x90>
 8003336:	d80a      	bhi.n	800334e <_printf_i+0x3a>
 8003338:	2900      	cmp	r1, #0
 800333a:	f000 80b9 	beq.w	80034b0 <_printf_i+0x19c>
 800333e:	2958      	cmp	r1, #88	; 0x58
 8003340:	f000 8083 	beq.w	800344a <_printf_i+0x136>
 8003344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003348:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800334c:	e032      	b.n	80033b4 <_printf_i+0xa0>
 800334e:	2964      	cmp	r1, #100	; 0x64
 8003350:	d001      	beq.n	8003356 <_printf_i+0x42>
 8003352:	2969      	cmp	r1, #105	; 0x69
 8003354:	d1f6      	bne.n	8003344 <_printf_i+0x30>
 8003356:	6820      	ldr	r0, [r4, #0]
 8003358:	6813      	ldr	r3, [r2, #0]
 800335a:	0605      	lsls	r5, r0, #24
 800335c:	f103 0104 	add.w	r1, r3, #4
 8003360:	d52a      	bpl.n	80033b8 <_printf_i+0xa4>
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6011      	str	r1, [r2, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	da03      	bge.n	8003372 <_printf_i+0x5e>
 800336a:	222d      	movs	r2, #45	; 0x2d
 800336c:	425b      	negs	r3, r3
 800336e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003372:	486f      	ldr	r0, [pc, #444]	; (8003530 <_printf_i+0x21c>)
 8003374:	220a      	movs	r2, #10
 8003376:	e039      	b.n	80033ec <_printf_i+0xd8>
 8003378:	2973      	cmp	r1, #115	; 0x73
 800337a:	f000 809d 	beq.w	80034b8 <_printf_i+0x1a4>
 800337e:	d808      	bhi.n	8003392 <_printf_i+0x7e>
 8003380:	296f      	cmp	r1, #111	; 0x6f
 8003382:	d020      	beq.n	80033c6 <_printf_i+0xb2>
 8003384:	2970      	cmp	r1, #112	; 0x70
 8003386:	d1dd      	bne.n	8003344 <_printf_i+0x30>
 8003388:	6823      	ldr	r3, [r4, #0]
 800338a:	f043 0320 	orr.w	r3, r3, #32
 800338e:	6023      	str	r3, [r4, #0]
 8003390:	e003      	b.n	800339a <_printf_i+0x86>
 8003392:	2975      	cmp	r1, #117	; 0x75
 8003394:	d017      	beq.n	80033c6 <_printf_i+0xb2>
 8003396:	2978      	cmp	r1, #120	; 0x78
 8003398:	d1d4      	bne.n	8003344 <_printf_i+0x30>
 800339a:	2378      	movs	r3, #120	; 0x78
 800339c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033a0:	4864      	ldr	r0, [pc, #400]	; (8003534 <_printf_i+0x220>)
 80033a2:	e055      	b.n	8003450 <_printf_i+0x13c>
 80033a4:	6813      	ldr	r3, [r2, #0]
 80033a6:	1d19      	adds	r1, r3, #4
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6011      	str	r1, [r2, #0]
 80033ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033b4:	2301      	movs	r3, #1
 80033b6:	e08c      	b.n	80034d2 <_printf_i+0x1be>
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6011      	str	r1, [r2, #0]
 80033bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80033c0:	bf18      	it	ne
 80033c2:	b21b      	sxthne	r3, r3
 80033c4:	e7cf      	b.n	8003366 <_printf_i+0x52>
 80033c6:	6813      	ldr	r3, [r2, #0]
 80033c8:	6825      	ldr	r5, [r4, #0]
 80033ca:	1d18      	adds	r0, r3, #4
 80033cc:	6010      	str	r0, [r2, #0]
 80033ce:	0628      	lsls	r0, r5, #24
 80033d0:	d501      	bpl.n	80033d6 <_printf_i+0xc2>
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	e002      	b.n	80033dc <_printf_i+0xc8>
 80033d6:	0668      	lsls	r0, r5, #25
 80033d8:	d5fb      	bpl.n	80033d2 <_printf_i+0xbe>
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	4854      	ldr	r0, [pc, #336]	; (8003530 <_printf_i+0x21c>)
 80033de:	296f      	cmp	r1, #111	; 0x6f
 80033e0:	bf14      	ite	ne
 80033e2:	220a      	movne	r2, #10
 80033e4:	2208      	moveq	r2, #8
 80033e6:	2100      	movs	r1, #0
 80033e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033ec:	6865      	ldr	r5, [r4, #4]
 80033ee:	60a5      	str	r5, [r4, #8]
 80033f0:	2d00      	cmp	r5, #0
 80033f2:	f2c0 8095 	blt.w	8003520 <_printf_i+0x20c>
 80033f6:	6821      	ldr	r1, [r4, #0]
 80033f8:	f021 0104 	bic.w	r1, r1, #4
 80033fc:	6021      	str	r1, [r4, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d13d      	bne.n	800347e <_printf_i+0x16a>
 8003402:	2d00      	cmp	r5, #0
 8003404:	f040 808e 	bne.w	8003524 <_printf_i+0x210>
 8003408:	4665      	mov	r5, ip
 800340a:	2a08      	cmp	r2, #8
 800340c:	d10b      	bne.n	8003426 <_printf_i+0x112>
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	07db      	lsls	r3, r3, #31
 8003412:	d508      	bpl.n	8003426 <_printf_i+0x112>
 8003414:	6923      	ldr	r3, [r4, #16]
 8003416:	6862      	ldr	r2, [r4, #4]
 8003418:	429a      	cmp	r2, r3
 800341a:	bfde      	ittt	le
 800341c:	2330      	movle	r3, #48	; 0x30
 800341e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003422:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003426:	ebac 0305 	sub.w	r3, ip, r5
 800342a:	6123      	str	r3, [r4, #16]
 800342c:	f8cd 8000 	str.w	r8, [sp]
 8003430:	463b      	mov	r3, r7
 8003432:	aa03      	add	r2, sp, #12
 8003434:	4621      	mov	r1, r4
 8003436:	4630      	mov	r0, r6
 8003438:	f7ff fef6 	bl	8003228 <_printf_common>
 800343c:	3001      	adds	r0, #1
 800343e:	d14d      	bne.n	80034dc <_printf_i+0x1c8>
 8003440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003444:	b005      	add	sp, #20
 8003446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800344a:	4839      	ldr	r0, [pc, #228]	; (8003530 <_printf_i+0x21c>)
 800344c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003450:	6813      	ldr	r3, [r2, #0]
 8003452:	6821      	ldr	r1, [r4, #0]
 8003454:	1d1d      	adds	r5, r3, #4
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6015      	str	r5, [r2, #0]
 800345a:	060a      	lsls	r2, r1, #24
 800345c:	d50b      	bpl.n	8003476 <_printf_i+0x162>
 800345e:	07ca      	lsls	r2, r1, #31
 8003460:	bf44      	itt	mi
 8003462:	f041 0120 	orrmi.w	r1, r1, #32
 8003466:	6021      	strmi	r1, [r4, #0]
 8003468:	b91b      	cbnz	r3, 8003472 <_printf_i+0x15e>
 800346a:	6822      	ldr	r2, [r4, #0]
 800346c:	f022 0220 	bic.w	r2, r2, #32
 8003470:	6022      	str	r2, [r4, #0]
 8003472:	2210      	movs	r2, #16
 8003474:	e7b7      	b.n	80033e6 <_printf_i+0xd2>
 8003476:	064d      	lsls	r5, r1, #25
 8003478:	bf48      	it	mi
 800347a:	b29b      	uxthmi	r3, r3
 800347c:	e7ef      	b.n	800345e <_printf_i+0x14a>
 800347e:	4665      	mov	r5, ip
 8003480:	fbb3 f1f2 	udiv	r1, r3, r2
 8003484:	fb02 3311 	mls	r3, r2, r1, r3
 8003488:	5cc3      	ldrb	r3, [r0, r3]
 800348a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800348e:	460b      	mov	r3, r1
 8003490:	2900      	cmp	r1, #0
 8003492:	d1f5      	bne.n	8003480 <_printf_i+0x16c>
 8003494:	e7b9      	b.n	800340a <_printf_i+0xf6>
 8003496:	6813      	ldr	r3, [r2, #0]
 8003498:	6825      	ldr	r5, [r4, #0]
 800349a:	6961      	ldr	r1, [r4, #20]
 800349c:	1d18      	adds	r0, r3, #4
 800349e:	6010      	str	r0, [r2, #0]
 80034a0:	0628      	lsls	r0, r5, #24
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	d501      	bpl.n	80034aa <_printf_i+0x196>
 80034a6:	6019      	str	r1, [r3, #0]
 80034a8:	e002      	b.n	80034b0 <_printf_i+0x19c>
 80034aa:	066a      	lsls	r2, r5, #25
 80034ac:	d5fb      	bpl.n	80034a6 <_printf_i+0x192>
 80034ae:	8019      	strh	r1, [r3, #0]
 80034b0:	2300      	movs	r3, #0
 80034b2:	6123      	str	r3, [r4, #16]
 80034b4:	4665      	mov	r5, ip
 80034b6:	e7b9      	b.n	800342c <_printf_i+0x118>
 80034b8:	6813      	ldr	r3, [r2, #0]
 80034ba:	1d19      	adds	r1, r3, #4
 80034bc:	6011      	str	r1, [r2, #0]
 80034be:	681d      	ldr	r5, [r3, #0]
 80034c0:	6862      	ldr	r2, [r4, #4]
 80034c2:	2100      	movs	r1, #0
 80034c4:	4628      	mov	r0, r5
 80034c6:	f7fc fe83 	bl	80001d0 <memchr>
 80034ca:	b108      	cbz	r0, 80034d0 <_printf_i+0x1bc>
 80034cc:	1b40      	subs	r0, r0, r5
 80034ce:	6060      	str	r0, [r4, #4]
 80034d0:	6863      	ldr	r3, [r4, #4]
 80034d2:	6123      	str	r3, [r4, #16]
 80034d4:	2300      	movs	r3, #0
 80034d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034da:	e7a7      	b.n	800342c <_printf_i+0x118>
 80034dc:	6923      	ldr	r3, [r4, #16]
 80034de:	462a      	mov	r2, r5
 80034e0:	4639      	mov	r1, r7
 80034e2:	4630      	mov	r0, r6
 80034e4:	47c0      	blx	r8
 80034e6:	3001      	adds	r0, #1
 80034e8:	d0aa      	beq.n	8003440 <_printf_i+0x12c>
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	079b      	lsls	r3, r3, #30
 80034ee:	d413      	bmi.n	8003518 <_printf_i+0x204>
 80034f0:	68e0      	ldr	r0, [r4, #12]
 80034f2:	9b03      	ldr	r3, [sp, #12]
 80034f4:	4298      	cmp	r0, r3
 80034f6:	bfb8      	it	lt
 80034f8:	4618      	movlt	r0, r3
 80034fa:	e7a3      	b.n	8003444 <_printf_i+0x130>
 80034fc:	2301      	movs	r3, #1
 80034fe:	464a      	mov	r2, r9
 8003500:	4639      	mov	r1, r7
 8003502:	4630      	mov	r0, r6
 8003504:	47c0      	blx	r8
 8003506:	3001      	adds	r0, #1
 8003508:	d09a      	beq.n	8003440 <_printf_i+0x12c>
 800350a:	3501      	adds	r5, #1
 800350c:	68e3      	ldr	r3, [r4, #12]
 800350e:	9a03      	ldr	r2, [sp, #12]
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	42ab      	cmp	r3, r5
 8003514:	dcf2      	bgt.n	80034fc <_printf_i+0x1e8>
 8003516:	e7eb      	b.n	80034f0 <_printf_i+0x1dc>
 8003518:	2500      	movs	r5, #0
 800351a:	f104 0919 	add.w	r9, r4, #25
 800351e:	e7f5      	b.n	800350c <_printf_i+0x1f8>
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1ac      	bne.n	800347e <_printf_i+0x16a>
 8003524:	7803      	ldrb	r3, [r0, #0]
 8003526:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800352a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800352e:	e76c      	b.n	800340a <_printf_i+0xf6>
 8003530:	080040ed 	.word	0x080040ed
 8003534:	080040fe 	.word	0x080040fe

08003538 <_sbrk_r>:
 8003538:	b538      	push	{r3, r4, r5, lr}
 800353a:	4c06      	ldr	r4, [pc, #24]	; (8003554 <_sbrk_r+0x1c>)
 800353c:	2300      	movs	r3, #0
 800353e:	4605      	mov	r5, r0
 8003540:	4608      	mov	r0, r1
 8003542:	6023      	str	r3, [r4, #0]
 8003544:	f7fd fe1a 	bl	800117c <_sbrk>
 8003548:	1c43      	adds	r3, r0, #1
 800354a:	d102      	bne.n	8003552 <_sbrk_r+0x1a>
 800354c:	6823      	ldr	r3, [r4, #0]
 800354e:	b103      	cbz	r3, 8003552 <_sbrk_r+0x1a>
 8003550:	602b      	str	r3, [r5, #0]
 8003552:	bd38      	pop	{r3, r4, r5, pc}
 8003554:	2000047c 	.word	0x2000047c

08003558 <__sread>:
 8003558:	b510      	push	{r4, lr}
 800355a:	460c      	mov	r4, r1
 800355c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003560:	f000 fa96 	bl	8003a90 <_read_r>
 8003564:	2800      	cmp	r0, #0
 8003566:	bfab      	itete	ge
 8003568:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800356a:	89a3      	ldrhlt	r3, [r4, #12]
 800356c:	181b      	addge	r3, r3, r0
 800356e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003572:	bfac      	ite	ge
 8003574:	6563      	strge	r3, [r4, #84]	; 0x54
 8003576:	81a3      	strhlt	r3, [r4, #12]
 8003578:	bd10      	pop	{r4, pc}

0800357a <__swrite>:
 800357a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800357e:	461f      	mov	r7, r3
 8003580:	898b      	ldrh	r3, [r1, #12]
 8003582:	05db      	lsls	r3, r3, #23
 8003584:	4605      	mov	r5, r0
 8003586:	460c      	mov	r4, r1
 8003588:	4616      	mov	r6, r2
 800358a:	d505      	bpl.n	8003598 <__swrite+0x1e>
 800358c:	2302      	movs	r3, #2
 800358e:	2200      	movs	r2, #0
 8003590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003594:	f000 f9b6 	bl	8003904 <_lseek_r>
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800359e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035a2:	81a3      	strh	r3, [r4, #12]
 80035a4:	4632      	mov	r2, r6
 80035a6:	463b      	mov	r3, r7
 80035a8:	4628      	mov	r0, r5
 80035aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035ae:	f000 b869 	b.w	8003684 <_write_r>

080035b2 <__sseek>:
 80035b2:	b510      	push	{r4, lr}
 80035b4:	460c      	mov	r4, r1
 80035b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ba:	f000 f9a3 	bl	8003904 <_lseek_r>
 80035be:	1c43      	adds	r3, r0, #1
 80035c0:	89a3      	ldrh	r3, [r4, #12]
 80035c2:	bf15      	itete	ne
 80035c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80035c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035ce:	81a3      	strheq	r3, [r4, #12]
 80035d0:	bf18      	it	ne
 80035d2:	81a3      	strhne	r3, [r4, #12]
 80035d4:	bd10      	pop	{r4, pc}

080035d6 <__sclose>:
 80035d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035da:	f000 b8d3 	b.w	8003784 <_close_r>
	...

080035e0 <__swbuf_r>:
 80035e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e2:	460e      	mov	r6, r1
 80035e4:	4614      	mov	r4, r2
 80035e6:	4605      	mov	r5, r0
 80035e8:	b118      	cbz	r0, 80035f2 <__swbuf_r+0x12>
 80035ea:	6983      	ldr	r3, [r0, #24]
 80035ec:	b90b      	cbnz	r3, 80035f2 <__swbuf_r+0x12>
 80035ee:	f7ff fbf7 	bl	8002de0 <__sinit>
 80035f2:	4b21      	ldr	r3, [pc, #132]	; (8003678 <__swbuf_r+0x98>)
 80035f4:	429c      	cmp	r4, r3
 80035f6:	d12a      	bne.n	800364e <__swbuf_r+0x6e>
 80035f8:	686c      	ldr	r4, [r5, #4]
 80035fa:	69a3      	ldr	r3, [r4, #24]
 80035fc:	60a3      	str	r3, [r4, #8]
 80035fe:	89a3      	ldrh	r3, [r4, #12]
 8003600:	071a      	lsls	r2, r3, #28
 8003602:	d52e      	bpl.n	8003662 <__swbuf_r+0x82>
 8003604:	6923      	ldr	r3, [r4, #16]
 8003606:	b363      	cbz	r3, 8003662 <__swbuf_r+0x82>
 8003608:	6923      	ldr	r3, [r4, #16]
 800360a:	6820      	ldr	r0, [r4, #0]
 800360c:	1ac0      	subs	r0, r0, r3
 800360e:	6963      	ldr	r3, [r4, #20]
 8003610:	b2f6      	uxtb	r6, r6
 8003612:	4283      	cmp	r3, r0
 8003614:	4637      	mov	r7, r6
 8003616:	dc04      	bgt.n	8003622 <__swbuf_r+0x42>
 8003618:	4621      	mov	r1, r4
 800361a:	4628      	mov	r0, r5
 800361c:	f000 f948 	bl	80038b0 <_fflush_r>
 8003620:	bb28      	cbnz	r0, 800366e <__swbuf_r+0x8e>
 8003622:	68a3      	ldr	r3, [r4, #8]
 8003624:	3b01      	subs	r3, #1
 8003626:	60a3      	str	r3, [r4, #8]
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	6022      	str	r2, [r4, #0]
 800362e:	701e      	strb	r6, [r3, #0]
 8003630:	6963      	ldr	r3, [r4, #20]
 8003632:	3001      	adds	r0, #1
 8003634:	4283      	cmp	r3, r0
 8003636:	d004      	beq.n	8003642 <__swbuf_r+0x62>
 8003638:	89a3      	ldrh	r3, [r4, #12]
 800363a:	07db      	lsls	r3, r3, #31
 800363c:	d519      	bpl.n	8003672 <__swbuf_r+0x92>
 800363e:	2e0a      	cmp	r6, #10
 8003640:	d117      	bne.n	8003672 <__swbuf_r+0x92>
 8003642:	4621      	mov	r1, r4
 8003644:	4628      	mov	r0, r5
 8003646:	f000 f933 	bl	80038b0 <_fflush_r>
 800364a:	b190      	cbz	r0, 8003672 <__swbuf_r+0x92>
 800364c:	e00f      	b.n	800366e <__swbuf_r+0x8e>
 800364e:	4b0b      	ldr	r3, [pc, #44]	; (800367c <__swbuf_r+0x9c>)
 8003650:	429c      	cmp	r4, r3
 8003652:	d101      	bne.n	8003658 <__swbuf_r+0x78>
 8003654:	68ac      	ldr	r4, [r5, #8]
 8003656:	e7d0      	b.n	80035fa <__swbuf_r+0x1a>
 8003658:	4b09      	ldr	r3, [pc, #36]	; (8003680 <__swbuf_r+0xa0>)
 800365a:	429c      	cmp	r4, r3
 800365c:	bf08      	it	eq
 800365e:	68ec      	ldreq	r4, [r5, #12]
 8003660:	e7cb      	b.n	80035fa <__swbuf_r+0x1a>
 8003662:	4621      	mov	r1, r4
 8003664:	4628      	mov	r0, r5
 8003666:	f000 f81f 	bl	80036a8 <__swsetup_r>
 800366a:	2800      	cmp	r0, #0
 800366c:	d0cc      	beq.n	8003608 <__swbuf_r+0x28>
 800366e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003672:	4638      	mov	r0, r7
 8003674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003676:	bf00      	nop
 8003678:	0800409c 	.word	0x0800409c
 800367c:	080040bc 	.word	0x080040bc
 8003680:	0800407c 	.word	0x0800407c

08003684 <_write_r>:
 8003684:	b538      	push	{r3, r4, r5, lr}
 8003686:	4c07      	ldr	r4, [pc, #28]	; (80036a4 <_write_r+0x20>)
 8003688:	4605      	mov	r5, r0
 800368a:	4608      	mov	r0, r1
 800368c:	4611      	mov	r1, r2
 800368e:	2200      	movs	r2, #0
 8003690:	6022      	str	r2, [r4, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	f7fd fd21 	bl	80010da <_write>
 8003698:	1c43      	adds	r3, r0, #1
 800369a:	d102      	bne.n	80036a2 <_write_r+0x1e>
 800369c:	6823      	ldr	r3, [r4, #0]
 800369e:	b103      	cbz	r3, 80036a2 <_write_r+0x1e>
 80036a0:	602b      	str	r3, [r5, #0]
 80036a2:	bd38      	pop	{r3, r4, r5, pc}
 80036a4:	2000047c 	.word	0x2000047c

080036a8 <__swsetup_r>:
 80036a8:	4b32      	ldr	r3, [pc, #200]	; (8003774 <__swsetup_r+0xcc>)
 80036aa:	b570      	push	{r4, r5, r6, lr}
 80036ac:	681d      	ldr	r5, [r3, #0]
 80036ae:	4606      	mov	r6, r0
 80036b0:	460c      	mov	r4, r1
 80036b2:	b125      	cbz	r5, 80036be <__swsetup_r+0x16>
 80036b4:	69ab      	ldr	r3, [r5, #24]
 80036b6:	b913      	cbnz	r3, 80036be <__swsetup_r+0x16>
 80036b8:	4628      	mov	r0, r5
 80036ba:	f7ff fb91 	bl	8002de0 <__sinit>
 80036be:	4b2e      	ldr	r3, [pc, #184]	; (8003778 <__swsetup_r+0xd0>)
 80036c0:	429c      	cmp	r4, r3
 80036c2:	d10f      	bne.n	80036e4 <__swsetup_r+0x3c>
 80036c4:	686c      	ldr	r4, [r5, #4]
 80036c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	0715      	lsls	r5, r2, #28
 80036ce:	d42c      	bmi.n	800372a <__swsetup_r+0x82>
 80036d0:	06d0      	lsls	r0, r2, #27
 80036d2:	d411      	bmi.n	80036f8 <__swsetup_r+0x50>
 80036d4:	2209      	movs	r2, #9
 80036d6:	6032      	str	r2, [r6, #0]
 80036d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036dc:	81a3      	strh	r3, [r4, #12]
 80036de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036e2:	e03e      	b.n	8003762 <__swsetup_r+0xba>
 80036e4:	4b25      	ldr	r3, [pc, #148]	; (800377c <__swsetup_r+0xd4>)
 80036e6:	429c      	cmp	r4, r3
 80036e8:	d101      	bne.n	80036ee <__swsetup_r+0x46>
 80036ea:	68ac      	ldr	r4, [r5, #8]
 80036ec:	e7eb      	b.n	80036c6 <__swsetup_r+0x1e>
 80036ee:	4b24      	ldr	r3, [pc, #144]	; (8003780 <__swsetup_r+0xd8>)
 80036f0:	429c      	cmp	r4, r3
 80036f2:	bf08      	it	eq
 80036f4:	68ec      	ldreq	r4, [r5, #12]
 80036f6:	e7e6      	b.n	80036c6 <__swsetup_r+0x1e>
 80036f8:	0751      	lsls	r1, r2, #29
 80036fa:	d512      	bpl.n	8003722 <__swsetup_r+0x7a>
 80036fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036fe:	b141      	cbz	r1, 8003712 <__swsetup_r+0x6a>
 8003700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003704:	4299      	cmp	r1, r3
 8003706:	d002      	beq.n	800370e <__swsetup_r+0x66>
 8003708:	4630      	mov	r0, r6
 800370a:	f000 f973 	bl	80039f4 <_free_r>
 800370e:	2300      	movs	r3, #0
 8003710:	6363      	str	r3, [r4, #52]	; 0x34
 8003712:	89a3      	ldrh	r3, [r4, #12]
 8003714:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003718:	81a3      	strh	r3, [r4, #12]
 800371a:	2300      	movs	r3, #0
 800371c:	6063      	str	r3, [r4, #4]
 800371e:	6923      	ldr	r3, [r4, #16]
 8003720:	6023      	str	r3, [r4, #0]
 8003722:	89a3      	ldrh	r3, [r4, #12]
 8003724:	f043 0308 	orr.w	r3, r3, #8
 8003728:	81a3      	strh	r3, [r4, #12]
 800372a:	6923      	ldr	r3, [r4, #16]
 800372c:	b94b      	cbnz	r3, 8003742 <__swsetup_r+0x9a>
 800372e:	89a3      	ldrh	r3, [r4, #12]
 8003730:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003738:	d003      	beq.n	8003742 <__swsetup_r+0x9a>
 800373a:	4621      	mov	r1, r4
 800373c:	4630      	mov	r0, r6
 800373e:	f000 f917 	bl	8003970 <__smakebuf_r>
 8003742:	89a2      	ldrh	r2, [r4, #12]
 8003744:	f012 0301 	ands.w	r3, r2, #1
 8003748:	d00c      	beq.n	8003764 <__swsetup_r+0xbc>
 800374a:	2300      	movs	r3, #0
 800374c:	60a3      	str	r3, [r4, #8]
 800374e:	6963      	ldr	r3, [r4, #20]
 8003750:	425b      	negs	r3, r3
 8003752:	61a3      	str	r3, [r4, #24]
 8003754:	6923      	ldr	r3, [r4, #16]
 8003756:	b953      	cbnz	r3, 800376e <__swsetup_r+0xc6>
 8003758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800375c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003760:	d1ba      	bne.n	80036d8 <__swsetup_r+0x30>
 8003762:	bd70      	pop	{r4, r5, r6, pc}
 8003764:	0792      	lsls	r2, r2, #30
 8003766:	bf58      	it	pl
 8003768:	6963      	ldrpl	r3, [r4, #20]
 800376a:	60a3      	str	r3, [r4, #8]
 800376c:	e7f2      	b.n	8003754 <__swsetup_r+0xac>
 800376e:	2000      	movs	r0, #0
 8003770:	e7f7      	b.n	8003762 <__swsetup_r+0xba>
 8003772:	bf00      	nop
 8003774:	2000002c 	.word	0x2000002c
 8003778:	0800409c 	.word	0x0800409c
 800377c:	080040bc 	.word	0x080040bc
 8003780:	0800407c 	.word	0x0800407c

08003784 <_close_r>:
 8003784:	b538      	push	{r3, r4, r5, lr}
 8003786:	4c06      	ldr	r4, [pc, #24]	; (80037a0 <_close_r+0x1c>)
 8003788:	2300      	movs	r3, #0
 800378a:	4605      	mov	r5, r0
 800378c:	4608      	mov	r0, r1
 800378e:	6023      	str	r3, [r4, #0]
 8003790:	f7fd fcbf 	bl	8001112 <_close>
 8003794:	1c43      	adds	r3, r0, #1
 8003796:	d102      	bne.n	800379e <_close_r+0x1a>
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	b103      	cbz	r3, 800379e <_close_r+0x1a>
 800379c:	602b      	str	r3, [r5, #0]
 800379e:	bd38      	pop	{r3, r4, r5, pc}
 80037a0:	2000047c 	.word	0x2000047c

080037a4 <__sflush_r>:
 80037a4:	898a      	ldrh	r2, [r1, #12]
 80037a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037aa:	4605      	mov	r5, r0
 80037ac:	0710      	lsls	r0, r2, #28
 80037ae:	460c      	mov	r4, r1
 80037b0:	d458      	bmi.n	8003864 <__sflush_r+0xc0>
 80037b2:	684b      	ldr	r3, [r1, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	dc05      	bgt.n	80037c4 <__sflush_r+0x20>
 80037b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	dc02      	bgt.n	80037c4 <__sflush_r+0x20>
 80037be:	2000      	movs	r0, #0
 80037c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037c6:	2e00      	cmp	r6, #0
 80037c8:	d0f9      	beq.n	80037be <__sflush_r+0x1a>
 80037ca:	2300      	movs	r3, #0
 80037cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037d0:	682f      	ldr	r7, [r5, #0]
 80037d2:	6a21      	ldr	r1, [r4, #32]
 80037d4:	602b      	str	r3, [r5, #0]
 80037d6:	d032      	beq.n	800383e <__sflush_r+0x9a>
 80037d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037da:	89a3      	ldrh	r3, [r4, #12]
 80037dc:	075a      	lsls	r2, r3, #29
 80037de:	d505      	bpl.n	80037ec <__sflush_r+0x48>
 80037e0:	6863      	ldr	r3, [r4, #4]
 80037e2:	1ac0      	subs	r0, r0, r3
 80037e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037e6:	b10b      	cbz	r3, 80037ec <__sflush_r+0x48>
 80037e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037ea:	1ac0      	subs	r0, r0, r3
 80037ec:	2300      	movs	r3, #0
 80037ee:	4602      	mov	r2, r0
 80037f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037f2:	6a21      	ldr	r1, [r4, #32]
 80037f4:	4628      	mov	r0, r5
 80037f6:	47b0      	blx	r6
 80037f8:	1c43      	adds	r3, r0, #1
 80037fa:	89a3      	ldrh	r3, [r4, #12]
 80037fc:	d106      	bne.n	800380c <__sflush_r+0x68>
 80037fe:	6829      	ldr	r1, [r5, #0]
 8003800:	291d      	cmp	r1, #29
 8003802:	d848      	bhi.n	8003896 <__sflush_r+0xf2>
 8003804:	4a29      	ldr	r2, [pc, #164]	; (80038ac <__sflush_r+0x108>)
 8003806:	40ca      	lsrs	r2, r1
 8003808:	07d6      	lsls	r6, r2, #31
 800380a:	d544      	bpl.n	8003896 <__sflush_r+0xf2>
 800380c:	2200      	movs	r2, #0
 800380e:	6062      	str	r2, [r4, #4]
 8003810:	04d9      	lsls	r1, r3, #19
 8003812:	6922      	ldr	r2, [r4, #16]
 8003814:	6022      	str	r2, [r4, #0]
 8003816:	d504      	bpl.n	8003822 <__sflush_r+0x7e>
 8003818:	1c42      	adds	r2, r0, #1
 800381a:	d101      	bne.n	8003820 <__sflush_r+0x7c>
 800381c:	682b      	ldr	r3, [r5, #0]
 800381e:	b903      	cbnz	r3, 8003822 <__sflush_r+0x7e>
 8003820:	6560      	str	r0, [r4, #84]	; 0x54
 8003822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003824:	602f      	str	r7, [r5, #0]
 8003826:	2900      	cmp	r1, #0
 8003828:	d0c9      	beq.n	80037be <__sflush_r+0x1a>
 800382a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800382e:	4299      	cmp	r1, r3
 8003830:	d002      	beq.n	8003838 <__sflush_r+0x94>
 8003832:	4628      	mov	r0, r5
 8003834:	f000 f8de 	bl	80039f4 <_free_r>
 8003838:	2000      	movs	r0, #0
 800383a:	6360      	str	r0, [r4, #52]	; 0x34
 800383c:	e7c0      	b.n	80037c0 <__sflush_r+0x1c>
 800383e:	2301      	movs	r3, #1
 8003840:	4628      	mov	r0, r5
 8003842:	47b0      	blx	r6
 8003844:	1c41      	adds	r1, r0, #1
 8003846:	d1c8      	bne.n	80037da <__sflush_r+0x36>
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0c5      	beq.n	80037da <__sflush_r+0x36>
 800384e:	2b1d      	cmp	r3, #29
 8003850:	d001      	beq.n	8003856 <__sflush_r+0xb2>
 8003852:	2b16      	cmp	r3, #22
 8003854:	d101      	bne.n	800385a <__sflush_r+0xb6>
 8003856:	602f      	str	r7, [r5, #0]
 8003858:	e7b1      	b.n	80037be <__sflush_r+0x1a>
 800385a:	89a3      	ldrh	r3, [r4, #12]
 800385c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003860:	81a3      	strh	r3, [r4, #12]
 8003862:	e7ad      	b.n	80037c0 <__sflush_r+0x1c>
 8003864:	690f      	ldr	r7, [r1, #16]
 8003866:	2f00      	cmp	r7, #0
 8003868:	d0a9      	beq.n	80037be <__sflush_r+0x1a>
 800386a:	0793      	lsls	r3, r2, #30
 800386c:	680e      	ldr	r6, [r1, #0]
 800386e:	bf08      	it	eq
 8003870:	694b      	ldreq	r3, [r1, #20]
 8003872:	600f      	str	r7, [r1, #0]
 8003874:	bf18      	it	ne
 8003876:	2300      	movne	r3, #0
 8003878:	eba6 0807 	sub.w	r8, r6, r7
 800387c:	608b      	str	r3, [r1, #8]
 800387e:	f1b8 0f00 	cmp.w	r8, #0
 8003882:	dd9c      	ble.n	80037be <__sflush_r+0x1a>
 8003884:	4643      	mov	r3, r8
 8003886:	463a      	mov	r2, r7
 8003888:	6a21      	ldr	r1, [r4, #32]
 800388a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800388c:	4628      	mov	r0, r5
 800388e:	47b0      	blx	r6
 8003890:	2800      	cmp	r0, #0
 8003892:	dc06      	bgt.n	80038a2 <__sflush_r+0xfe>
 8003894:	89a3      	ldrh	r3, [r4, #12]
 8003896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800389a:	81a3      	strh	r3, [r4, #12]
 800389c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038a0:	e78e      	b.n	80037c0 <__sflush_r+0x1c>
 80038a2:	4407      	add	r7, r0
 80038a4:	eba8 0800 	sub.w	r8, r8, r0
 80038a8:	e7e9      	b.n	800387e <__sflush_r+0xda>
 80038aa:	bf00      	nop
 80038ac:	20400001 	.word	0x20400001

080038b0 <_fflush_r>:
 80038b0:	b538      	push	{r3, r4, r5, lr}
 80038b2:	690b      	ldr	r3, [r1, #16]
 80038b4:	4605      	mov	r5, r0
 80038b6:	460c      	mov	r4, r1
 80038b8:	b1db      	cbz	r3, 80038f2 <_fflush_r+0x42>
 80038ba:	b118      	cbz	r0, 80038c4 <_fflush_r+0x14>
 80038bc:	6983      	ldr	r3, [r0, #24]
 80038be:	b90b      	cbnz	r3, 80038c4 <_fflush_r+0x14>
 80038c0:	f7ff fa8e 	bl	8002de0 <__sinit>
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <_fflush_r+0x48>)
 80038c6:	429c      	cmp	r4, r3
 80038c8:	d109      	bne.n	80038de <_fflush_r+0x2e>
 80038ca:	686c      	ldr	r4, [r5, #4]
 80038cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038d0:	b17b      	cbz	r3, 80038f2 <_fflush_r+0x42>
 80038d2:	4621      	mov	r1, r4
 80038d4:	4628      	mov	r0, r5
 80038d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038da:	f7ff bf63 	b.w	80037a4 <__sflush_r>
 80038de:	4b07      	ldr	r3, [pc, #28]	; (80038fc <_fflush_r+0x4c>)
 80038e0:	429c      	cmp	r4, r3
 80038e2:	d101      	bne.n	80038e8 <_fflush_r+0x38>
 80038e4:	68ac      	ldr	r4, [r5, #8]
 80038e6:	e7f1      	b.n	80038cc <_fflush_r+0x1c>
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <_fflush_r+0x50>)
 80038ea:	429c      	cmp	r4, r3
 80038ec:	bf08      	it	eq
 80038ee:	68ec      	ldreq	r4, [r5, #12]
 80038f0:	e7ec      	b.n	80038cc <_fflush_r+0x1c>
 80038f2:	2000      	movs	r0, #0
 80038f4:	bd38      	pop	{r3, r4, r5, pc}
 80038f6:	bf00      	nop
 80038f8:	0800409c 	.word	0x0800409c
 80038fc:	080040bc 	.word	0x080040bc
 8003900:	0800407c 	.word	0x0800407c

08003904 <_lseek_r>:
 8003904:	b538      	push	{r3, r4, r5, lr}
 8003906:	4c07      	ldr	r4, [pc, #28]	; (8003924 <_lseek_r+0x20>)
 8003908:	4605      	mov	r5, r0
 800390a:	4608      	mov	r0, r1
 800390c:	4611      	mov	r1, r2
 800390e:	2200      	movs	r2, #0
 8003910:	6022      	str	r2, [r4, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	f7fd fc24 	bl	8001160 <_lseek>
 8003918:	1c43      	adds	r3, r0, #1
 800391a:	d102      	bne.n	8003922 <_lseek_r+0x1e>
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	b103      	cbz	r3, 8003922 <_lseek_r+0x1e>
 8003920:	602b      	str	r3, [r5, #0]
 8003922:	bd38      	pop	{r3, r4, r5, pc}
 8003924:	2000047c 	.word	0x2000047c

08003928 <__swhatbuf_r>:
 8003928:	b570      	push	{r4, r5, r6, lr}
 800392a:	460e      	mov	r6, r1
 800392c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003930:	2900      	cmp	r1, #0
 8003932:	b096      	sub	sp, #88	; 0x58
 8003934:	4614      	mov	r4, r2
 8003936:	461d      	mov	r5, r3
 8003938:	da07      	bge.n	800394a <__swhatbuf_r+0x22>
 800393a:	2300      	movs	r3, #0
 800393c:	602b      	str	r3, [r5, #0]
 800393e:	89b3      	ldrh	r3, [r6, #12]
 8003940:	061a      	lsls	r2, r3, #24
 8003942:	d410      	bmi.n	8003966 <__swhatbuf_r+0x3e>
 8003944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003948:	e00e      	b.n	8003968 <__swhatbuf_r+0x40>
 800394a:	466a      	mov	r2, sp
 800394c:	f000 f8b2 	bl	8003ab4 <_fstat_r>
 8003950:	2800      	cmp	r0, #0
 8003952:	dbf2      	blt.n	800393a <__swhatbuf_r+0x12>
 8003954:	9a01      	ldr	r2, [sp, #4]
 8003956:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800395a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800395e:	425a      	negs	r2, r3
 8003960:	415a      	adcs	r2, r3
 8003962:	602a      	str	r2, [r5, #0]
 8003964:	e7ee      	b.n	8003944 <__swhatbuf_r+0x1c>
 8003966:	2340      	movs	r3, #64	; 0x40
 8003968:	2000      	movs	r0, #0
 800396a:	6023      	str	r3, [r4, #0]
 800396c:	b016      	add	sp, #88	; 0x58
 800396e:	bd70      	pop	{r4, r5, r6, pc}

08003970 <__smakebuf_r>:
 8003970:	898b      	ldrh	r3, [r1, #12]
 8003972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003974:	079d      	lsls	r5, r3, #30
 8003976:	4606      	mov	r6, r0
 8003978:	460c      	mov	r4, r1
 800397a:	d507      	bpl.n	800398c <__smakebuf_r+0x1c>
 800397c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003980:	6023      	str	r3, [r4, #0]
 8003982:	6123      	str	r3, [r4, #16]
 8003984:	2301      	movs	r3, #1
 8003986:	6163      	str	r3, [r4, #20]
 8003988:	b002      	add	sp, #8
 800398a:	bd70      	pop	{r4, r5, r6, pc}
 800398c:	ab01      	add	r3, sp, #4
 800398e:	466a      	mov	r2, sp
 8003990:	f7ff ffca 	bl	8003928 <__swhatbuf_r>
 8003994:	9900      	ldr	r1, [sp, #0]
 8003996:	4605      	mov	r5, r0
 8003998:	4630      	mov	r0, r6
 800399a:	f7ff faab 	bl	8002ef4 <_malloc_r>
 800399e:	b948      	cbnz	r0, 80039b4 <__smakebuf_r+0x44>
 80039a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039a4:	059a      	lsls	r2, r3, #22
 80039a6:	d4ef      	bmi.n	8003988 <__smakebuf_r+0x18>
 80039a8:	f023 0303 	bic.w	r3, r3, #3
 80039ac:	f043 0302 	orr.w	r3, r3, #2
 80039b0:	81a3      	strh	r3, [r4, #12]
 80039b2:	e7e3      	b.n	800397c <__smakebuf_r+0xc>
 80039b4:	4b0d      	ldr	r3, [pc, #52]	; (80039ec <__smakebuf_r+0x7c>)
 80039b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80039b8:	89a3      	ldrh	r3, [r4, #12]
 80039ba:	6020      	str	r0, [r4, #0]
 80039bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c0:	81a3      	strh	r3, [r4, #12]
 80039c2:	9b00      	ldr	r3, [sp, #0]
 80039c4:	6163      	str	r3, [r4, #20]
 80039c6:	9b01      	ldr	r3, [sp, #4]
 80039c8:	6120      	str	r0, [r4, #16]
 80039ca:	b15b      	cbz	r3, 80039e4 <__smakebuf_r+0x74>
 80039cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039d0:	4630      	mov	r0, r6
 80039d2:	f000 f881 	bl	8003ad8 <_isatty_r>
 80039d6:	b128      	cbz	r0, 80039e4 <__smakebuf_r+0x74>
 80039d8:	89a3      	ldrh	r3, [r4, #12]
 80039da:	f023 0303 	bic.w	r3, r3, #3
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	81a3      	strh	r3, [r4, #12]
 80039e4:	89a3      	ldrh	r3, [r4, #12]
 80039e6:	431d      	orrs	r5, r3
 80039e8:	81a5      	strh	r5, [r4, #12]
 80039ea:	e7cd      	b.n	8003988 <__smakebuf_r+0x18>
 80039ec:	08002da9 	.word	0x08002da9

080039f0 <__malloc_lock>:
 80039f0:	4770      	bx	lr

080039f2 <__malloc_unlock>:
 80039f2:	4770      	bx	lr

080039f4 <_free_r>:
 80039f4:	b538      	push	{r3, r4, r5, lr}
 80039f6:	4605      	mov	r5, r0
 80039f8:	2900      	cmp	r1, #0
 80039fa:	d045      	beq.n	8003a88 <_free_r+0x94>
 80039fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a00:	1f0c      	subs	r4, r1, #4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bfb8      	it	lt
 8003a06:	18e4      	addlt	r4, r4, r3
 8003a08:	f7ff fff2 	bl	80039f0 <__malloc_lock>
 8003a0c:	4a1f      	ldr	r2, [pc, #124]	; (8003a8c <_free_r+0x98>)
 8003a0e:	6813      	ldr	r3, [r2, #0]
 8003a10:	4610      	mov	r0, r2
 8003a12:	b933      	cbnz	r3, 8003a22 <_free_r+0x2e>
 8003a14:	6063      	str	r3, [r4, #4]
 8003a16:	6014      	str	r4, [r2, #0]
 8003a18:	4628      	mov	r0, r5
 8003a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a1e:	f7ff bfe8 	b.w	80039f2 <__malloc_unlock>
 8003a22:	42a3      	cmp	r3, r4
 8003a24:	d90c      	bls.n	8003a40 <_free_r+0x4c>
 8003a26:	6821      	ldr	r1, [r4, #0]
 8003a28:	1862      	adds	r2, r4, r1
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	bf04      	itt	eq
 8003a2e:	681a      	ldreq	r2, [r3, #0]
 8003a30:	685b      	ldreq	r3, [r3, #4]
 8003a32:	6063      	str	r3, [r4, #4]
 8003a34:	bf04      	itt	eq
 8003a36:	1852      	addeq	r2, r2, r1
 8003a38:	6022      	streq	r2, [r4, #0]
 8003a3a:	6004      	str	r4, [r0, #0]
 8003a3c:	e7ec      	b.n	8003a18 <_free_r+0x24>
 8003a3e:	4613      	mov	r3, r2
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	b10a      	cbz	r2, 8003a48 <_free_r+0x54>
 8003a44:	42a2      	cmp	r2, r4
 8003a46:	d9fa      	bls.n	8003a3e <_free_r+0x4a>
 8003a48:	6819      	ldr	r1, [r3, #0]
 8003a4a:	1858      	adds	r0, r3, r1
 8003a4c:	42a0      	cmp	r0, r4
 8003a4e:	d10b      	bne.n	8003a68 <_free_r+0x74>
 8003a50:	6820      	ldr	r0, [r4, #0]
 8003a52:	4401      	add	r1, r0
 8003a54:	1858      	adds	r0, r3, r1
 8003a56:	4282      	cmp	r2, r0
 8003a58:	6019      	str	r1, [r3, #0]
 8003a5a:	d1dd      	bne.n	8003a18 <_free_r+0x24>
 8003a5c:	6810      	ldr	r0, [r2, #0]
 8003a5e:	6852      	ldr	r2, [r2, #4]
 8003a60:	605a      	str	r2, [r3, #4]
 8003a62:	4401      	add	r1, r0
 8003a64:	6019      	str	r1, [r3, #0]
 8003a66:	e7d7      	b.n	8003a18 <_free_r+0x24>
 8003a68:	d902      	bls.n	8003a70 <_free_r+0x7c>
 8003a6a:	230c      	movs	r3, #12
 8003a6c:	602b      	str	r3, [r5, #0]
 8003a6e:	e7d3      	b.n	8003a18 <_free_r+0x24>
 8003a70:	6820      	ldr	r0, [r4, #0]
 8003a72:	1821      	adds	r1, r4, r0
 8003a74:	428a      	cmp	r2, r1
 8003a76:	bf04      	itt	eq
 8003a78:	6811      	ldreq	r1, [r2, #0]
 8003a7a:	6852      	ldreq	r2, [r2, #4]
 8003a7c:	6062      	str	r2, [r4, #4]
 8003a7e:	bf04      	itt	eq
 8003a80:	1809      	addeq	r1, r1, r0
 8003a82:	6021      	streq	r1, [r4, #0]
 8003a84:	605c      	str	r4, [r3, #4]
 8003a86:	e7c7      	b.n	8003a18 <_free_r+0x24>
 8003a88:	bd38      	pop	{r3, r4, r5, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200000b0 	.word	0x200000b0

08003a90 <_read_r>:
 8003a90:	b538      	push	{r3, r4, r5, lr}
 8003a92:	4c07      	ldr	r4, [pc, #28]	; (8003ab0 <_read_r+0x20>)
 8003a94:	4605      	mov	r5, r0
 8003a96:	4608      	mov	r0, r1
 8003a98:	4611      	mov	r1, r2
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	6022      	str	r2, [r4, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f7fd fafe 	bl	80010a0 <_read>
 8003aa4:	1c43      	adds	r3, r0, #1
 8003aa6:	d102      	bne.n	8003aae <_read_r+0x1e>
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	b103      	cbz	r3, 8003aae <_read_r+0x1e>
 8003aac:	602b      	str	r3, [r5, #0]
 8003aae:	bd38      	pop	{r3, r4, r5, pc}
 8003ab0:	2000047c 	.word	0x2000047c

08003ab4 <_fstat_r>:
 8003ab4:	b538      	push	{r3, r4, r5, lr}
 8003ab6:	4c07      	ldr	r4, [pc, #28]	; (8003ad4 <_fstat_r+0x20>)
 8003ab8:	2300      	movs	r3, #0
 8003aba:	4605      	mov	r5, r0
 8003abc:	4608      	mov	r0, r1
 8003abe:	4611      	mov	r1, r2
 8003ac0:	6023      	str	r3, [r4, #0]
 8003ac2:	f7fd fb32 	bl	800112a <_fstat>
 8003ac6:	1c43      	adds	r3, r0, #1
 8003ac8:	d102      	bne.n	8003ad0 <_fstat_r+0x1c>
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	b103      	cbz	r3, 8003ad0 <_fstat_r+0x1c>
 8003ace:	602b      	str	r3, [r5, #0]
 8003ad0:	bd38      	pop	{r3, r4, r5, pc}
 8003ad2:	bf00      	nop
 8003ad4:	2000047c 	.word	0x2000047c

08003ad8 <_isatty_r>:
 8003ad8:	b538      	push	{r3, r4, r5, lr}
 8003ada:	4c06      	ldr	r4, [pc, #24]	; (8003af4 <_isatty_r+0x1c>)
 8003adc:	2300      	movs	r3, #0
 8003ade:	4605      	mov	r5, r0
 8003ae0:	4608      	mov	r0, r1
 8003ae2:	6023      	str	r3, [r4, #0]
 8003ae4:	f7fd fb31 	bl	800114a <_isatty>
 8003ae8:	1c43      	adds	r3, r0, #1
 8003aea:	d102      	bne.n	8003af2 <_isatty_r+0x1a>
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	b103      	cbz	r3, 8003af2 <_isatty_r+0x1a>
 8003af0:	602b      	str	r3, [r5, #0]
 8003af2:	bd38      	pop	{r3, r4, r5, pc}
 8003af4:	2000047c 	.word	0x2000047c

08003af8 <_init>:
 8003af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afa:	bf00      	nop
 8003afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afe:	bc08      	pop	{r3}
 8003b00:	469e      	mov	lr, r3
 8003b02:	4770      	bx	lr

08003b04 <_fini>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	bf00      	nop
 8003b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0a:	bc08      	pop	{r3}
 8003b0c:	469e      	mov	lr, r3
 8003b0e:	4770      	bx	lr
