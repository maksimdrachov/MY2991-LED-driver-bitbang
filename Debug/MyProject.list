
MyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002418  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080025a0  080025a0  000125a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025b8  080025b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080025b8  080025b8  000125b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025c0  080025c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025c0  080025c0  000125c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025c4  080025c4  000125c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  080025d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  080025d4  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c976  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001845  00000000  00000000  0002c9b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db8  00000000  00000000  0002e1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d18  00000000  00000000  0002efb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020529  00000000  00000000  0002fcc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009933  00000000  00000000  000501f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c79a5  00000000  00000000  00059b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001214c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003adc  00000000  00000000  00121544  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002588 	.word	0x08002588

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002588 	.word	0x08002588

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fc52 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f810 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f974 	bl	80007c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f876 	bl	80005c8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004dc:	f000 f8a2 	bl	8000624 <MX_SPI1_Init>
  MX_TIM2_Init();
 80004e0:	f000 f8d6 	bl	8000690 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004e4:	f000 f920 	bl	8000728 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_Base_Start_IT(&htim3);
 80004e8:	4801      	ldr	r0, [pc, #4]	; (80004f0 <main+0x28>)
 80004ea:	f001 fd90 	bl	800200e <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <main+0x26>
 80004f0:	2000007c 	.word	0x2000007c

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b094      	sub	sp, #80	; 0x50
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0320 	add.w	r3, r7, #32
 80004fe:	2230      	movs	r2, #48	; 0x30
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f002 f838 	bl	8002578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <SystemClock_Config+0xcc>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000520:	4a27      	ldr	r2, [pc, #156]	; (80005c0 <SystemClock_Config+0xcc>)
 8000522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000526:	6413      	str	r3, [r2, #64]	; 0x40
 8000528:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <SystemClock_Config+0xcc>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <SystemClock_Config+0xd0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a21      	ldr	r2, [pc, #132]	; (80005c4 <SystemClock_Config+0xd0>)
 800053e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <SystemClock_Config+0xd0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000550:	2301      	movs	r3, #1
 8000552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000564:	2304      	movs	r3, #4
 8000566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000568:	23a8      	movs	r3, #168	; 0xa8
 800056a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056c:	2302      	movs	r3, #2
 800056e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000570:	2305      	movs	r3, #5
 8000572:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0320 	add.w	r3, r7, #32
 8000578:	4618      	mov	r0, r3
 800057a:	f001 f86b 	bl	8001654 <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000584:	f000 fa60 	bl	8000a48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	230f      	movs	r3, #15
 800058a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	2302      	movs	r3, #2
 800058e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000594:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000598:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800059a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2105      	movs	r1, #5
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fac4 	bl	8001b34 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005b2:	f000 fa49 	bl	8000a48 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3750      	adds	r7, #80	; 0x50
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40007000 	.word	0x40007000

080005c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <MX_I2C1_Init+0x50>)
 80005ce:	4a13      	ldr	r2, [pc, #76]	; (800061c <MX_I2C1_Init+0x54>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_I2C1_Init+0x50>)
 80005d4:	4a12      	ldr	r2, [pc, #72]	; (8000620 <MX_I2C1_Init+0x58>)
 80005d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_I2C1_Init+0x50>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_I2C1_Init+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_I2C1_Init+0x50>)
 80005e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <MX_I2C1_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_I2C1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_I2C1_Init+0x50>)
 8000606:	f000 feed 	bl	80013e4 <HAL_I2C_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000610:	f000 fa1a 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000028 	.word	0x20000028
 800061c:	40005400 	.word	0x40005400
 8000620:	000186a0 	.word	0x000186a0

08000624 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_SPI1_Init+0x64>)
 800062a:	4a18      	ldr	r2, [pc, #96]	; (800068c <MX_SPI1_Init+0x68>)
 800062c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <MX_SPI1_Init+0x64>)
 8000630:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000634:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_SPI1_Init+0x64>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_SPI1_Init+0x64>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_SPI1_Init+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_SPI1_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_SPI1_Init+0x64>)
 8000650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000654:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_SPI1_Init+0x64>)
 8000658:	2200      	movs	r2, #0
 800065a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MX_SPI1_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_SPI1_Init+0x64>)
 8000664:	2200      	movs	r2, #0
 8000666:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <MX_SPI1_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_SPI1_Init+0x64>)
 8000670:	220a      	movs	r2, #10
 8000672:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_SPI1_Init+0x64>)
 8000676:	f001 fc3b 	bl	8001ef0 <HAL_SPI_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000680:	f000 f9e2 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200000bc 	.word	0x200000bc
 800068c:	40013000 	.word	0x40013000

08000690 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a4:	463b      	mov	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006ac:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <MX_TIM2_Init+0x94>)
 80006ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <MX_TIM2_Init+0x94>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ba:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <MX_TIM2_Init+0x94>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60;
 80006c0:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_TIM2_Init+0x94>)
 80006c2:	223c      	movs	r2, #60	; 0x3c
 80006c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <MX_TIM2_Init+0x94>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MX_TIM2_Init+0x94>)
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006d2:	4814      	ldr	r0, [pc, #80]	; (8000724 <MX_TIM2_Init+0x94>)
 80006d4:	f001 fc70 	bl	8001fb8 <HAL_TIM_Base_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80006de:	f000 f9b3 	bl	8000a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	4619      	mov	r1, r3
 80006ee:	480d      	ldr	r0, [pc, #52]	; (8000724 <MX_TIM2_Init+0x94>)
 80006f0:	f001 fcb1 	bl	8002056 <HAL_TIM_ConfigClockSource>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80006fa:	f000 f9a5 	bl	8000a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	4619      	mov	r1, r3
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <MX_TIM2_Init+0x94>)
 800070c:	f001 fe94 	bl	8002438 <HAL_TIMEx_MasterConfigSynchronization>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000716:	f000 f997 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000114 	.word	0x20000114

08000728 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073c:	463b      	mov	r3, r7
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_TIM3_Init+0x90>)
 8000746:	4a1d      	ldr	r2, [pc, #116]	; (80007bc <MX_TIM3_Init+0x94>)
 8000748:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_TIM3_Init+0x90>)
 800074c:	2201      	movs	r2, #1
 800074e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_TIM3_Init+0x90>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 24;
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_TIM3_Init+0x90>)
 8000758:	2218      	movs	r2, #24
 800075a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075c:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_TIM3_Init+0x90>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_TIM3_Init+0x90>)
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000768:	4813      	ldr	r0, [pc, #76]	; (80007b8 <MX_TIM3_Init+0x90>)
 800076a:	f001 fc25 	bl	8001fb8 <HAL_TIM_Base_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000774:	f000 f968 	bl	8000a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	4619      	mov	r1, r3
 8000784:	480c      	ldr	r0, [pc, #48]	; (80007b8 <MX_TIM3_Init+0x90>)
 8000786:	f001 fc66 	bl	8002056 <HAL_TIM_ConfigClockSource>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000790:	f000 f95a 	bl	8000a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000794:	2300      	movs	r3, #0
 8000796:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800079c:	463b      	mov	r3, r7
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_TIM3_Init+0x90>)
 80007a2:	f001 fe49 	bl	8002438 <HAL_TIMEx_MasterConfigSynchronization>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80007ac:	f000 f94c 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	2000007c 	.word	0x2000007c
 80007bc:	40000400 	.word	0x40000400

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
 80007da:	4b94      	ldr	r3, [pc, #592]	; (8000a2c <MX_GPIO_Init+0x26c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a93      	ldr	r2, [pc, #588]	; (8000a2c <MX_GPIO_Init+0x26c>)
 80007e0:	f043 0310 	orr.w	r3, r3, #16
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b91      	ldr	r3, [pc, #580]	; (8000a2c <MX_GPIO_Init+0x26c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	4b8d      	ldr	r3, [pc, #564]	; (8000a2c <MX_GPIO_Init+0x26c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a8c      	ldr	r2, [pc, #560]	; (8000a2c <MX_GPIO_Init+0x26c>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b8a      	ldr	r3, [pc, #552]	; (8000a2c <MX_GPIO_Init+0x26c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b86      	ldr	r3, [pc, #536]	; (8000a2c <MX_GPIO_Init+0x26c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a85      	ldr	r2, [pc, #532]	; (8000a2c <MX_GPIO_Init+0x26c>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b83      	ldr	r3, [pc, #524]	; (8000a2c <MX_GPIO_Init+0x26c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b7f      	ldr	r3, [pc, #508]	; (8000a2c <MX_GPIO_Init+0x26c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a7e      	ldr	r2, [pc, #504]	; (8000a2c <MX_GPIO_Init+0x26c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b7c      	ldr	r3, [pc, #496]	; (8000a2c <MX_GPIO_Init+0x26c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b78      	ldr	r3, [pc, #480]	; (8000a2c <MX_GPIO_Init+0x26c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a77      	ldr	r2, [pc, #476]	; (8000a2c <MX_GPIO_Init+0x26c>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b75      	ldr	r3, [pc, #468]	; (8000a2c <MX_GPIO_Init+0x26c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b71      	ldr	r3, [pc, #452]	; (8000a2c <MX_GPIO_Init+0x26c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a70      	ldr	r2, [pc, #448]	; (8000a2c <MX_GPIO_Init+0x26c>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b6e      	ldr	r3, [pc, #440]	; (8000a2c <MX_GPIO_Init+0x26c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2108      	movs	r1, #8
 8000882:	486b      	ldr	r0, [pc, #428]	; (8000a30 <MX_GPIO_Init+0x270>)
 8000884:	f000 fd94 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	2101      	movs	r1, #1
 800088c:	4869      	ldr	r0, [pc, #420]	; (8000a34 <MX_GPIO_Init+0x274>)
 800088e:	f000 fd8f 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000892:	2200      	movs	r2, #0
 8000894:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000898:	4867      	ldr	r0, [pc, #412]	; (8000a38 <MX_GPIO_Init+0x278>)
 800089a:	f000 fd89 	bl	80013b0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80008a4:	4863      	ldr	r0, [pc, #396]	; (8000a34 <MX_GPIO_Init+0x274>)
 80008a6:	f000 fd83 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008aa:	2308      	movs	r3, #8
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	485b      	ldr	r0, [pc, #364]	; (8000a30 <MX_GPIO_Init+0x270>)
 80008c2:	f000 fbdb 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC8 PC9 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_8|GPIO_PIN_9;
 80008c6:	f240 3301 	movw	r3, #769	; 0x301
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4855      	ldr	r0, [pc, #340]	; (8000a34 <MX_GPIO_Init+0x274>)
 80008e0:	f000 fbcc 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008e4:	2308      	movs	r3, #8
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f4:	2305      	movs	r3, #5
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	484d      	ldr	r0, [pc, #308]	; (8000a34 <MX_GPIO_Init+0x274>)
 8000900:	f000 fbbc 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000904:	2301      	movs	r3, #1
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000908:	4b4c      	ldr	r3, [pc, #304]	; (8000a3c <MX_GPIO_Init+0x27c>)
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	484a      	ldr	r0, [pc, #296]	; (8000a40 <MX_GPIO_Init+0x280>)
 8000918:	f000 fbb0 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800091c:	2310      	movs	r3, #16
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800092c:	2306      	movs	r3, #6
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4842      	ldr	r0, [pc, #264]	; (8000a40 <MX_GPIO_Init+0x280>)
 8000938:	f000 fba0 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800093c:	2304      	movs	r3, #4
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	483d      	ldr	r0, [pc, #244]	; (8000a44 <MX_GPIO_Init+0x284>)
 8000950:	f000 fb94 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000966:	2305      	movs	r3, #5
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4834      	ldr	r0, [pc, #208]	; (8000a44 <MX_GPIO_Init+0x284>)
 8000972:	f000 fb83 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000976:	f24f 0310 	movw	r3, #61456	; 0xf010
 800097a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	482a      	ldr	r0, [pc, #168]	; (8000a38 <MX_GPIO_Init+0x278>)
 8000990:	f000 fb74 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000994:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009a6:	2306      	movs	r3, #6
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4820      	ldr	r0, [pc, #128]	; (8000a34 <MX_GPIO_Init+0x274>)
 80009b2:	f000 fb63 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	481d      	ldr	r0, [pc, #116]	; (8000a40 <MX_GPIO_Init+0x280>)
 80009cc:	f000 fb56 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009d0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009e2:	230a      	movs	r3, #10
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4814      	ldr	r0, [pc, #80]	; (8000a40 <MX_GPIO_Init+0x280>)
 80009ee:	f000 fb45 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009f2:	2320      	movs	r3, #32
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	480c      	ldr	r0, [pc, #48]	; (8000a38 <MX_GPIO_Init+0x278>)
 8000a06:	f000 fb39 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_GPIO_Init+0x27c>)
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_GPIO_Init+0x270>)
 8000a1e:	f000 fb2d 	bl	800107c <HAL_GPIO_Init>

}
 8000a22:	bf00      	nop
 8000a24:	3730      	adds	r7, #48	; 0x30
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40020800 	.word	0x40020800
 8000a38:	40020c00 	.word	0x40020c00
 8000a3c:	10120000 	.word	0x10120000
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40020400 	.word	0x40020400

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <Error_Handler+0x6>

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a64:	6453      	str	r3, [r2, #68]	; 0x44
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a8e:	2007      	movs	r0, #7
 8000a90:	f000 fab2 	bl	8000ff8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a19      	ldr	r2, [pc, #100]	; (8000b24 <HAL_I2C_MspInit+0x84>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d12c      	bne.n	8000b1c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <HAL_I2C_MspInit+0x88>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a17      	ldr	r2, [pc, #92]	; (8000b28 <HAL_I2C_MspInit+0x88>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <HAL_I2C_MspInit+0x88>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ade:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae4:	2312      	movs	r3, #18
 8000ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000af0:	2304      	movs	r3, #4
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	480c      	ldr	r0, [pc, #48]	; (8000b2c <HAL_I2C_MspInit+0x8c>)
 8000afc:	f000 fabe 	bl	800107c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_I2C_MspInit+0x88>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_I2C_MspInit+0x88>)
 8000b0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_I2C_MspInit+0x88>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b1c:	bf00      	nop
 8000b1e:	3728      	adds	r7, #40	; 0x28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40005400 	.word	0x40005400
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020400 	.word	0x40020400

08000b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <HAL_SPI_MspInit+0x84>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d12b      	bne.n	8000baa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_SPI_MspInit+0x88>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <HAL_SPI_MspInit+0x88>)
 8000b5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b60:	6453      	str	r3, [r2, #68]	; 0x44
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_SPI_MspInit+0x88>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_SPI_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <HAL_SPI_MspInit+0x88>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_SPI_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b8a:	23e0      	movs	r3, #224	; 0xe0
 8000b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b9a:	2305      	movs	r3, #5
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	; (8000bbc <HAL_SPI_MspInit+0x8c>)
 8000ba6:	f000 fa69 	bl	800107c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	; 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40013000 	.word	0x40013000
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000

08000bc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bd0:	d116      	bne.n	8000c00 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <HAL_TIM_Base_MspInit+0x80>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4a19      	ldr	r2, [pc, #100]	; (8000c40 <HAL_TIM_Base_MspInit+0x80>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6413      	str	r3, [r2, #64]	; 0x40
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <HAL_TIM_Base_MspInit+0x80>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	201c      	movs	r0, #28
 8000bf4:	f000 fa0b 	bl	800100e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bf8:	201c      	movs	r0, #28
 8000bfa:	f000 fa24 	bl	8001046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bfe:	e01a      	b.n	8000c36 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <HAL_TIM_Base_MspInit+0x84>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d115      	bne.n	8000c36 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_TIM_Base_MspInit+0x80>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <HAL_TIM_Base_MspInit+0x80>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_TIM_Base_MspInit+0x80>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	201d      	movs	r0, #29
 8000c2c:	f000 f9ef 	bl	800100e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c30:	201d      	movs	r0, #29
 8000c32:	f000 fa08 	bl	8001046 <HAL_NVIC_EnableIRQ>
}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40000400 	.word	0x40000400

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c94:	f000 f8c0 	bl	8000e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  GPIOC->ODR ^= (1<<8);
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <TIM2_IRQHandler+0x24>)
 8000ca2:	695b      	ldr	r3, [r3, #20]
 8000ca4:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <TIM2_IRQHandler+0x24>)
 8000ca6:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 8000caa:	6153      	str	r3, [r2, #20]
  /* USER CODE END TIM2_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <TIM2_IRQHandler+0x28>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f06f 0201 	mvn.w	r2, #1
 8000cb4:	611a      	str	r2, [r3, #16]

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	40020800 	.word	0x40020800
 8000cc4:	20000114 	.word	0x20000114

08000cc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	GPIOC->ODR ^= (1<<9);
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <TIM3_IRQHandler+0x24>)
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	4a06      	ldr	r2, [pc, #24]	; (8000cec <TIM3_IRQHandler+0x24>)
 8000cd2:	f483 7300 	eor.w	r3, r3, #512	; 0x200
 8000cd6:	6153      	str	r3, [r2, #20]
  /* USER CODE END TIM3_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <TIM3_IRQHandler+0x28>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f06f 0201 	mvn.w	r2, #1
 8000ce0:	611a      	str	r2, [r3, #16]

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	40020800 	.word	0x40020800
 8000cf0:	2000007c 	.word	0x2000007c

08000cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <SystemInit+0x28>)
 8000cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfe:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <SystemInit+0x28>)
 8000d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <SystemInit+0x28>)
 8000d0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d0e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d26:	e003      	b.n	8000d30 <LoopCopyDataInit>

08000d28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d2e:	3104      	adds	r1, #4

08000d30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d30:	480b      	ldr	r0, [pc, #44]	; (8000d60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d38:	d3f6      	bcc.n	8000d28 <CopyDataInit>
  ldr  r2, =_sbss
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d3c:	e002      	b.n	8000d44 <LoopFillZerobss>

08000d3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d40:	f842 3b04 	str.w	r3, [r2], #4

08000d44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d48:	d3f9      	bcc.n	8000d3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d4a:	f7ff ffd3 	bl	8000cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f001 fbef 	bl	8002530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d52:	f7ff fbb9 	bl	80004c8 <main>
  bx  lr    
 8000d56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d58:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d5c:	080025c8 	.word	0x080025c8
  ldr  r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d64:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000d68:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000d6c:	20000158 	.word	0x20000158

08000d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC_IRQHandler>
	...

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <HAL_Init+0x40>)
 8000d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_Init+0x40>)
 8000d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_Init+0x40>)
 8000d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 f92b 	bl	8000ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f000 f808 	bl	8000db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da8:	f7ff fe52 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023c00 	.word	0x40023c00

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_InitTick+0x54>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x58>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f943 	bl	8001062 <HAL_SYSTICK_Config>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00e      	b.n	8000e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d80a      	bhi.n	8000e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df4:	f000 f90b 	bl	800100e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df8:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <HAL_InitTick+0x5c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e000      	b.n	8000e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000004 	.word	0x20000004

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20000154 	.word	0x20000154

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000154 	.word	0x20000154

08000e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8a:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	60d3      	str	r3, [r2, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	f003 0307 	and.w	r3, r3, #7
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	db0b      	blt.n	8000ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f003 021f 	and.w	r2, r3, #31
 8000ed4:	4907      	ldr	r1, [pc, #28]	; (8000ef4 <__NVIC_EnableIRQ+0x38>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	2001      	movs	r0, #1
 8000ede:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e100 	.word	0xe000e100

08000ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db0a      	blt.n	8000f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	490c      	ldr	r1, [pc, #48]	; (8000f44 <__NVIC_SetPriority+0x4c>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f20:	e00a      	b.n	8000f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4908      	ldr	r1, [pc, #32]	; (8000f48 <__NVIC_SetPriority+0x50>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	3b04      	subs	r3, #4
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	761a      	strb	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f1c3 0307 	rsb	r3, r3, #7
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	bf28      	it	cs
 8000f6a:	2304      	movcs	r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3304      	adds	r3, #4
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d902      	bls.n	8000f7c <NVIC_EncodePriority+0x30>
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3b03      	subs	r3, #3
 8000f7a:	e000      	b.n	8000f7e <NVIC_EncodePriority+0x32>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	43d9      	mvns	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	4313      	orrs	r3, r2
         );
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3724      	adds	r7, #36	; 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc4:	d301      	bcc.n	8000fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00f      	b.n	8000fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <SysTick_Config+0x40>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd2:	210f      	movs	r1, #15
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd8:	f7ff ff8e 	bl	8000ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <SysTick_Config+0x40>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe2:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <SysTick_Config+0x40>)
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	e000e010 	.word	0xe000e010

08000ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff29 	bl	8000e58 <__NVIC_SetPriorityGrouping>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100e:	b580      	push	{r7, lr}
 8001010:	b086      	sub	sp, #24
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001020:	f7ff ff3e 	bl	8000ea0 <__NVIC_GetPriorityGrouping>
 8001024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	6978      	ldr	r0, [r7, #20]
 800102c:	f7ff ff8e 	bl	8000f4c <NVIC_EncodePriority>
 8001030:	4602      	mov	r2, r0
 8001032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff5d 	bl	8000ef8 <__NVIC_SetPriority>
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff31 	bl	8000ebc <__NVIC_EnableIRQ>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffa2 	bl	8000fb4 <SysTick_Config>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
 8001096:	e16b      	b.n	8001370 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001098:	2201      	movs	r2, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	f040 815a 	bne.w	800136a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d00b      	beq.n	80010d6 <HAL_GPIO_Init+0x5a>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d007      	beq.n	80010d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ca:	2b11      	cmp	r3, #17
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b12      	cmp	r3, #18
 80010d4:	d130      	bne.n	8001138 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800110c:	2201      	movs	r2, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	f003 0201 	and.w	r2, r3, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0xfc>
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b12      	cmp	r3, #18
 8001176:	d123      	bne.n	80011c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	08da      	lsrs	r2, r3, #3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3208      	adds	r2, #8
 8001180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	220f      	movs	r2, #15
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	08da      	lsrs	r2, r3, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3208      	adds	r2, #8
 80011ba:	69b9      	ldr	r1, [r7, #24]
 80011bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0203 	and.w	r2, r3, #3
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 80b4 	beq.w	800136a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b5f      	ldr	r3, [pc, #380]	; (8001384 <HAL_GPIO_Init+0x308>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a5e      	ldr	r2, [pc, #376]	; (8001384 <HAL_GPIO_Init+0x308>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b5c      	ldr	r3, [pc, #368]	; (8001384 <HAL_GPIO_Init+0x308>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121e:	4a5a      	ldr	r2, [pc, #360]	; (8001388 <HAL_GPIO_Init+0x30c>)
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	220f      	movs	r2, #15
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a51      	ldr	r2, [pc, #324]	; (800138c <HAL_GPIO_Init+0x310>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d02b      	beq.n	80012a2 <HAL_GPIO_Init+0x226>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a50      	ldr	r2, [pc, #320]	; (8001390 <HAL_GPIO_Init+0x314>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d025      	beq.n	800129e <HAL_GPIO_Init+0x222>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4f      	ldr	r2, [pc, #316]	; (8001394 <HAL_GPIO_Init+0x318>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d01f      	beq.n	800129a <HAL_GPIO_Init+0x21e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4e      	ldr	r2, [pc, #312]	; (8001398 <HAL_GPIO_Init+0x31c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d019      	beq.n	8001296 <HAL_GPIO_Init+0x21a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4d      	ldr	r2, [pc, #308]	; (800139c <HAL_GPIO_Init+0x320>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d013      	beq.n	8001292 <HAL_GPIO_Init+0x216>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4c      	ldr	r2, [pc, #304]	; (80013a0 <HAL_GPIO_Init+0x324>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d00d      	beq.n	800128e <HAL_GPIO_Init+0x212>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4b      	ldr	r2, [pc, #300]	; (80013a4 <HAL_GPIO_Init+0x328>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d007      	beq.n	800128a <HAL_GPIO_Init+0x20e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4a      	ldr	r2, [pc, #296]	; (80013a8 <HAL_GPIO_Init+0x32c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d101      	bne.n	8001286 <HAL_GPIO_Init+0x20a>
 8001282:	2307      	movs	r3, #7
 8001284:	e00e      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 8001286:	2308      	movs	r3, #8
 8001288:	e00c      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 800128a:	2306      	movs	r3, #6
 800128c:	e00a      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 800128e:	2305      	movs	r3, #5
 8001290:	e008      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 8001292:	2304      	movs	r3, #4
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 8001296:	2303      	movs	r3, #3
 8001298:	e004      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 800129a:	2302      	movs	r3, #2
 800129c:	e002      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 800129e:	2301      	movs	r3, #1
 80012a0:	e000      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 80012a2:	2300      	movs	r3, #0
 80012a4:	69fa      	ldr	r2, [r7, #28]
 80012a6:	f002 0203 	and.w	r2, r2, #3
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	4093      	lsls	r3, r2
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b4:	4934      	ldr	r1, [pc, #208]	; (8001388 <HAL_GPIO_Init+0x30c>)
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	089b      	lsrs	r3, r3, #2
 80012ba:	3302      	adds	r3, #2
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c2:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <HAL_GPIO_Init+0x330>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e6:	4a31      	ldr	r2, [pc, #196]	; (80013ac <HAL_GPIO_Init+0x330>)
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012ec:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <HAL_GPIO_Init+0x330>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001310:	4a26      	ldr	r2, [pc, #152]	; (80013ac <HAL_GPIO_Init+0x330>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001316:	4b25      	ldr	r3, [pc, #148]	; (80013ac <HAL_GPIO_Init+0x330>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133a:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <HAL_GPIO_Init+0x330>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <HAL_GPIO_Init+0x330>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001364:	4a11      	ldr	r2, [pc, #68]	; (80013ac <HAL_GPIO_Init+0x330>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3301      	adds	r3, #1
 800136e:	61fb      	str	r3, [r7, #28]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	2b0f      	cmp	r3, #15
 8001374:	f67f ae90 	bls.w	8001098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001378:	bf00      	nop
 800137a:	3724      	adds	r7, #36	; 0x24
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	40023800 	.word	0x40023800
 8001388:	40013800 	.word	0x40013800
 800138c:	40020000 	.word	0x40020000
 8001390:	40020400 	.word	0x40020400
 8001394:	40020800 	.word	0x40020800
 8001398:	40020c00 	.word	0x40020c00
 800139c:	40021000 	.word	0x40021000
 80013a0:	40021400 	.word	0x40021400
 80013a4:	40021800 	.word	0x40021800
 80013a8:	40021c00 	.word	0x40021c00
 80013ac:	40013c00 	.word	0x40013c00

080013b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c0:	787b      	ldrb	r3, [r7, #1]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013cc:	e003      	b.n	80013d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	041a      	lsls	r2, r3, #16
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	619a      	str	r2, [r3, #24]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e11f      	b.n	8001636 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d106      	bne.n	8001410 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fb48 	bl	8000aa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2224      	movs	r2, #36	; 0x24
 8001414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0201 	bic.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001436:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001446:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001448:	f000 fd3e 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 800144c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	4a7b      	ldr	r2, [pc, #492]	; (8001640 <HAL_I2C_Init+0x25c>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d807      	bhi.n	8001468 <HAL_I2C_Init+0x84>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4a7a      	ldr	r2, [pc, #488]	; (8001644 <HAL_I2C_Init+0x260>)
 800145c:	4293      	cmp	r3, r2
 800145e:	bf94      	ite	ls
 8001460:	2301      	movls	r3, #1
 8001462:	2300      	movhi	r3, #0
 8001464:	b2db      	uxtb	r3, r3
 8001466:	e006      	b.n	8001476 <HAL_I2C_Init+0x92>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4a77      	ldr	r2, [pc, #476]	; (8001648 <HAL_I2C_Init+0x264>)
 800146c:	4293      	cmp	r3, r2
 800146e:	bf94      	ite	ls
 8001470:	2301      	movls	r3, #1
 8001472:	2300      	movhi	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e0db      	b.n	8001636 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4a72      	ldr	r2, [pc, #456]	; (800164c <HAL_I2C_Init+0x268>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	0c9b      	lsrs	r3, r3, #18
 8001488:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	430a      	orrs	r2, r1
 800149c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4a64      	ldr	r2, [pc, #400]	; (8001640 <HAL_I2C_Init+0x25c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d802      	bhi.n	80014b8 <HAL_I2C_Init+0xd4>
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	3301      	adds	r3, #1
 80014b6:	e009      	b.n	80014cc <HAL_I2C_Init+0xe8>
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014be:	fb02 f303 	mul.w	r3, r2, r3
 80014c2:	4a63      	ldr	r2, [pc, #396]	; (8001650 <HAL_I2C_Init+0x26c>)
 80014c4:	fba2 2303 	umull	r2, r3, r2, r3
 80014c8:	099b      	lsrs	r3, r3, #6
 80014ca:	3301      	adds	r3, #1
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	430b      	orrs	r3, r1
 80014d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4956      	ldr	r1, [pc, #344]	; (8001640 <HAL_I2C_Init+0x25c>)
 80014e8:	428b      	cmp	r3, r1
 80014ea:	d80d      	bhi.n	8001508 <HAL_I2C_Init+0x124>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1e59      	subs	r1, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80014fa:	3301      	adds	r3, #1
 80014fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001500:	2b04      	cmp	r3, #4
 8001502:	bf38      	it	cc
 8001504:	2304      	movcc	r3, #4
 8001506:	e04f      	b.n	80015a8 <HAL_I2C_Init+0x1c4>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d111      	bne.n	8001534 <HAL_I2C_Init+0x150>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1e58      	subs	r0, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6859      	ldr	r1, [r3, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	440b      	add	r3, r1
 800151e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001522:	3301      	adds	r3, #1
 8001524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001528:	2b00      	cmp	r3, #0
 800152a:	bf0c      	ite	eq
 800152c:	2301      	moveq	r3, #1
 800152e:	2300      	movne	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	e012      	b.n	800155a <HAL_I2C_Init+0x176>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	1e58      	subs	r0, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6859      	ldr	r1, [r3, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	0099      	lsls	r1, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	fbb0 f3f3 	udiv	r3, r0, r3
 800154a:	3301      	adds	r3, #1
 800154c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf0c      	ite	eq
 8001554:	2301      	moveq	r3, #1
 8001556:	2300      	movne	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_I2C_Init+0x17e>
 800155e:	2301      	movs	r3, #1
 8001560:	e022      	b.n	80015a8 <HAL_I2C_Init+0x1c4>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10e      	bne.n	8001588 <HAL_I2C_Init+0x1a4>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1e58      	subs	r0, r3, #1
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6859      	ldr	r1, [r3, #4]
 8001572:	460b      	mov	r3, r1
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	440b      	add	r3, r1
 8001578:	fbb0 f3f3 	udiv	r3, r0, r3
 800157c:	3301      	adds	r3, #1
 800157e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001586:	e00f      	b.n	80015a8 <HAL_I2C_Init+0x1c4>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	1e58      	subs	r0, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6859      	ldr	r1, [r3, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	0099      	lsls	r1, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	fbb0 f3f3 	udiv	r3, r0, r3
 800159e:	3301      	adds	r3, #1
 80015a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	6809      	ldr	r1, [r1, #0]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69da      	ldr	r2, [r3, #28]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6911      	ldr	r1, [r2, #16]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68d2      	ldr	r2, [r2, #12]
 80015e2:	4311      	orrs	r1, r2
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	430b      	orrs	r3, r1
 80015ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2220      	movs	r2, #32
 8001622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	000186a0 	.word	0x000186a0
 8001644:	001e847f 	.word	0x001e847f
 8001648:	003d08ff 	.word	0x003d08ff
 800164c:	431bde83 	.word	0x431bde83
 8001650:	10624dd3 	.word	0x10624dd3

08001654 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e25b      	b.n	8001b1e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d075      	beq.n	800175e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001672:	4ba3      	ldr	r3, [pc, #652]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b04      	cmp	r3, #4
 800167c:	d00c      	beq.n	8001698 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800167e:	4ba0      	ldr	r3, [pc, #640]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001686:	2b08      	cmp	r3, #8
 8001688:	d112      	bne.n	80016b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800168a:	4b9d      	ldr	r3, [pc, #628]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001696:	d10b      	bne.n	80016b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001698:	4b99      	ldr	r3, [pc, #612]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d05b      	beq.n	800175c <HAL_RCC_OscConfig+0x108>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d157      	bne.n	800175c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e236      	b.n	8001b1e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b8:	d106      	bne.n	80016c8 <HAL_RCC_OscConfig+0x74>
 80016ba:	4b91      	ldr	r3, [pc, #580]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a90      	ldr	r2, [pc, #576]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e01d      	b.n	8001704 <HAL_RCC_OscConfig+0xb0>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d0:	d10c      	bne.n	80016ec <HAL_RCC_OscConfig+0x98>
 80016d2:	4b8b      	ldr	r3, [pc, #556]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a8a      	ldr	r2, [pc, #552]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	4b88      	ldr	r3, [pc, #544]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a87      	ldr	r2, [pc, #540]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e00b      	b.n	8001704 <HAL_RCC_OscConfig+0xb0>
 80016ec:	4b84      	ldr	r3, [pc, #528]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a83      	ldr	r2, [pc, #524]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 80016f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b81      	ldr	r3, [pc, #516]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a80      	ldr	r2, [pc, #512]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 80016fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d013      	beq.n	8001734 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff fb98 	bl	8000e40 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001714:	f7ff fb94 	bl	8000e40 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b64      	cmp	r3, #100	; 0x64
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e1fb      	b.n	8001b1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	4b76      	ldr	r3, [pc, #472]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0xc0>
 8001732:	e014      	b.n	800175e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff fb84 	bl	8000e40 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800173c:	f7ff fb80 	bl	8000e40 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b64      	cmp	r3, #100	; 0x64
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e1e7      	b.n	8001b1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174e:	4b6c      	ldr	r3, [pc, #432]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0xe8>
 800175a:	e000      	b.n	800175e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d063      	beq.n	8001832 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800176a:	4b65      	ldr	r3, [pc, #404]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00b      	beq.n	800178e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001776:	4b62      	ldr	r3, [pc, #392]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800177e:	2b08      	cmp	r3, #8
 8001780:	d11c      	bne.n	80017bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001782:	4b5f      	ldr	r3, [pc, #380]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d116      	bne.n	80017bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178e:	4b5c      	ldr	r3, [pc, #368]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d005      	beq.n	80017a6 <HAL_RCC_OscConfig+0x152>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d001      	beq.n	80017a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e1bb      	b.n	8001b1e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a6:	4b56      	ldr	r3, [pc, #344]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4952      	ldr	r1, [pc, #328]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ba:	e03a      	b.n	8001832 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d020      	beq.n	8001806 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c4:	4b4f      	ldr	r3, [pc, #316]	; (8001904 <HAL_RCC_OscConfig+0x2b0>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ca:	f7ff fb39 	bl	8000e40 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d2:	f7ff fb35 	bl	8000e40 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e19c      	b.n	8001b1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e4:	4b46      	ldr	r3, [pc, #280]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f0:	4b43      	ldr	r3, [pc, #268]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4940      	ldr	r1, [pc, #256]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 8001800:	4313      	orrs	r3, r2
 8001802:	600b      	str	r3, [r1, #0]
 8001804:	e015      	b.n	8001832 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001806:	4b3f      	ldr	r3, [pc, #252]	; (8001904 <HAL_RCC_OscConfig+0x2b0>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f7ff fb18 	bl	8000e40 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001814:	f7ff fb14 	bl	8000e40 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e17b      	b.n	8001b1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001826:	4b36      	ldr	r3, [pc, #216]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d030      	beq.n	80018a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d016      	beq.n	8001874 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001846:	4b30      	ldr	r3, [pc, #192]	; (8001908 <HAL_RCC_OscConfig+0x2b4>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184c:	f7ff faf8 	bl	8000e40 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001854:	f7ff faf4 	bl	8000e40 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e15b      	b.n	8001b1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001866:	4b26      	ldr	r3, [pc, #152]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 8001868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x200>
 8001872:	e015      	b.n	80018a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001874:	4b24      	ldr	r3, [pc, #144]	; (8001908 <HAL_RCC_OscConfig+0x2b4>)
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187a:	f7ff fae1 	bl	8000e40 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001882:	f7ff fadd 	bl	8000e40 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e144      	b.n	8001b1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001894:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 8001896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f0      	bne.n	8001882 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80a0 	beq.w	80019ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018b2:	4b13      	ldr	r3, [pc, #76]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10f      	bne.n	80018de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	4a0e      	ldr	r2, [pc, #56]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018cc:	6413      	str	r3, [r2, #64]	; 0x40
 80018ce:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018da:	2301      	movs	r3, #1
 80018dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_RCC_OscConfig+0x2b8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d121      	bne.n	800192e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <HAL_RCC_OscConfig+0x2b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a07      	ldr	r2, [pc, #28]	; (800190c <HAL_RCC_OscConfig+0x2b8>)
 80018f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f6:	f7ff faa3 	bl	8000e40 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fc:	e011      	b.n	8001922 <HAL_RCC_OscConfig+0x2ce>
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	42470000 	.word	0x42470000
 8001908:	42470e80 	.word	0x42470e80
 800190c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001910:	f7ff fa96 	bl	8000e40 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e0fd      	b.n	8001b1e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001922:	4b81      	ldr	r3, [pc, #516]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d106      	bne.n	8001944 <HAL_RCC_OscConfig+0x2f0>
 8001936:	4b7d      	ldr	r3, [pc, #500]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193a:	4a7c      	ldr	r2, [pc, #496]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6713      	str	r3, [r2, #112]	; 0x70
 8001942:	e01c      	b.n	800197e <HAL_RCC_OscConfig+0x32a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b05      	cmp	r3, #5
 800194a:	d10c      	bne.n	8001966 <HAL_RCC_OscConfig+0x312>
 800194c:	4b77      	ldr	r3, [pc, #476]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 800194e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001950:	4a76      	ldr	r2, [pc, #472]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 8001952:	f043 0304 	orr.w	r3, r3, #4
 8001956:	6713      	str	r3, [r2, #112]	; 0x70
 8001958:	4b74      	ldr	r3, [pc, #464]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 800195a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195c:	4a73      	ldr	r2, [pc, #460]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6713      	str	r3, [r2, #112]	; 0x70
 8001964:	e00b      	b.n	800197e <HAL_RCC_OscConfig+0x32a>
 8001966:	4b71      	ldr	r3, [pc, #452]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196a:	4a70      	ldr	r2, [pc, #448]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	6713      	str	r3, [r2, #112]	; 0x70
 8001972:	4b6e      	ldr	r3, [pc, #440]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 8001974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001976:	4a6d      	ldr	r2, [pc, #436]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 8001978:	f023 0304 	bic.w	r3, r3, #4
 800197c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d015      	beq.n	80019b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001986:	f7ff fa5b 	bl	8000e40 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7ff fa57 	bl	8000e40 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f241 3288 	movw	r2, #5000	; 0x1388
 800199c:	4293      	cmp	r3, r2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e0bc      	b.n	8001b1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a4:	4b61      	ldr	r3, [pc, #388]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 80019a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0ee      	beq.n	800198e <HAL_RCC_OscConfig+0x33a>
 80019b0:	e014      	b.n	80019dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b2:	f7ff fa45 	bl	8000e40 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b8:	e00a      	b.n	80019d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ba:	f7ff fa41 	bl	8000e40 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e0a6      	b.n	8001b1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d0:	4b56      	ldr	r3, [pc, #344]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 80019d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1ee      	bne.n	80019ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d105      	bne.n	80019ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e2:	4b52      	ldr	r3, [pc, #328]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a51      	ldr	r2, [pc, #324]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 80019e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 8092 	beq.w	8001b1c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019f8:	4b4c      	ldr	r3, [pc, #304]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 030c 	and.w	r3, r3, #12
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d05c      	beq.n	8001abe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d141      	bne.n	8001a90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0c:	4b48      	ldr	r3, [pc, #288]	; (8001b30 <HAL_RCC_OscConfig+0x4dc>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a12:	f7ff fa15 	bl	8000e40 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a1a:	f7ff fa11 	bl	8000e40 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e078      	b.n	8001b1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2c:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1f0      	bne.n	8001a1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69da      	ldr	r2, [r3, #28]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	019b      	lsls	r3, r3, #6
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	085b      	lsrs	r3, r3, #1
 8001a50:	3b01      	subs	r3, #1
 8001a52:	041b      	lsls	r3, r3, #16
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	061b      	lsls	r3, r3, #24
 8001a5c:	4933      	ldr	r1, [pc, #204]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a62:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <HAL_RCC_OscConfig+0x4dc>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff f9ea 	bl	8000e40 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a70:	f7ff f9e6 	bl	8000e40 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e04d      	b.n	8001b1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a82:	4b2a      	ldr	r3, [pc, #168]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x41c>
 8001a8e:	e045      	b.n	8001b1c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a90:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <HAL_RCC_OscConfig+0x4dc>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a96:	f7ff f9d3 	bl	8000e40 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7ff f9cf 	bl	8000e40 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e036      	b.n	8001b1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab0:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x44a>
 8001abc:	e02e      	b.n	8001b1c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e029      	b.n	8001b1e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001aca:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d11c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d115      	bne.n	8001b18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001af2:	4013      	ands	r3, r2
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d10d      	bne.n	8001b18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d106      	bne.n	8001b18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40007000 	.word	0x40007000
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	42470060 	.word	0x42470060

08001b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0cc      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b48:	4b68      	ldr	r3, [pc, #416]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d90c      	bls.n	8001b70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b65      	ldr	r3, [pc, #404]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b63      	ldr	r3, [pc, #396]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0b8      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d020      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b88:	4b59      	ldr	r3, [pc, #356]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4a58      	ldr	r2, [pc, #352]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ba0:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	4a52      	ldr	r2, [pc, #328]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001baa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bac:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	494d      	ldr	r1, [pc, #308]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d044      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	4b47      	ldr	r3, [pc, #284]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d119      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e07f      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d003      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf2:	4b3f      	ldr	r3, [pc, #252]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d109      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e06f      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c02:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e067      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c12:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f023 0203 	bic.w	r2, r3, #3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4934      	ldr	r1, [pc, #208]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c24:	f7ff f90c 	bl	8000e40 <HAL_GetTick>
 8001c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2c:	f7ff f908 	bl	8000e40 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e04f      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 020c 	and.w	r2, r3, #12
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d1eb      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c54:	4b25      	ldr	r3, [pc, #148]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d20c      	bcs.n	8001c7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b22      	ldr	r3, [pc, #136]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e032      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c88:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4916      	ldr	r1, [pc, #88]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d009      	beq.n	8001cba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	490e      	ldr	r1, [pc, #56]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cba:	f000 f821 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8001cbe:	4601      	mov	r1, r0
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	5cd3      	ldrb	r3, [r2, r3]
 8001cce:	fa21 f303 	lsr.w	r3, r1, r3
 8001cd2:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_RCC_ClockConfig+0x1c8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff f86c 	bl	8000db8 <HAL_InitTick>

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023c00 	.word	0x40023c00
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	080025a0 	.word	0x080025a0
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000004 	.word	0x20000004

08001d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d16:	4b63      	ldr	r3, [pc, #396]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d007      	beq.n	8001d32 <HAL_RCC_GetSysClockFreq+0x32>
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d008      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0x38>
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 80b4 	bne.w	8001e94 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d2c:	4b5e      	ldr	r3, [pc, #376]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d2e:	60bb      	str	r3, [r7, #8]
       break;
 8001d30:	e0b3      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d32:	4b5e      	ldr	r3, [pc, #376]	; (8001eac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001d34:	60bb      	str	r3, [r7, #8]
      break;
 8001d36:	e0b0      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d38:	4b5a      	ldr	r3, [pc, #360]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d40:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d42:	4b58      	ldr	r3, [pc, #352]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d04a      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d4e:	4b55      	ldr	r3, [pc, #340]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	099b      	lsrs	r3, r3, #6
 8001d54:	f04f 0400 	mov.w	r4, #0
 8001d58:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	ea03 0501 	and.w	r5, r3, r1
 8001d64:	ea04 0602 	and.w	r6, r4, r2
 8001d68:	4629      	mov	r1, r5
 8001d6a:	4632      	mov	r2, r6
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	f04f 0400 	mov.w	r4, #0
 8001d74:	0154      	lsls	r4, r2, #5
 8001d76:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d7a:	014b      	lsls	r3, r1, #5
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4622      	mov	r2, r4
 8001d80:	1b49      	subs	r1, r1, r5
 8001d82:	eb62 0206 	sbc.w	r2, r2, r6
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	f04f 0400 	mov.w	r4, #0
 8001d8e:	0194      	lsls	r4, r2, #6
 8001d90:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d94:	018b      	lsls	r3, r1, #6
 8001d96:	1a5b      	subs	r3, r3, r1
 8001d98:	eb64 0402 	sbc.w	r4, r4, r2
 8001d9c:	f04f 0100 	mov.w	r1, #0
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	00e2      	lsls	r2, r4, #3
 8001da6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001daa:	00d9      	lsls	r1, r3, #3
 8001dac:	460b      	mov	r3, r1
 8001dae:	4614      	mov	r4, r2
 8001db0:	195b      	adds	r3, r3, r5
 8001db2:	eb44 0406 	adc.w	r4, r4, r6
 8001db6:	f04f 0100 	mov.w	r1, #0
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	0262      	lsls	r2, r4, #9
 8001dc0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001dc4:	0259      	lsls	r1, r3, #9
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4614      	mov	r4, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	4621      	mov	r1, r4
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f04f 0400 	mov.w	r4, #0
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	f7fe f9f6 	bl	80001c8 <__aeabi_uldivmod>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	460c      	mov	r4, r1
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	e049      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de4:	4b2f      	ldr	r3, [pc, #188]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	099b      	lsrs	r3, r3, #6
 8001dea:	f04f 0400 	mov.w	r4, #0
 8001dee:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	ea03 0501 	and.w	r5, r3, r1
 8001dfa:	ea04 0602 	and.w	r6, r4, r2
 8001dfe:	4629      	mov	r1, r5
 8001e00:	4632      	mov	r2, r6
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	f04f 0400 	mov.w	r4, #0
 8001e0a:	0154      	lsls	r4, r2, #5
 8001e0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e10:	014b      	lsls	r3, r1, #5
 8001e12:	4619      	mov	r1, r3
 8001e14:	4622      	mov	r2, r4
 8001e16:	1b49      	subs	r1, r1, r5
 8001e18:	eb62 0206 	sbc.w	r2, r2, r6
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	f04f 0400 	mov.w	r4, #0
 8001e24:	0194      	lsls	r4, r2, #6
 8001e26:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e2a:	018b      	lsls	r3, r1, #6
 8001e2c:	1a5b      	subs	r3, r3, r1
 8001e2e:	eb64 0402 	sbc.w	r4, r4, r2
 8001e32:	f04f 0100 	mov.w	r1, #0
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	00e2      	lsls	r2, r4, #3
 8001e3c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e40:	00d9      	lsls	r1, r3, #3
 8001e42:	460b      	mov	r3, r1
 8001e44:	4614      	mov	r4, r2
 8001e46:	195b      	adds	r3, r3, r5
 8001e48:	eb44 0406 	adc.w	r4, r4, r6
 8001e4c:	f04f 0100 	mov.w	r1, #0
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	02a2      	lsls	r2, r4, #10
 8001e56:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e5a:	0299      	lsls	r1, r3, #10
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4614      	mov	r4, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	4621      	mov	r1, r4
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f04f 0400 	mov.w	r4, #0
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	4623      	mov	r3, r4
 8001e6e:	f7fe f9ab 	bl	80001c8 <__aeabi_uldivmod>
 8001e72:	4603      	mov	r3, r0
 8001e74:	460c      	mov	r4, r1
 8001e76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	0c1b      	lsrs	r3, r3, #16
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	3301      	adds	r3, #1
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e90:	60bb      	str	r3, [r7, #8]
      break;
 8001e92:	e002      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001e96:	60bb      	str	r3, [r7, #8]
      break;
 8001e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e9a:	68bb      	ldr	r3, [r7, #8]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	00f42400 	.word	0x00f42400
 8001eac:	007a1200 	.word	0x007a1200

08001eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ecc:	f7ff fff0 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ed0:	4601      	mov	r1, r0
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	0a9b      	lsrs	r3, r3, #10
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	4a03      	ldr	r2, [pc, #12]	; (8001eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ede:	5cd3      	ldrb	r3, [r2, r3]
 8001ee0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	080025b0 	.word	0x080025b0

08001ef0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e056      	b.n	8001fb0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d106      	bne.n	8001f22 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7fe fe07 	bl	8000b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2202      	movs	r2, #2
 8001f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f38:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	ea42 0103 	orr.w	r1, r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	0c1b      	lsrs	r3, r3, #16
 8001f80:	f003 0104 	and.w	r1, r3, #4
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	69da      	ldr	r2, [r3, #28]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e01d      	b.n	8002006 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7fe fdee 	bl	8000bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	f000 f8e4 	bl	80021c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800200e:	b480      	push	{r7}
 8002010:	b085      	sub	sp, #20
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0201 	orr.w	r2, r2, #1
 8002024:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b06      	cmp	r3, #6
 8002036:	d007      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_TIM_ConfigClockSource+0x18>
 800206a:	2302      	movs	r3, #2
 800206c:	e0a6      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x166>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2202      	movs	r2, #2
 800207a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800208c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002094:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b40      	cmp	r3, #64	; 0x40
 80020a4:	d067      	beq.n	8002176 <HAL_TIM_ConfigClockSource+0x120>
 80020a6:	2b40      	cmp	r3, #64	; 0x40
 80020a8:	d80b      	bhi.n	80020c2 <HAL_TIM_ConfigClockSource+0x6c>
 80020aa:	2b10      	cmp	r3, #16
 80020ac:	d073      	beq.n	8002196 <HAL_TIM_ConfigClockSource+0x140>
 80020ae:	2b10      	cmp	r3, #16
 80020b0:	d802      	bhi.n	80020b8 <HAL_TIM_ConfigClockSource+0x62>
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d06f      	beq.n	8002196 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80020b6:	e078      	b.n	80021aa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80020b8:	2b20      	cmp	r3, #32
 80020ba:	d06c      	beq.n	8002196 <HAL_TIM_ConfigClockSource+0x140>
 80020bc:	2b30      	cmp	r3, #48	; 0x30
 80020be:	d06a      	beq.n	8002196 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80020c0:	e073      	b.n	80021aa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80020c2:	2b70      	cmp	r3, #112	; 0x70
 80020c4:	d00d      	beq.n	80020e2 <HAL_TIM_ConfigClockSource+0x8c>
 80020c6:	2b70      	cmp	r3, #112	; 0x70
 80020c8:	d804      	bhi.n	80020d4 <HAL_TIM_ConfigClockSource+0x7e>
 80020ca:	2b50      	cmp	r3, #80	; 0x50
 80020cc:	d033      	beq.n	8002136 <HAL_TIM_ConfigClockSource+0xe0>
 80020ce:	2b60      	cmp	r3, #96	; 0x60
 80020d0:	d041      	beq.n	8002156 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80020d2:	e06a      	b.n	80021aa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80020d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020d8:	d066      	beq.n	80021a8 <HAL_TIM_ConfigClockSource+0x152>
 80020da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020de:	d017      	beq.n	8002110 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80020e0:	e063      	b.n	80021aa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	6899      	ldr	r1, [r3, #8]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	f000 f981 	bl	80023f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002104:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	609a      	str	r2, [r3, #8]
      break;
 800210e:	e04c      	b.n	80021aa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	6899      	ldr	r1, [r3, #8]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f000 f96a 	bl	80023f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002132:	609a      	str	r2, [r3, #8]
      break;
 8002134:	e039      	b.n	80021aa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	6859      	ldr	r1, [r3, #4]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	461a      	mov	r2, r3
 8002144:	f000 f8de 	bl	8002304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2150      	movs	r1, #80	; 0x50
 800214e:	4618      	mov	r0, r3
 8002150:	f000 f937 	bl	80023c2 <TIM_ITRx_SetConfig>
      break;
 8002154:	e029      	b.n	80021aa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	6859      	ldr	r1, [r3, #4]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	461a      	mov	r2, r3
 8002164:	f000 f8fd 	bl	8002362 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2160      	movs	r1, #96	; 0x60
 800216e:	4618      	mov	r0, r3
 8002170:	f000 f927 	bl	80023c2 <TIM_ITRx_SetConfig>
      break;
 8002174:	e019      	b.n	80021aa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6859      	ldr	r1, [r3, #4]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	461a      	mov	r2, r3
 8002184:	f000 f8be 	bl	8002304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2140      	movs	r1, #64	; 0x40
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f917 	bl	80023c2 <TIM_ITRx_SetConfig>
      break;
 8002194:	e009      	b.n	80021aa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4619      	mov	r1, r3
 80021a0:	4610      	mov	r0, r2
 80021a2:	f000 f90e 	bl	80023c2 <TIM_ITRx_SetConfig>
      break;
 80021a6:	e000      	b.n	80021aa <HAL_TIM_ConfigClockSource+0x154>
      break;
 80021a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a40      	ldr	r2, [pc, #256]	; (80022d8 <TIM_Base_SetConfig+0x114>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d013      	beq.n	8002204 <TIM_Base_SetConfig+0x40>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e2:	d00f      	beq.n	8002204 <TIM_Base_SetConfig+0x40>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a3d      	ldr	r2, [pc, #244]	; (80022dc <TIM_Base_SetConfig+0x118>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d00b      	beq.n	8002204 <TIM_Base_SetConfig+0x40>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a3c      	ldr	r2, [pc, #240]	; (80022e0 <TIM_Base_SetConfig+0x11c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d007      	beq.n	8002204 <TIM_Base_SetConfig+0x40>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a3b      	ldr	r2, [pc, #236]	; (80022e4 <TIM_Base_SetConfig+0x120>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d003      	beq.n	8002204 <TIM_Base_SetConfig+0x40>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a3a      	ldr	r2, [pc, #232]	; (80022e8 <TIM_Base_SetConfig+0x124>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d108      	bne.n	8002216 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a2f      	ldr	r2, [pc, #188]	; (80022d8 <TIM_Base_SetConfig+0x114>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d02b      	beq.n	8002276 <TIM_Base_SetConfig+0xb2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002224:	d027      	beq.n	8002276 <TIM_Base_SetConfig+0xb2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a2c      	ldr	r2, [pc, #176]	; (80022dc <TIM_Base_SetConfig+0x118>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d023      	beq.n	8002276 <TIM_Base_SetConfig+0xb2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a2b      	ldr	r2, [pc, #172]	; (80022e0 <TIM_Base_SetConfig+0x11c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d01f      	beq.n	8002276 <TIM_Base_SetConfig+0xb2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a2a      	ldr	r2, [pc, #168]	; (80022e4 <TIM_Base_SetConfig+0x120>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d01b      	beq.n	8002276 <TIM_Base_SetConfig+0xb2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a29      	ldr	r2, [pc, #164]	; (80022e8 <TIM_Base_SetConfig+0x124>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d017      	beq.n	8002276 <TIM_Base_SetConfig+0xb2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a28      	ldr	r2, [pc, #160]	; (80022ec <TIM_Base_SetConfig+0x128>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <TIM_Base_SetConfig+0xb2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a27      	ldr	r2, [pc, #156]	; (80022f0 <TIM_Base_SetConfig+0x12c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00f      	beq.n	8002276 <TIM_Base_SetConfig+0xb2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a26      	ldr	r2, [pc, #152]	; (80022f4 <TIM_Base_SetConfig+0x130>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00b      	beq.n	8002276 <TIM_Base_SetConfig+0xb2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a25      	ldr	r2, [pc, #148]	; (80022f8 <TIM_Base_SetConfig+0x134>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d007      	beq.n	8002276 <TIM_Base_SetConfig+0xb2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a24      	ldr	r2, [pc, #144]	; (80022fc <TIM_Base_SetConfig+0x138>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d003      	beq.n	8002276 <TIM_Base_SetConfig+0xb2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a23      	ldr	r2, [pc, #140]	; (8002300 <TIM_Base_SetConfig+0x13c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d108      	bne.n	8002288 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800227c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	4313      	orrs	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <TIM_Base_SetConfig+0x114>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d003      	beq.n	80022bc <TIM_Base_SetConfig+0xf8>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a0c      	ldr	r2, [pc, #48]	; (80022e8 <TIM_Base_SetConfig+0x124>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d103      	bne.n	80022c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	615a      	str	r2, [r3, #20]
}
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40010000 	.word	0x40010000
 80022dc:	40000400 	.word	0x40000400
 80022e0:	40000800 	.word	0x40000800
 80022e4:	40000c00 	.word	0x40000c00
 80022e8:	40010400 	.word	0x40010400
 80022ec:	40014000 	.word	0x40014000
 80022f0:	40014400 	.word	0x40014400
 80022f4:	40014800 	.word	0x40014800
 80022f8:	40001800 	.word	0x40001800
 80022fc:	40001c00 	.word	0x40001c00
 8002300:	40002000 	.word	0x40002000

08002304 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002304:	b480      	push	{r7}
 8002306:	b087      	sub	sp, #28
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	f023 0201 	bic.w	r2, r3, #1
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800232e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f023 030a 	bic.w	r3, r3, #10
 8002340:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4313      	orrs	r3, r2
 8002348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	621a      	str	r2, [r3, #32]
}
 8002356:	bf00      	nop
 8002358:	371c      	adds	r7, #28
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002362:	b480      	push	{r7}
 8002364:	b087      	sub	sp, #28
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	f023 0210 	bic.w	r2, r3, #16
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800238c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	031b      	lsls	r3, r3, #12
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800239e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	621a      	str	r2, [r3, #32]
}
 80023b6:	bf00      	nop
 80023b8:	371c      	adds	r7, #28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	f043 0307 	orr.w	r3, r3, #7
 80023e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	609a      	str	r2, [r3, #8]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002412:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	021a      	lsls	r2, r3, #8
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	431a      	orrs	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4313      	orrs	r3, r2
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	4313      	orrs	r3, r2
 8002424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	609a      	str	r2, [r3, #8]
}
 800242c:	bf00      	nop
 800242e:	371c      	adds	r7, #28
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800244c:	2302      	movs	r3, #2
 800244e:	e05a      	b.n	8002506 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002476:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a21      	ldr	r2, [pc, #132]	; (8002514 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d022      	beq.n	80024da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800249c:	d01d      	beq.n	80024da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a1d      	ldr	r2, [pc, #116]	; (8002518 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d018      	beq.n	80024da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a1b      	ldr	r2, [pc, #108]	; (800251c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d013      	beq.n	80024da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1a      	ldr	r2, [pc, #104]	; (8002520 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d00e      	beq.n	80024da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a18      	ldr	r2, [pc, #96]	; (8002524 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d009      	beq.n	80024da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a17      	ldr	r2, [pc, #92]	; (8002528 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d004      	beq.n	80024da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a15      	ldr	r2, [pc, #84]	; (800252c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d10c      	bne.n	80024f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40010000 	.word	0x40010000
 8002518:	40000400 	.word	0x40000400
 800251c:	40000800 	.word	0x40000800
 8002520:	40000c00 	.word	0x40000c00
 8002524:	40010400 	.word	0x40010400
 8002528:	40014000 	.word	0x40014000
 800252c:	40001800 	.word	0x40001800

08002530 <__libc_init_array>:
 8002530:	b570      	push	{r4, r5, r6, lr}
 8002532:	4e0d      	ldr	r6, [pc, #52]	; (8002568 <__libc_init_array+0x38>)
 8002534:	4c0d      	ldr	r4, [pc, #52]	; (800256c <__libc_init_array+0x3c>)
 8002536:	1ba4      	subs	r4, r4, r6
 8002538:	10a4      	asrs	r4, r4, #2
 800253a:	2500      	movs	r5, #0
 800253c:	42a5      	cmp	r5, r4
 800253e:	d109      	bne.n	8002554 <__libc_init_array+0x24>
 8002540:	4e0b      	ldr	r6, [pc, #44]	; (8002570 <__libc_init_array+0x40>)
 8002542:	4c0c      	ldr	r4, [pc, #48]	; (8002574 <__libc_init_array+0x44>)
 8002544:	f000 f820 	bl	8002588 <_init>
 8002548:	1ba4      	subs	r4, r4, r6
 800254a:	10a4      	asrs	r4, r4, #2
 800254c:	2500      	movs	r5, #0
 800254e:	42a5      	cmp	r5, r4
 8002550:	d105      	bne.n	800255e <__libc_init_array+0x2e>
 8002552:	bd70      	pop	{r4, r5, r6, pc}
 8002554:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002558:	4798      	blx	r3
 800255a:	3501      	adds	r5, #1
 800255c:	e7ee      	b.n	800253c <__libc_init_array+0xc>
 800255e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002562:	4798      	blx	r3
 8002564:	3501      	adds	r5, #1
 8002566:	e7f2      	b.n	800254e <__libc_init_array+0x1e>
 8002568:	080025c0 	.word	0x080025c0
 800256c:	080025c0 	.word	0x080025c0
 8002570:	080025c0 	.word	0x080025c0
 8002574:	080025c4 	.word	0x080025c4

08002578 <memset>:
 8002578:	4402      	add	r2, r0
 800257a:	4603      	mov	r3, r0
 800257c:	4293      	cmp	r3, r2
 800257e:	d100      	bne.n	8002582 <memset+0xa>
 8002580:	4770      	bx	lr
 8002582:	f803 1b01 	strb.w	r1, [r3], #1
 8002586:	e7f9      	b.n	800257c <memset+0x4>

08002588 <_init>:
 8002588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258a:	bf00      	nop
 800258c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258e:	bc08      	pop	{r3}
 8002590:	469e      	mov	lr, r3
 8002592:	4770      	bx	lr

08002594 <_fini>:
 8002594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002596:	bf00      	nop
 8002598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259a:	bc08      	pop	{r3}
 800259c:	469e      	mov	lr, r3
 800259e:	4770      	bx	lr
